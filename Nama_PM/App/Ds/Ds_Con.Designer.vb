'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.9164
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Ds_Con"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Ds_Con
    Inherits Global.System.Data.DataSet
    
    Private tablePm_Con_Unit As Pm_Con_UnitDataTable
    
    Private tablePm_Con_Item As Pm_Con_ItemDataTable
    
    Private tablePm_Con_Contract As Pm_Con_ContractDataTable
    
    Private tablePm_Con_Vahed As Pm_Con_VahedDataTable
    
    Private tablePm_Con_ContractItems As Pm_Con_ContractItemsDataTable
    
    Private tablepm_con_ContractItemsTarikh As pm_con_ContractItemsTarikhDataTable
    
    Private tablepm_con_Workform As pm_con_WorkformDataTable
    
    Private tablePm_Con_StatusStatement As Pm_Con_StatusStatementDataTable
    
    Private tablePm_Con_UsedItem As Pm_Con_UsedItemDataTable
    
    Private tablePm_Con_StatusStatementVw As Pm_Con_StatusStatementVwDataTable
    
    Private tablePm_Con_Source As Pm_Con_SourceDataTable
    
    Private tablepm_con_AllItem As pm_con_AllItemDataTable
    
    Private tablePm_Month As Pm_MonthDataTable
    
    Private tablePm_Con_StatusStatementType As Pm_Con_StatusStatementTypeDataTable
    
    Private tablePm_Con_Contract1 As Pm_Con_Contract1DataTable
    
    Private tablePm_con_ContratZarib As Pm_con_ContratZaribDataTable
    
    Private tablePm_Con_MonthReportAmount As Pm_Con_MonthReportAmountDataTable
    
    Private tablepm_Con_Rp_RemainedItem As pm_Con_Rp_RemainedItemDataTable
    
    Private tablePm_con_vahedWeight As Pm_con_vahedWeightDataTable
    
    Private tablePm_con_StatusStatementDetail As Pm_con_StatusStatementDetailDataTable
    
    Private tablePm_Con_ExcelMonthReport As Pm_Con_ExcelMonthReportDataTable
    
    Private tablePm_Con_StatusstatementItemVw As Pm_Con_StatusstatementItemVwDataTable
    
    Private tablePm_Con_GroupWeight As Pm_Con_GroupWeightDataTable
    
    Private tablePm_Con_NavahiWeight As Pm_Con_NavahiWeightDataTable
    
    Private tableRp_Pm_MonthReport_Omoor As Rp_Pm_MonthReport_OmoorDataTable
    
    Private tablepm_con_statusStatementItem As pm_con_statusStatementItemDataTable
    
    Private tableRp_Pm_MonthReport_OmoorVahed As Rp_Pm_MonthReport_OmoorVahedDataTable
    
    Private tablePm_Con_MonthReport_Detail As Pm_Con_MonthReport_DetailDataTable
    
    Private tablePm_Con_SaveEzafekar As Pm_Con_SaveEzafekarDataTable
    
    Private tablePm_con_MonthReportGrouupConfirmPrice As Pm_con_MonthReportGrouupConfirmPriceDataTable
    
    Private tablePm_MonthReport As Pm_MonthReportDataTable
    
    Private tablePm_Con_Non_MonthReport As Pm_Con_Non_MonthReportDataTable
    
    Private relationFK_Pm_Con_VahedWeight_Pm_Con_Contract As Global.System.Data.DataRelation
    
    Private relationFK_Pm_Con_VahedWeight_Pm_Con_Contract1 As Global.System.Data.DataRelation
    
    Private relationFK_Pm_Con_NavahiWeight_Pm_Con_Contract As Global.System.Data.DataRelation
    
    Private relationFK_Pm_Con_NavahiWeight_Pm_Con_Contract1 As Global.System.Data.DataRelation
    
    Private relationFK_Pm_Con_ContractItems_Pm_Con_Contract As Global.System.Data.DataRelation
    
    Private relationFK_Pm_Con_ContractItems_Pm_Con_Contract1 As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Pm_Con_Unit")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_UnitDataTable(ds.Tables("Pm_Con_Unit")))
            End If
            If (Not (ds.Tables("Pm_Con_Item")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_ItemDataTable(ds.Tables("Pm_Con_Item")))
            End If
            If (Not (ds.Tables("Pm_Con_Contract")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_ContractDataTable(ds.Tables("Pm_Con_Contract")))
            End If
            If (Not (ds.Tables("Pm_Con_Vahed")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_VahedDataTable(ds.Tables("Pm_Con_Vahed")))
            End If
            If (Not (ds.Tables("Pm_Con_ContractItems")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_ContractItemsDataTable(ds.Tables("Pm_Con_ContractItems")))
            End If
            If (Not (ds.Tables("pm_con_ContractItemsTarikh")) Is Nothing) Then
                MyBase.Tables.Add(New pm_con_ContractItemsTarikhDataTable(ds.Tables("pm_con_ContractItemsTarikh")))
            End If
            If (Not (ds.Tables("pm_con_Workform")) Is Nothing) Then
                MyBase.Tables.Add(New pm_con_WorkformDataTable(ds.Tables("pm_con_Workform")))
            End If
            If (Not (ds.Tables("Pm_Con_StatusStatement")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_StatusStatementDataTable(ds.Tables("Pm_Con_StatusStatement")))
            End If
            If (Not (ds.Tables("Pm_Con_UsedItem")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_UsedItemDataTable(ds.Tables("Pm_Con_UsedItem")))
            End If
            If (Not (ds.Tables("Pm_Con_StatusStatementVw")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_StatusStatementVwDataTable(ds.Tables("Pm_Con_StatusStatementVw")))
            End If
            If (Not (ds.Tables("Pm_Con_Source")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_SourceDataTable(ds.Tables("Pm_Con_Source")))
            End If
            If (Not (ds.Tables("pm_con_AllItem")) Is Nothing) Then
                MyBase.Tables.Add(New pm_con_AllItemDataTable(ds.Tables("pm_con_AllItem")))
            End If
            If (Not (ds.Tables("Pm_Month")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_MonthDataTable(ds.Tables("Pm_Month")))
            End If
            If (Not (ds.Tables("Pm_Con_StatusStatementType")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_StatusStatementTypeDataTable(ds.Tables("Pm_Con_StatusStatementType")))
            End If
            If (Not (ds.Tables("Pm_Con_Contract1")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_Contract1DataTable(ds.Tables("Pm_Con_Contract1")))
            End If
            If (Not (ds.Tables("Pm_con_ContratZarib")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_con_ContratZaribDataTable(ds.Tables("Pm_con_ContratZarib")))
            End If
            If (Not (ds.Tables("Pm_Con_MonthReportAmount")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_MonthReportAmountDataTable(ds.Tables("Pm_Con_MonthReportAmount")))
            End If
            If (Not (ds.Tables("pm_Con_Rp_RemainedItem")) Is Nothing) Then
                MyBase.Tables.Add(New pm_Con_Rp_RemainedItemDataTable(ds.Tables("pm_Con_Rp_RemainedItem")))
            End If
            If (Not (ds.Tables("Pm_con_vahedWeight")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_con_vahedWeightDataTable(ds.Tables("Pm_con_vahedWeight")))
            End If
            If (Not (ds.Tables("Pm_con_StatusStatementDetail")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_con_StatusStatementDetailDataTable(ds.Tables("Pm_con_StatusStatementDetail")))
            End If
            If (Not (ds.Tables("Pm_Con_ExcelMonthReport")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_ExcelMonthReportDataTable(ds.Tables("Pm_Con_ExcelMonthReport")))
            End If
            If (Not (ds.Tables("Pm_Con_StatusstatementItemVw")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_StatusstatementItemVwDataTable(ds.Tables("Pm_Con_StatusstatementItemVw")))
            End If
            If (Not (ds.Tables("Pm_Con_GroupWeight")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_GroupWeightDataTable(ds.Tables("Pm_Con_GroupWeight")))
            End If
            If (Not (ds.Tables("Pm_Con_NavahiWeight")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_NavahiWeightDataTable(ds.Tables("Pm_Con_NavahiWeight")))
            End If
            If (Not (ds.Tables("Rp_Pm_MonthReport_Omoor")) Is Nothing) Then
                MyBase.Tables.Add(New Rp_Pm_MonthReport_OmoorDataTable(ds.Tables("Rp_Pm_MonthReport_Omoor")))
            End If
            If (Not (ds.Tables("pm_con_statusStatementItem")) Is Nothing) Then
                MyBase.Tables.Add(New pm_con_statusStatementItemDataTable(ds.Tables("pm_con_statusStatementItem")))
            End If
            If (Not (ds.Tables("Rp_Pm_MonthReport_OmoorVahed")) Is Nothing) Then
                MyBase.Tables.Add(New Rp_Pm_MonthReport_OmoorVahedDataTable(ds.Tables("Rp_Pm_MonthReport_OmoorVahed")))
            End If
            If (Not (ds.Tables("Pm_Con_MonthReport_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_MonthReport_DetailDataTable(ds.Tables("Pm_Con_MonthReport_Detail")))
            End If
            If (Not (ds.Tables("Pm_Con_SaveEzafekar")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_SaveEzafekarDataTable(ds.Tables("Pm_Con_SaveEzafekar")))
            End If
            If (Not (ds.Tables("Pm_con_MonthReportGrouupConfirmPrice")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_con_MonthReportGrouupConfirmPriceDataTable(ds.Tables("Pm_con_MonthReportGrouupConfirmPrice")))
            End If
            If (Not (ds.Tables("Pm_MonthReport")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_MonthReportDataTable(ds.Tables("Pm_MonthReport")))
            End If
            If (Not (ds.Tables("Pm_Con_Non_MonthReport")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_Non_MonthReportDataTable(ds.Tables("Pm_Con_Non_MonthReport")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Con_Unit() As Pm_Con_UnitDataTable
        Get
            Return Me.tablePm_Con_Unit
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Con_Item() As Pm_Con_ItemDataTable
        Get
            Return Me.tablePm_Con_Item
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Con_Contract() As Pm_Con_ContractDataTable
        Get
            Return Me.tablePm_Con_Contract
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Con_Vahed() As Pm_Con_VahedDataTable
        Get
            Return Me.tablePm_Con_Vahed
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Con_ContractItems() As Pm_Con_ContractItemsDataTable
        Get
            Return Me.tablePm_Con_ContractItems
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pm_con_ContractItemsTarikh() As pm_con_ContractItemsTarikhDataTable
        Get
            Return Me.tablepm_con_ContractItemsTarikh
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pm_con_Workform() As pm_con_WorkformDataTable
        Get
            Return Me.tablepm_con_Workform
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Con_StatusStatement() As Pm_Con_StatusStatementDataTable
        Get
            Return Me.tablePm_Con_StatusStatement
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Con_UsedItem() As Pm_Con_UsedItemDataTable
        Get
            Return Me.tablePm_Con_UsedItem
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Con_StatusStatementVw() As Pm_Con_StatusStatementVwDataTable
        Get
            Return Me.tablePm_Con_StatusStatementVw
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Con_Source() As Pm_Con_SourceDataTable
        Get
            Return Me.tablePm_Con_Source
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pm_con_AllItem() As pm_con_AllItemDataTable
        Get
            Return Me.tablepm_con_AllItem
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Month() As Pm_MonthDataTable
        Get
            Return Me.tablePm_Month
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Con_StatusStatementType() As Pm_Con_StatusStatementTypeDataTable
        Get
            Return Me.tablePm_Con_StatusStatementType
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Con_Contract1() As Pm_Con_Contract1DataTable
        Get
            Return Me.tablePm_Con_Contract1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_con_ContratZarib() As Pm_con_ContratZaribDataTable
        Get
            Return Me.tablePm_con_ContratZarib
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Con_MonthReportAmount() As Pm_Con_MonthReportAmountDataTable
        Get
            Return Me.tablePm_Con_MonthReportAmount
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pm_Con_Rp_RemainedItem() As pm_Con_Rp_RemainedItemDataTable
        Get
            Return Me.tablepm_Con_Rp_RemainedItem
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_con_vahedWeight() As Pm_con_vahedWeightDataTable
        Get
            Return Me.tablePm_con_vahedWeight
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_con_StatusStatementDetail() As Pm_con_StatusStatementDetailDataTable
        Get
            Return Me.tablePm_con_StatusStatementDetail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Con_ExcelMonthReport() As Pm_Con_ExcelMonthReportDataTable
        Get
            Return Me.tablePm_Con_ExcelMonthReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Con_StatusstatementItemVw() As Pm_Con_StatusstatementItemVwDataTable
        Get
            Return Me.tablePm_Con_StatusstatementItemVw
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Con_GroupWeight() As Pm_Con_GroupWeightDataTable
        Get
            Return Me.tablePm_Con_GroupWeight
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Con_NavahiWeight() As Pm_Con_NavahiWeightDataTable
        Get
            Return Me.tablePm_Con_NavahiWeight
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Rp_Pm_MonthReport_Omoor() As Rp_Pm_MonthReport_OmoorDataTable
        Get
            Return Me.tableRp_Pm_MonthReport_Omoor
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pm_con_statusStatementItem() As pm_con_statusStatementItemDataTable
        Get
            Return Me.tablepm_con_statusStatementItem
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Rp_Pm_MonthReport_OmoorVahed() As Rp_Pm_MonthReport_OmoorVahedDataTable
        Get
            Return Me.tableRp_Pm_MonthReport_OmoorVahed
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Con_MonthReport_Detail() As Pm_Con_MonthReport_DetailDataTable
        Get
            Return Me.tablePm_Con_MonthReport_Detail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Con_SaveEzafekar() As Pm_Con_SaveEzafekarDataTable
        Get
            Return Me.tablePm_Con_SaveEzafekar
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_con_MonthReportGrouupConfirmPrice() As Pm_con_MonthReportGrouupConfirmPriceDataTable
        Get
            Return Me.tablePm_con_MonthReportGrouupConfirmPrice
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_MonthReport() As Pm_MonthReportDataTable
        Get
            Return Me.tablePm_MonthReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Con_Non_MonthReport() As Pm_Con_Non_MonthReportDataTable
        Get
            Return Me.tablePm_Con_Non_MonthReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Ds_Con = CType(MyBase.Clone,Ds_Con)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Pm_Con_Unit")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_UnitDataTable(ds.Tables("Pm_Con_Unit")))
            End If
            If (Not (ds.Tables("Pm_Con_Item")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_ItemDataTable(ds.Tables("Pm_Con_Item")))
            End If
            If (Not (ds.Tables("Pm_Con_Contract")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_ContractDataTable(ds.Tables("Pm_Con_Contract")))
            End If
            If (Not (ds.Tables("Pm_Con_Vahed")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_VahedDataTable(ds.Tables("Pm_Con_Vahed")))
            End If
            If (Not (ds.Tables("Pm_Con_ContractItems")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_ContractItemsDataTable(ds.Tables("Pm_Con_ContractItems")))
            End If
            If (Not (ds.Tables("pm_con_ContractItemsTarikh")) Is Nothing) Then
                MyBase.Tables.Add(New pm_con_ContractItemsTarikhDataTable(ds.Tables("pm_con_ContractItemsTarikh")))
            End If
            If (Not (ds.Tables("pm_con_Workform")) Is Nothing) Then
                MyBase.Tables.Add(New pm_con_WorkformDataTable(ds.Tables("pm_con_Workform")))
            End If
            If (Not (ds.Tables("Pm_Con_StatusStatement")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_StatusStatementDataTable(ds.Tables("Pm_Con_StatusStatement")))
            End If
            If (Not (ds.Tables("Pm_Con_UsedItem")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_UsedItemDataTable(ds.Tables("Pm_Con_UsedItem")))
            End If
            If (Not (ds.Tables("Pm_Con_StatusStatementVw")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_StatusStatementVwDataTable(ds.Tables("Pm_Con_StatusStatementVw")))
            End If
            If (Not (ds.Tables("Pm_Con_Source")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_SourceDataTable(ds.Tables("Pm_Con_Source")))
            End If
            If (Not (ds.Tables("pm_con_AllItem")) Is Nothing) Then
                MyBase.Tables.Add(New pm_con_AllItemDataTable(ds.Tables("pm_con_AllItem")))
            End If
            If (Not (ds.Tables("Pm_Month")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_MonthDataTable(ds.Tables("Pm_Month")))
            End If
            If (Not (ds.Tables("Pm_Con_StatusStatementType")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_StatusStatementTypeDataTable(ds.Tables("Pm_Con_StatusStatementType")))
            End If
            If (Not (ds.Tables("Pm_Con_Contract1")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_Contract1DataTable(ds.Tables("Pm_Con_Contract1")))
            End If
            If (Not (ds.Tables("Pm_con_ContratZarib")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_con_ContratZaribDataTable(ds.Tables("Pm_con_ContratZarib")))
            End If
            If (Not (ds.Tables("Pm_Con_MonthReportAmount")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_MonthReportAmountDataTable(ds.Tables("Pm_Con_MonthReportAmount")))
            End If
            If (Not (ds.Tables("pm_Con_Rp_RemainedItem")) Is Nothing) Then
                MyBase.Tables.Add(New pm_Con_Rp_RemainedItemDataTable(ds.Tables("pm_Con_Rp_RemainedItem")))
            End If
            If (Not (ds.Tables("Pm_con_vahedWeight")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_con_vahedWeightDataTable(ds.Tables("Pm_con_vahedWeight")))
            End If
            If (Not (ds.Tables("Pm_con_StatusStatementDetail")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_con_StatusStatementDetailDataTable(ds.Tables("Pm_con_StatusStatementDetail")))
            End If
            If (Not (ds.Tables("Pm_Con_ExcelMonthReport")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_ExcelMonthReportDataTable(ds.Tables("Pm_Con_ExcelMonthReport")))
            End If
            If (Not (ds.Tables("Pm_Con_StatusstatementItemVw")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_StatusstatementItemVwDataTable(ds.Tables("Pm_Con_StatusstatementItemVw")))
            End If
            If (Not (ds.Tables("Pm_Con_GroupWeight")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_GroupWeightDataTable(ds.Tables("Pm_Con_GroupWeight")))
            End If
            If (Not (ds.Tables("Pm_Con_NavahiWeight")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_NavahiWeightDataTable(ds.Tables("Pm_Con_NavahiWeight")))
            End If
            If (Not (ds.Tables("Rp_Pm_MonthReport_Omoor")) Is Nothing) Then
                MyBase.Tables.Add(New Rp_Pm_MonthReport_OmoorDataTable(ds.Tables("Rp_Pm_MonthReport_Omoor")))
            End If
            If (Not (ds.Tables("pm_con_statusStatementItem")) Is Nothing) Then
                MyBase.Tables.Add(New pm_con_statusStatementItemDataTable(ds.Tables("pm_con_statusStatementItem")))
            End If
            If (Not (ds.Tables("Rp_Pm_MonthReport_OmoorVahed")) Is Nothing) Then
                MyBase.Tables.Add(New Rp_Pm_MonthReport_OmoorVahedDataTable(ds.Tables("Rp_Pm_MonthReport_OmoorVahed")))
            End If
            If (Not (ds.Tables("Pm_Con_MonthReport_Detail")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_MonthReport_DetailDataTable(ds.Tables("Pm_Con_MonthReport_Detail")))
            End If
            If (Not (ds.Tables("Pm_Con_SaveEzafekar")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_SaveEzafekarDataTable(ds.Tables("Pm_Con_SaveEzafekar")))
            End If
            If (Not (ds.Tables("Pm_con_MonthReportGrouupConfirmPrice")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_con_MonthReportGrouupConfirmPriceDataTable(ds.Tables("Pm_con_MonthReportGrouupConfirmPrice")))
            End If
            If (Not (ds.Tables("Pm_MonthReport")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_MonthReportDataTable(ds.Tables("Pm_MonthReport")))
            End If
            If (Not (ds.Tables("Pm_Con_Non_MonthReport")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Con_Non_MonthReportDataTable(ds.Tables("Pm_Con_Non_MonthReport")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePm_Con_Unit = CType(MyBase.Tables("Pm_Con_Unit"),Pm_Con_UnitDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Con_Unit) Is Nothing) Then
                Me.tablePm_Con_Unit.InitVars
            End If
        End If
        Me.tablePm_Con_Item = CType(MyBase.Tables("Pm_Con_Item"),Pm_Con_ItemDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Con_Item) Is Nothing) Then
                Me.tablePm_Con_Item.InitVars
            End If
        End If
        Me.tablePm_Con_Contract = CType(MyBase.Tables("Pm_Con_Contract"),Pm_Con_ContractDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Con_Contract) Is Nothing) Then
                Me.tablePm_Con_Contract.InitVars
            End If
        End If
        Me.tablePm_Con_Vahed = CType(MyBase.Tables("Pm_Con_Vahed"),Pm_Con_VahedDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Con_Vahed) Is Nothing) Then
                Me.tablePm_Con_Vahed.InitVars
            End If
        End If
        Me.tablePm_Con_ContractItems = CType(MyBase.Tables("Pm_Con_ContractItems"),Pm_Con_ContractItemsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Con_ContractItems) Is Nothing) Then
                Me.tablePm_Con_ContractItems.InitVars
            End If
        End If
        Me.tablepm_con_ContractItemsTarikh = CType(MyBase.Tables("pm_con_ContractItemsTarikh"),pm_con_ContractItemsTarikhDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepm_con_ContractItemsTarikh) Is Nothing) Then
                Me.tablepm_con_ContractItemsTarikh.InitVars
            End If
        End If
        Me.tablepm_con_Workform = CType(MyBase.Tables("pm_con_Workform"),pm_con_WorkformDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepm_con_Workform) Is Nothing) Then
                Me.tablepm_con_Workform.InitVars
            End If
        End If
        Me.tablePm_Con_StatusStatement = CType(MyBase.Tables("Pm_Con_StatusStatement"),Pm_Con_StatusStatementDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Con_StatusStatement) Is Nothing) Then
                Me.tablePm_Con_StatusStatement.InitVars
            End If
        End If
        Me.tablePm_Con_UsedItem = CType(MyBase.Tables("Pm_Con_UsedItem"),Pm_Con_UsedItemDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Con_UsedItem) Is Nothing) Then
                Me.tablePm_Con_UsedItem.InitVars
            End If
        End If
        Me.tablePm_Con_StatusStatementVw = CType(MyBase.Tables("Pm_Con_StatusStatementVw"),Pm_Con_StatusStatementVwDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Con_StatusStatementVw) Is Nothing) Then
                Me.tablePm_Con_StatusStatementVw.InitVars
            End If
        End If
        Me.tablePm_Con_Source = CType(MyBase.Tables("Pm_Con_Source"),Pm_Con_SourceDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Con_Source) Is Nothing) Then
                Me.tablePm_Con_Source.InitVars
            End If
        End If
        Me.tablepm_con_AllItem = CType(MyBase.Tables("pm_con_AllItem"),pm_con_AllItemDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepm_con_AllItem) Is Nothing) Then
                Me.tablepm_con_AllItem.InitVars
            End If
        End If
        Me.tablePm_Month = CType(MyBase.Tables("Pm_Month"),Pm_MonthDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Month) Is Nothing) Then
                Me.tablePm_Month.InitVars
            End If
        End If
        Me.tablePm_Con_StatusStatementType = CType(MyBase.Tables("Pm_Con_StatusStatementType"),Pm_Con_StatusStatementTypeDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Con_StatusStatementType) Is Nothing) Then
                Me.tablePm_Con_StatusStatementType.InitVars
            End If
        End If
        Me.tablePm_Con_Contract1 = CType(MyBase.Tables("Pm_Con_Contract1"),Pm_Con_Contract1DataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Con_Contract1) Is Nothing) Then
                Me.tablePm_Con_Contract1.InitVars
            End If
        End If
        Me.tablePm_con_ContratZarib = CType(MyBase.Tables("Pm_con_ContratZarib"),Pm_con_ContratZaribDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_con_ContratZarib) Is Nothing) Then
                Me.tablePm_con_ContratZarib.InitVars
            End If
        End If
        Me.tablePm_Con_MonthReportAmount = CType(MyBase.Tables("Pm_Con_MonthReportAmount"),Pm_Con_MonthReportAmountDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Con_MonthReportAmount) Is Nothing) Then
                Me.tablePm_Con_MonthReportAmount.InitVars
            End If
        End If
        Me.tablepm_Con_Rp_RemainedItem = CType(MyBase.Tables("pm_Con_Rp_RemainedItem"),pm_Con_Rp_RemainedItemDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepm_Con_Rp_RemainedItem) Is Nothing) Then
                Me.tablepm_Con_Rp_RemainedItem.InitVars
            End If
        End If
        Me.tablePm_con_vahedWeight = CType(MyBase.Tables("Pm_con_vahedWeight"),Pm_con_vahedWeightDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_con_vahedWeight) Is Nothing) Then
                Me.tablePm_con_vahedWeight.InitVars
            End If
        End If
        Me.tablePm_con_StatusStatementDetail = CType(MyBase.Tables("Pm_con_StatusStatementDetail"),Pm_con_StatusStatementDetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_con_StatusStatementDetail) Is Nothing) Then
                Me.tablePm_con_StatusStatementDetail.InitVars
            End If
        End If
        Me.tablePm_Con_ExcelMonthReport = CType(MyBase.Tables("Pm_Con_ExcelMonthReport"),Pm_Con_ExcelMonthReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Con_ExcelMonthReport) Is Nothing) Then
                Me.tablePm_Con_ExcelMonthReport.InitVars
            End If
        End If
        Me.tablePm_Con_StatusstatementItemVw = CType(MyBase.Tables("Pm_Con_StatusstatementItemVw"),Pm_Con_StatusstatementItemVwDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Con_StatusstatementItemVw) Is Nothing) Then
                Me.tablePm_Con_StatusstatementItemVw.InitVars
            End If
        End If
        Me.tablePm_Con_GroupWeight = CType(MyBase.Tables("Pm_Con_GroupWeight"),Pm_Con_GroupWeightDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Con_GroupWeight) Is Nothing) Then
                Me.tablePm_Con_GroupWeight.InitVars
            End If
        End If
        Me.tablePm_Con_NavahiWeight = CType(MyBase.Tables("Pm_Con_NavahiWeight"),Pm_Con_NavahiWeightDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Con_NavahiWeight) Is Nothing) Then
                Me.tablePm_Con_NavahiWeight.InitVars
            End If
        End If
        Me.tableRp_Pm_MonthReport_Omoor = CType(MyBase.Tables("Rp_Pm_MonthReport_Omoor"),Rp_Pm_MonthReport_OmoorDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRp_Pm_MonthReport_Omoor) Is Nothing) Then
                Me.tableRp_Pm_MonthReport_Omoor.InitVars
            End If
        End If
        Me.tablepm_con_statusStatementItem = CType(MyBase.Tables("pm_con_statusStatementItem"),pm_con_statusStatementItemDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepm_con_statusStatementItem) Is Nothing) Then
                Me.tablepm_con_statusStatementItem.InitVars
            End If
        End If
        Me.tableRp_Pm_MonthReport_OmoorVahed = CType(MyBase.Tables("Rp_Pm_MonthReport_OmoorVahed"),Rp_Pm_MonthReport_OmoorVahedDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRp_Pm_MonthReport_OmoorVahed) Is Nothing) Then
                Me.tableRp_Pm_MonthReport_OmoorVahed.InitVars
            End If
        End If
        Me.tablePm_Con_MonthReport_Detail = CType(MyBase.Tables("Pm_Con_MonthReport_Detail"),Pm_Con_MonthReport_DetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Con_MonthReport_Detail) Is Nothing) Then
                Me.tablePm_Con_MonthReport_Detail.InitVars
            End If
        End If
        Me.tablePm_Con_SaveEzafekar = CType(MyBase.Tables("Pm_Con_SaveEzafekar"),Pm_Con_SaveEzafekarDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Con_SaveEzafekar) Is Nothing) Then
                Me.tablePm_Con_SaveEzafekar.InitVars
            End If
        End If
        Me.tablePm_con_MonthReportGrouupConfirmPrice = CType(MyBase.Tables("Pm_con_MonthReportGrouupConfirmPrice"),Pm_con_MonthReportGrouupConfirmPriceDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_con_MonthReportGrouupConfirmPrice) Is Nothing) Then
                Me.tablePm_con_MonthReportGrouupConfirmPrice.InitVars
            End If
        End If
        Me.tablePm_MonthReport = CType(MyBase.Tables("Pm_MonthReport"),Pm_MonthReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_MonthReport) Is Nothing) Then
                Me.tablePm_MonthReport.InitVars
            End If
        End If
        Me.tablePm_Con_Non_MonthReport = CType(MyBase.Tables("Pm_Con_Non_MonthReport"),Pm_Con_Non_MonthReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Con_Non_MonthReport) Is Nothing) Then
                Me.tablePm_Con_Non_MonthReport.InitVars
            End If
        End If
        Me.relationFK_Pm_Con_VahedWeight_Pm_Con_Contract = Me.Relations("FK_Pm_Con_VahedWeight_Pm_Con_Contract")
        Me.relationFK_Pm_Con_VahedWeight_Pm_Con_Contract1 = Me.Relations("FK_Pm_Con_VahedWeight_Pm_Con_Contract1")
        Me.relationFK_Pm_Con_NavahiWeight_Pm_Con_Contract = Me.Relations("FK_Pm_Con_NavahiWeight_Pm_Con_Contract")
        Me.relationFK_Pm_Con_NavahiWeight_Pm_Con_Contract1 = Me.Relations("FK_Pm_Con_NavahiWeight_Pm_Con_Contract1")
        Me.relationFK_Pm_Con_ContractItems_Pm_Con_Contract = Me.Relations("FK_Pm_Con_ContractItems_Pm_Con_Contract")
        Me.relationFK_Pm_Con_ContractItems_Pm_Con_Contract1 = Me.Relations("FK_Pm_Con_ContractItems_Pm_Con_Contract1")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Ds_Con"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Ds_Con.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePm_Con_Unit = New Pm_Con_UnitDataTable
        MyBase.Tables.Add(Me.tablePm_Con_Unit)
        Me.tablePm_Con_Item = New Pm_Con_ItemDataTable
        MyBase.Tables.Add(Me.tablePm_Con_Item)
        Me.tablePm_Con_Contract = New Pm_Con_ContractDataTable
        MyBase.Tables.Add(Me.tablePm_Con_Contract)
        Me.tablePm_Con_Vahed = New Pm_Con_VahedDataTable
        MyBase.Tables.Add(Me.tablePm_Con_Vahed)
        Me.tablePm_Con_ContractItems = New Pm_Con_ContractItemsDataTable
        MyBase.Tables.Add(Me.tablePm_Con_ContractItems)
        Me.tablepm_con_ContractItemsTarikh = New pm_con_ContractItemsTarikhDataTable
        MyBase.Tables.Add(Me.tablepm_con_ContractItemsTarikh)
        Me.tablepm_con_Workform = New pm_con_WorkformDataTable
        MyBase.Tables.Add(Me.tablepm_con_Workform)
        Me.tablePm_Con_StatusStatement = New Pm_Con_StatusStatementDataTable
        MyBase.Tables.Add(Me.tablePm_Con_StatusStatement)
        Me.tablePm_Con_UsedItem = New Pm_Con_UsedItemDataTable
        MyBase.Tables.Add(Me.tablePm_Con_UsedItem)
        Me.tablePm_Con_StatusStatementVw = New Pm_Con_StatusStatementVwDataTable
        MyBase.Tables.Add(Me.tablePm_Con_StatusStatementVw)
        Me.tablePm_Con_Source = New Pm_Con_SourceDataTable
        MyBase.Tables.Add(Me.tablePm_Con_Source)
        Me.tablepm_con_AllItem = New pm_con_AllItemDataTable
        MyBase.Tables.Add(Me.tablepm_con_AllItem)
        Me.tablePm_Month = New Pm_MonthDataTable
        MyBase.Tables.Add(Me.tablePm_Month)
        Me.tablePm_Con_StatusStatementType = New Pm_Con_StatusStatementTypeDataTable
        MyBase.Tables.Add(Me.tablePm_Con_StatusStatementType)
        Me.tablePm_Con_Contract1 = New Pm_Con_Contract1DataTable
        MyBase.Tables.Add(Me.tablePm_Con_Contract1)
        Me.tablePm_con_ContratZarib = New Pm_con_ContratZaribDataTable
        MyBase.Tables.Add(Me.tablePm_con_ContratZarib)
        Me.tablePm_Con_MonthReportAmount = New Pm_Con_MonthReportAmountDataTable
        MyBase.Tables.Add(Me.tablePm_Con_MonthReportAmount)
        Me.tablepm_Con_Rp_RemainedItem = New pm_Con_Rp_RemainedItemDataTable
        MyBase.Tables.Add(Me.tablepm_Con_Rp_RemainedItem)
        Me.tablePm_con_vahedWeight = New Pm_con_vahedWeightDataTable
        MyBase.Tables.Add(Me.tablePm_con_vahedWeight)
        Me.tablePm_con_StatusStatementDetail = New Pm_con_StatusStatementDetailDataTable
        MyBase.Tables.Add(Me.tablePm_con_StatusStatementDetail)
        Me.tablePm_Con_ExcelMonthReport = New Pm_Con_ExcelMonthReportDataTable
        MyBase.Tables.Add(Me.tablePm_Con_ExcelMonthReport)
        Me.tablePm_Con_StatusstatementItemVw = New Pm_Con_StatusstatementItemVwDataTable
        MyBase.Tables.Add(Me.tablePm_Con_StatusstatementItemVw)
        Me.tablePm_Con_GroupWeight = New Pm_Con_GroupWeightDataTable
        MyBase.Tables.Add(Me.tablePm_Con_GroupWeight)
        Me.tablePm_Con_NavahiWeight = New Pm_Con_NavahiWeightDataTable
        MyBase.Tables.Add(Me.tablePm_Con_NavahiWeight)
        Me.tableRp_Pm_MonthReport_Omoor = New Rp_Pm_MonthReport_OmoorDataTable
        MyBase.Tables.Add(Me.tableRp_Pm_MonthReport_Omoor)
        Me.tablepm_con_statusStatementItem = New pm_con_statusStatementItemDataTable
        MyBase.Tables.Add(Me.tablepm_con_statusStatementItem)
        Me.tableRp_Pm_MonthReport_OmoorVahed = New Rp_Pm_MonthReport_OmoorVahedDataTable
        MyBase.Tables.Add(Me.tableRp_Pm_MonthReport_OmoorVahed)
        Me.tablePm_Con_MonthReport_Detail = New Pm_Con_MonthReport_DetailDataTable
        MyBase.Tables.Add(Me.tablePm_Con_MonthReport_Detail)
        Me.tablePm_Con_SaveEzafekar = New Pm_Con_SaveEzafekarDataTable
        MyBase.Tables.Add(Me.tablePm_Con_SaveEzafekar)
        Me.tablePm_con_MonthReportGrouupConfirmPrice = New Pm_con_MonthReportGrouupConfirmPriceDataTable
        MyBase.Tables.Add(Me.tablePm_con_MonthReportGrouupConfirmPrice)
        Me.tablePm_MonthReport = New Pm_MonthReportDataTable
        MyBase.Tables.Add(Me.tablePm_MonthReport)
        Me.tablePm_Con_Non_MonthReport = New Pm_Con_Non_MonthReportDataTable
        MyBase.Tables.Add(Me.tablePm_Con_Non_MonthReport)
        Me.relationFK_Pm_Con_VahedWeight_Pm_Con_Contract = New Global.System.Data.DataRelation("FK_Pm_Con_VahedWeight_Pm_Con_Contract", New Global.System.Data.DataColumn() {Me.tablePm_Con_Contract.srlColumn}, New Global.System.Data.DataColumn() {Me.tablePm_con_vahedWeight.srl_contractColumn}, false)
        Me.Relations.Add(Me.relationFK_Pm_Con_VahedWeight_Pm_Con_Contract)
        Me.relationFK_Pm_Con_VahedWeight_Pm_Con_Contract1 = New Global.System.Data.DataRelation("FK_Pm_Con_VahedWeight_Pm_Con_Contract1", New Global.System.Data.DataColumn() {Me.tablePm_Con_Contract1.SrlColumn}, New Global.System.Data.DataColumn() {Me.tablePm_con_vahedWeight.srl_contractColumn}, false)
        Me.Relations.Add(Me.relationFK_Pm_Con_VahedWeight_Pm_Con_Contract1)
        Me.relationFK_Pm_Con_NavahiWeight_Pm_Con_Contract = New Global.System.Data.DataRelation("FK_Pm_Con_NavahiWeight_Pm_Con_Contract", New Global.System.Data.DataColumn() {Me.tablePm_Con_Contract.srlColumn}, New Global.System.Data.DataColumn() {Me.tablePm_Con_NavahiWeight.srl_contractColumn}, false)
        Me.Relations.Add(Me.relationFK_Pm_Con_NavahiWeight_Pm_Con_Contract)
        Me.relationFK_Pm_Con_NavahiWeight_Pm_Con_Contract1 = New Global.System.Data.DataRelation("FK_Pm_Con_NavahiWeight_Pm_Con_Contract1", New Global.System.Data.DataColumn() {Me.tablePm_Con_Contract1.SrlColumn}, New Global.System.Data.DataColumn() {Me.tablePm_Con_NavahiWeight.srl_contractColumn}, false)
        Me.Relations.Add(Me.relationFK_Pm_Con_NavahiWeight_Pm_Con_Contract1)
        Me.relationFK_Pm_Con_ContractItems_Pm_Con_Contract = New Global.System.Data.DataRelation("FK_Pm_Con_ContractItems_Pm_Con_Contract", New Global.System.Data.DataColumn() {Me.tablePm_Con_Contract.srlColumn}, New Global.System.Data.DataColumn() {Me.tablepm_con_statusStatementItem.srl_contractColumn}, false)
        Me.Relations.Add(Me.relationFK_Pm_Con_ContractItems_Pm_Con_Contract)
        Me.relationFK_Pm_Con_ContractItems_Pm_Con_Contract1 = New Global.System.Data.DataRelation("FK_Pm_Con_ContractItems_Pm_Con_Contract1", New Global.System.Data.DataColumn() {Me.tablePm_Con_Contract1.SrlColumn}, New Global.System.Data.DataColumn() {Me.tablepm_con_statusStatementItem.srl_contractColumn}, false)
        Me.Relations.Add(Me.relationFK_Pm_Con_ContractItems_Pm_Con_Contract1)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Con_Unit() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Con_Item() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Con_Contract() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Con_Vahed() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Con_ContractItems() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializepm_con_ContractItemsTarikh() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializepm_con_Workform() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Con_StatusStatement() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Con_UsedItem() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Con_StatusStatementVw() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Con_Source() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializepm_con_AllItem() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Month() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Con_StatusStatementType() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Con_Contract1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_con_ContratZarib() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Con_MonthReportAmount() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializepm_Con_Rp_RemainedItem() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_con_vahedWeight() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_con_StatusStatementDetail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Con_ExcelMonthReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Con_StatusstatementItemVw() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Con_GroupWeight() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Con_NavahiWeight() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRp_Pm_MonthReport_Omoor() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializepm_con_statusStatementItem() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRp_Pm_MonthReport_OmoorVahed() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Con_MonthReport_Detail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Con_SaveEzafekar() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_con_MonthReportGrouupConfirmPrice() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_MonthReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Con_Non_MonthReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Ds_Con = New Ds_Con
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub Pm_Con_UnitRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Con_UnitRowChangeEvent)
    
    Public Delegate Sub Pm_Con_ItemRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Con_ItemRowChangeEvent)
    
    Public Delegate Sub Pm_Con_ContractRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Con_ContractRowChangeEvent)
    
    Public Delegate Sub Pm_Con_VahedRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Con_VahedRowChangeEvent)
    
    Public Delegate Sub Pm_Con_ContractItemsRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Con_ContractItemsRowChangeEvent)
    
    Public Delegate Sub pm_con_ContractItemsTarikhRowChangeEventHandler(ByVal sender As Object, ByVal e As pm_con_ContractItemsTarikhRowChangeEvent)
    
    Public Delegate Sub pm_con_WorkformRowChangeEventHandler(ByVal sender As Object, ByVal e As pm_con_WorkformRowChangeEvent)
    
    Public Delegate Sub Pm_Con_StatusStatementRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Con_StatusStatementRowChangeEvent)
    
    Public Delegate Sub Pm_Con_UsedItemRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Con_UsedItemRowChangeEvent)
    
    Public Delegate Sub Pm_Con_StatusStatementVwRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Con_StatusStatementVwRowChangeEvent)
    
    Public Delegate Sub Pm_Con_SourceRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Con_SourceRowChangeEvent)
    
    Public Delegate Sub pm_con_AllItemRowChangeEventHandler(ByVal sender As Object, ByVal e As pm_con_AllItemRowChangeEvent)
    
    Public Delegate Sub Pm_MonthRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_MonthRowChangeEvent)
    
    Public Delegate Sub Pm_Con_StatusStatementTypeRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Con_StatusStatementTypeRowChangeEvent)
    
    Public Delegate Sub Pm_Con_Contract1RowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Con_Contract1RowChangeEvent)
    
    Public Delegate Sub Pm_con_ContratZaribRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_con_ContratZaribRowChangeEvent)
    
    Public Delegate Sub Pm_Con_MonthReportAmountRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Con_MonthReportAmountRowChangeEvent)
    
    Public Delegate Sub pm_Con_Rp_RemainedItemRowChangeEventHandler(ByVal sender As Object, ByVal e As pm_Con_Rp_RemainedItemRowChangeEvent)
    
    Public Delegate Sub Pm_con_vahedWeightRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_con_vahedWeightRowChangeEvent)
    
    Public Delegate Sub Pm_con_StatusStatementDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_con_StatusStatementDetailRowChangeEvent)
    
    Public Delegate Sub Pm_Con_ExcelMonthReportRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Con_ExcelMonthReportRowChangeEvent)
    
    Public Delegate Sub Pm_Con_StatusstatementItemVwRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Con_StatusstatementItemVwRowChangeEvent)
    
    Public Delegate Sub Pm_Con_GroupWeightRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Con_GroupWeightRowChangeEvent)
    
    Public Delegate Sub Pm_Con_NavahiWeightRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Con_NavahiWeightRowChangeEvent)
    
    Public Delegate Sub Rp_Pm_MonthReport_OmoorRowChangeEventHandler(ByVal sender As Object, ByVal e As Rp_Pm_MonthReport_OmoorRowChangeEvent)
    
    Public Delegate Sub pm_con_statusStatementItemRowChangeEventHandler(ByVal sender As Object, ByVal e As pm_con_statusStatementItemRowChangeEvent)
    
    Public Delegate Sub Rp_Pm_MonthReport_OmoorVahedRowChangeEventHandler(ByVal sender As Object, ByVal e As Rp_Pm_MonthReport_OmoorVahedRowChangeEvent)
    
    Public Delegate Sub Pm_Con_MonthReport_DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Con_MonthReport_DetailRowChangeEvent)
    
    Public Delegate Sub Pm_Con_SaveEzafekarRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Con_SaveEzafekarRowChangeEvent)
    
    Public Delegate Sub Pm_con_MonthReportGrouupConfirmPriceRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_con_MonthReportGrouupConfirmPriceRowChangeEvent)
    
    Public Delegate Sub Pm_MonthReportRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_MonthReportRowChangeEvent)
    
    Public Delegate Sub Pm_Con_Non_MonthReportRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Con_Non_MonthReportRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Con_UnitDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Con_UnitRow)
        
        Private columnsrl As Global.System.Data.DataColumn
        
        Private columnname As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Con_Unit"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Con_UnitRow
            Get
                Return CType(Me.Rows(index),Pm_Con_UnitRow)
            End Get
        End Property
        
        Public Event Pm_Con_UnitRowChanging As Pm_Con_UnitRowChangeEventHandler
        
        Public Event Pm_Con_UnitRowChanged As Pm_Con_UnitRowChangeEventHandler
        
        Public Event Pm_Con_UnitRowDeleting As Pm_Con_UnitRowChangeEventHandler
        
        Public Event Pm_Con_UnitRowDeleted As Pm_Con_UnitRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Con_UnitRow(ByVal row As Pm_Con_UnitRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Con_UnitRow(ByVal name As String) As Pm_Con_UnitRow
            Dim rowPm_Con_UnitRow As Pm_Con_UnitRow = CType(Me.NewRow,Pm_Con_UnitRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, name}
            rowPm_Con_UnitRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Con_UnitRow)
            Return rowPm_Con_UnitRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysrl(ByVal srl As Integer) As Pm_Con_UnitRow
            Return CType(Me.Rows.Find(New Object() {srl}),Pm_Con_UnitRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Con_UnitDataTable = CType(MyBase.Clone,Pm_Con_UnitDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Con_UnitDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsrl = MyBase.Columns("srl")
            Me.columnname = MyBase.Columns("name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsrl = New Global.System.Data.DataColumn("srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl)
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsrl}, true))
            Me.columnsrl.AutoIncrement = true
            Me.columnsrl.AutoIncrementSeed = -1
            Me.columnsrl.AutoIncrementStep = -1
            Me.columnsrl.AllowDBNull = false
            Me.columnsrl.ReadOnly = true
            Me.columnsrl.Unique = true
            Me.columnname.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Con_UnitRow() As Pm_Con_UnitRow
            Return CType(Me.NewRow,Pm_Con_UnitRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Con_UnitRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Con_UnitRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Con_UnitRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_UnitRowChanged(Me, New Pm_Con_UnitRowChangeEvent(CType(e.Row,Pm_Con_UnitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Con_UnitRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_UnitRowChanging(Me, New Pm_Con_UnitRowChangeEvent(CType(e.Row,Pm_Con_UnitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Con_UnitRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_UnitRowDeleted(Me, New Pm_Con_UnitRowChangeEvent(CType(e.Row,Pm_Con_UnitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Con_UnitRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_UnitRowDeleting(Me, New Pm_Con_UnitRowChangeEvent(CType(e.Row,Pm_Con_UnitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Con_UnitRow(ByVal row As Pm_Con_UnitRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Con_UnitDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Con_ItemDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Con_ItemRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnکد As Global.System.Data.DataColumn
        
        Private columnعنوان As Global.System.Data.DataColumn
        
        Private columnتوضیحات As Global.System.Data.DataColumn
        
        Private columnواحد_شمارش As Global.System.Data.DataColumn
        
        Private columnواحد_کاری As Global.System.Data.DataColumn
        
        Private columnولتاژ As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Con_Item"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property کدColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnکد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property عنوانColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnعنوان
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property توضیحاتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتوضیحات
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property واحد_شمارشColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnواحد_شمارش
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property واحد_کاریColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnواحد_کاری
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ولتاژColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnولتاژ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Con_ItemRow
            Get
                Return CType(Me.Rows(index),Pm_Con_ItemRow)
            End Get
        End Property
        
        Public Event Pm_Con_ItemRowChanging As Pm_Con_ItemRowChangeEventHandler
        
        Public Event Pm_Con_ItemRowChanged As Pm_Con_ItemRowChangeEventHandler
        
        Public Event Pm_Con_ItemRowDeleting As Pm_Con_ItemRowChangeEventHandler
        
        Public Event Pm_Con_ItemRowDeleted As Pm_Con_ItemRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Con_ItemRow(ByVal row As Pm_Con_ItemRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Con_ItemRow(ByVal کد As String, ByVal عنوان As String, ByVal توضیحات As String, ByVal واحد_شمارش As String, ByVal واحد_کاری As String, ByVal ولتاژ As Integer) As Pm_Con_ItemRow
            Dim rowPm_Con_ItemRow As Pm_Con_ItemRow = CType(Me.NewRow,Pm_Con_ItemRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, کد, عنوان, توضیحات, واحد_شمارش, واحد_کاری, ولتاژ}
            rowPm_Con_ItemRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Con_ItemRow)
            Return rowPm_Con_ItemRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As Pm_Con_ItemRow
            Return CType(Me.Rows.Find(New Object() {Srl}),Pm_Con_ItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Con_ItemDataTable = CType(MyBase.Clone,Pm_Con_ItemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Con_ItemDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnکد = MyBase.Columns("کد")
            Me.columnعنوان = MyBase.Columns("عنوان")
            Me.columnتوضیحات = MyBase.Columns("توضیحات")
            Me.columnواحد_شمارش = MyBase.Columns("واحد شمارش")
            Me.columnواحد_کاری = MyBase.Columns("واحد کاری")
            Me.columnولتاژ = MyBase.Columns("ولتاژ")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnکد = New Global.System.Data.DataColumn("کد", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnکد)
            Me.columnعنوان = New Global.System.Data.DataColumn("عنوان", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnعنوان)
            Me.columnتوضیحات = New Global.System.Data.DataColumn("توضیحات", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتوضیحات)
            Me.columnواحد_شمارش = New Global.System.Data.DataColumn("واحد شمارش", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnواحد_شمارش)
            Me.columnواحد_کاری = New Global.System.Data.DataColumn("واحد کاری", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnواحد_کاری)
            Me.columnولتاژ = New Global.System.Data.DataColumn("ولتاژ", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnولتاژ)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnSrl.AutoIncrement = true
            Me.columnSrl.AutoIncrementSeed = -1
            Me.columnSrl.AutoIncrementStep = -1
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.ReadOnly = true
            Me.columnSrl.Unique = true
            Me.columnکد.MaxLength = 50
            Me.columnعنوان.MaxLength = 500
            Me.columnتوضیحات.MaxLength = 1000
            Me.columnواحد_شمارش.MaxLength = 50
            Me.columnواحد_کاری.MaxLength = 400
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Con_ItemRow() As Pm_Con_ItemRow
            Return CType(Me.NewRow,Pm_Con_ItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Con_ItemRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Con_ItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Con_ItemRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_ItemRowChanged(Me, New Pm_Con_ItemRowChangeEvent(CType(e.Row,Pm_Con_ItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Con_ItemRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_ItemRowChanging(Me, New Pm_Con_ItemRowChangeEvent(CType(e.Row,Pm_Con_ItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Con_ItemRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_ItemRowDeleted(Me, New Pm_Con_ItemRowChangeEvent(CType(e.Row,Pm_Con_ItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Con_ItemRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_ItemRowDeleting(Me, New Pm_Con_ItemRowChangeEvent(CType(e.Row,Pm_Con_ItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Con_ItemRow(ByVal row As Pm_Con_ItemRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Con_ItemDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Con_ContractDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Con_ContractRow)
        
        Private columnsrl As Global.System.Data.DataColumn
        
        Private columnعنوان As Global.System.Data.DataColumn
        
        Private columnتوضیحات As Global.System.Data.DataColumn
        
        Private columnتاریخ_شروع As Global.System.Data.DataColumn
        
        Private columnتاریخ_خاتمه As Global.System.Data.DataColumn
        
        Private columnکد As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Con_Contract"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property عنوانColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnعنوان
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property توضیحاتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتوضیحات
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاریخ_شروعColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاریخ_شروع
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاریخ_خاتمهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاریخ_خاتمه
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property کدColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnکد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Con_ContractRow
            Get
                Return CType(Me.Rows(index),Pm_Con_ContractRow)
            End Get
        End Property
        
        Public Event Pm_Con_ContractRowChanging As Pm_Con_ContractRowChangeEventHandler
        
        Public Event Pm_Con_ContractRowChanged As Pm_Con_ContractRowChangeEventHandler
        
        Public Event Pm_Con_ContractRowDeleting As Pm_Con_ContractRowChangeEventHandler
        
        Public Event Pm_Con_ContractRowDeleted As Pm_Con_ContractRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Con_ContractRow(ByVal row As Pm_Con_ContractRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Con_ContractRow(ByVal عنوان As String, ByVal توضیحات As String, ByVal تاریخ_شروع As String, ByVal تاریخ_خاتمه As String, ByVal کد As String) As Pm_Con_ContractRow
            Dim rowPm_Con_ContractRow As Pm_Con_ContractRow = CType(Me.NewRow,Pm_Con_ContractRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, عنوان, توضیحات, تاریخ_شروع, تاریخ_خاتمه, کد}
            rowPm_Con_ContractRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Con_ContractRow)
            Return rowPm_Con_ContractRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysrl(ByVal srl As Integer) As Pm_Con_ContractRow
            Return CType(Me.Rows.Find(New Object() {srl}),Pm_Con_ContractRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Con_ContractDataTable = CType(MyBase.Clone,Pm_Con_ContractDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Con_ContractDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsrl = MyBase.Columns("srl")
            Me.columnعنوان = MyBase.Columns("عنوان")
            Me.columnتوضیحات = MyBase.Columns("توضیحات")
            Me.columnتاریخ_شروع = MyBase.Columns("تاریخ شروع")
            Me.columnتاریخ_خاتمه = MyBase.Columns("تاریخ خاتمه")
            Me.columnکد = MyBase.Columns("کد")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsrl = New Global.System.Data.DataColumn("srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl)
            Me.columnعنوان = New Global.System.Data.DataColumn("عنوان", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnعنوان)
            Me.columnتوضیحات = New Global.System.Data.DataColumn("توضیحات", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتوضیحات)
            Me.columnتاریخ_شروع = New Global.System.Data.DataColumn("تاریخ شروع", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاریخ_شروع)
            Me.columnتاریخ_خاتمه = New Global.System.Data.DataColumn("تاریخ خاتمه", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاریخ_خاتمه)
            Me.columnکد = New Global.System.Data.DataColumn("کد", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnکد)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsrl}, true))
            Me.columnsrl.AutoIncrement = true
            Me.columnsrl.AutoIncrementSeed = -1
            Me.columnsrl.AutoIncrementStep = -1
            Me.columnsrl.AllowDBNull = false
            Me.columnsrl.ReadOnly = true
            Me.columnsrl.Unique = true
            Me.columnعنوان.MaxLength = 50
            Me.columnتوضیحات.MaxLength = 500
            Me.columnتاریخ_شروع.MaxLength = 10
            Me.columnتاریخ_خاتمه.MaxLength = 10
            Me.columnکد.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Con_ContractRow() As Pm_Con_ContractRow
            Return CType(Me.NewRow,Pm_Con_ContractRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Con_ContractRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Con_ContractRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Con_ContractRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_ContractRowChanged(Me, New Pm_Con_ContractRowChangeEvent(CType(e.Row,Pm_Con_ContractRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Con_ContractRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_ContractRowChanging(Me, New Pm_Con_ContractRowChangeEvent(CType(e.Row,Pm_Con_ContractRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Con_ContractRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_ContractRowDeleted(Me, New Pm_Con_ContractRowChangeEvent(CType(e.Row,Pm_Con_ContractRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Con_ContractRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_ContractRowDeleting(Me, New Pm_Con_ContractRowChangeEvent(CType(e.Row,Pm_Con_ContractRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Con_ContractRow(ByVal row As Pm_Con_ContractRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Con_ContractDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Con_VahedDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Con_VahedRow)
        
        Private columnsrl_vahed As Global.System.Data.DataColumn
        
        Private columnنام As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Con_Vahed"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_vahedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_vahed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نامColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Con_VahedRow
            Get
                Return CType(Me.Rows(index),Pm_Con_VahedRow)
            End Get
        End Property
        
        Public Event Pm_Con_VahedRowChanging As Pm_Con_VahedRowChangeEventHandler
        
        Public Event Pm_Con_VahedRowChanged As Pm_Con_VahedRowChangeEventHandler
        
        Public Event Pm_Con_VahedRowDeleting As Pm_Con_VahedRowChangeEventHandler
        
        Public Event Pm_Con_VahedRowDeleted As Pm_Con_VahedRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Con_VahedRow(ByVal row As Pm_Con_VahedRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Con_VahedRow(ByVal srl_vahed As Integer, ByVal نام As String) As Pm_Con_VahedRow
            Dim rowPm_Con_VahedRow As Pm_Con_VahedRow = CType(Me.NewRow,Pm_Con_VahedRow)
            Dim columnValuesArray() As Object = New Object() {srl_vahed, نام}
            rowPm_Con_VahedRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Con_VahedRow)
            Return rowPm_Con_VahedRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Con_VahedDataTable = CType(MyBase.Clone,Pm_Con_VahedDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Con_VahedDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsrl_vahed = MyBase.Columns("srl_vahed")
            Me.columnنام = MyBase.Columns("نام")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsrl_vahed = New Global.System.Data.DataColumn("srl_vahed", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_vahed)
            Me.columnنام = New Global.System.Data.DataColumn("نام", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام)
            Me.columnنام.MaxLength = 400
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Con_VahedRow() As Pm_Con_VahedRow
            Return CType(Me.NewRow,Pm_Con_VahedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Con_VahedRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Con_VahedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Con_VahedRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_VahedRowChanged(Me, New Pm_Con_VahedRowChangeEvent(CType(e.Row,Pm_Con_VahedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Con_VahedRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_VahedRowChanging(Me, New Pm_Con_VahedRowChangeEvent(CType(e.Row,Pm_Con_VahedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Con_VahedRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_VahedRowDeleted(Me, New Pm_Con_VahedRowChangeEvent(CType(e.Row,Pm_Con_VahedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Con_VahedRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_VahedRowDeleting(Me, New Pm_Con_VahedRowChangeEvent(CType(e.Row,Pm_Con_VahedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Con_VahedRow(ByVal row As Pm_Con_VahedRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Con_VahedDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Con_ContractItemsDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Con_ContractItemsRow)
        
        Private columnsrl As Global.System.Data.DataColumn
        
        Private columnکد As Global.System.Data.DataColumn
        
        Private columnعنوان As Global.System.Data.DataColumn
        
        Private columnمقدار As Global.System.Data.DataColumn
        
        Private columnقیمت As Global.System.Data.DataColumn
        
        Private columnدوره_زمانی As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Con_ContractItems"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property کدColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnکد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property عنوانColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnعنوان
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property مقدارColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnمقدار
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property قیمتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnقیمت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property دوره_زمانیColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnدوره_زمانی
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Con_ContractItemsRow
            Get
                Return CType(Me.Rows(index),Pm_Con_ContractItemsRow)
            End Get
        End Property
        
        Public Event Pm_Con_ContractItemsRowChanging As Pm_Con_ContractItemsRowChangeEventHandler
        
        Public Event Pm_Con_ContractItemsRowChanged As Pm_Con_ContractItemsRowChangeEventHandler
        
        Public Event Pm_Con_ContractItemsRowDeleting As Pm_Con_ContractItemsRowChangeEventHandler
        
        Public Event Pm_Con_ContractItemsRowDeleted As Pm_Con_ContractItemsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Con_ContractItemsRow(ByVal row As Pm_Con_ContractItemsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Con_ContractItemsRow(ByVal کد As String, ByVal عنوان As String, ByVal مقدار As Double, ByVal قیمت As Double, ByVal دوره_زمانی As Double) As Pm_Con_ContractItemsRow
            Dim rowPm_Con_ContractItemsRow As Pm_Con_ContractItemsRow = CType(Me.NewRow,Pm_Con_ContractItemsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, کد, عنوان, مقدار, قیمت, دوره_زمانی}
            rowPm_Con_ContractItemsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Con_ContractItemsRow)
            Return rowPm_Con_ContractItemsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysrl(ByVal srl As Integer) As Pm_Con_ContractItemsRow
            Return CType(Me.Rows.Find(New Object() {srl}),Pm_Con_ContractItemsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Con_ContractItemsDataTable = CType(MyBase.Clone,Pm_Con_ContractItemsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Con_ContractItemsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsrl = MyBase.Columns("srl")
            Me.columnکد = MyBase.Columns("کد")
            Me.columnعنوان = MyBase.Columns("عنوان")
            Me.columnمقدار = MyBase.Columns("مقدار")
            Me.columnقیمت = MyBase.Columns("قیمت")
            Me.columnدوره_زمانی = MyBase.Columns("دوره زمانی")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsrl = New Global.System.Data.DataColumn("srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl)
            Me.columnکد = New Global.System.Data.DataColumn("کد", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnکد)
            Me.columnعنوان = New Global.System.Data.DataColumn("عنوان", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnعنوان)
            Me.columnمقدار = New Global.System.Data.DataColumn("مقدار", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnمقدار)
            Me.columnقیمت = New Global.System.Data.DataColumn("قیمت", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnقیمت)
            Me.columnدوره_زمانی = New Global.System.Data.DataColumn("دوره زمانی", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnدوره_زمانی)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsrl}, true))
            Me.columnsrl.AutoIncrement = true
            Me.columnsrl.AutoIncrementSeed = -1
            Me.columnsrl.AutoIncrementStep = -1
            Me.columnsrl.AllowDBNull = false
            Me.columnsrl.ReadOnly = true
            Me.columnsrl.Unique = true
            Me.columnکد.MaxLength = 50
            Me.columnعنوان.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Con_ContractItemsRow() As Pm_Con_ContractItemsRow
            Return CType(Me.NewRow,Pm_Con_ContractItemsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Con_ContractItemsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Con_ContractItemsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Con_ContractItemsRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_ContractItemsRowChanged(Me, New Pm_Con_ContractItemsRowChangeEvent(CType(e.Row,Pm_Con_ContractItemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Con_ContractItemsRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_ContractItemsRowChanging(Me, New Pm_Con_ContractItemsRowChangeEvent(CType(e.Row,Pm_Con_ContractItemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Con_ContractItemsRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_ContractItemsRowDeleted(Me, New Pm_Con_ContractItemsRowChangeEvent(CType(e.Row,Pm_Con_ContractItemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Con_ContractItemsRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_ContractItemsRowDeleting(Me, New Pm_Con_ContractItemsRowChangeEvent(CType(e.Row,Pm_Con_ContractItemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Con_ContractItemsRow(ByVal row As Pm_Con_ContractItemsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Con_ContractItemsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class pm_con_ContractItemsTarikhDataTable
        Inherits Global.System.Data.TypedTableBase(Of pm_con_ContractItemsTarikhRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnکد As Global.System.Data.DataColumn
        
        Private columnعنوان As Global.System.Data.DataColumn
        
        Private columnتعداد As Global.System.Data.DataColumn
        
        Private columnقیمت As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "pm_con_ContractItemsTarikh"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property کدColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnکد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property عنوانColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnعنوان
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تعدادColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتعداد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property قیمتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnقیمت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As pm_con_ContractItemsTarikhRow
            Get
                Return CType(Me.Rows(index),pm_con_ContractItemsTarikhRow)
            End Get
        End Property
        
        Public Event pm_con_ContractItemsTarikhRowChanging As pm_con_ContractItemsTarikhRowChangeEventHandler
        
        Public Event pm_con_ContractItemsTarikhRowChanged As pm_con_ContractItemsTarikhRowChangeEventHandler
        
        Public Event pm_con_ContractItemsTarikhRowDeleting As pm_con_ContractItemsTarikhRowChangeEventHandler
        
        Public Event pm_con_ContractItemsTarikhRowDeleted As pm_con_ContractItemsTarikhRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addpm_con_ContractItemsTarikhRow(ByVal row As pm_con_ContractItemsTarikhRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addpm_con_ContractItemsTarikhRow(ByVal کد As String, ByVal عنوان As String, ByVal تعداد As Double, ByVal قیمت As Double) As pm_con_ContractItemsTarikhRow
            Dim rowpm_con_ContractItemsTarikhRow As pm_con_ContractItemsTarikhRow = CType(Me.NewRow,pm_con_ContractItemsTarikhRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, کد, عنوان, تعداد, قیمت}
            rowpm_con_ContractItemsTarikhRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowpm_con_ContractItemsTarikhRow)
            Return rowpm_con_ContractItemsTarikhRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As pm_con_ContractItemsTarikhRow
            Return CType(Me.Rows.Find(New Object() {Srl}),pm_con_ContractItemsTarikhRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As pm_con_ContractItemsTarikhDataTable = CType(MyBase.Clone,pm_con_ContractItemsTarikhDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New pm_con_ContractItemsTarikhDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnکد = MyBase.Columns("کد")
            Me.columnعنوان = MyBase.Columns("عنوان")
            Me.columnتعداد = MyBase.Columns("تعداد")
            Me.columnقیمت = MyBase.Columns("قیمت")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnکد = New Global.System.Data.DataColumn("کد", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnکد)
            Me.columnعنوان = New Global.System.Data.DataColumn("عنوان", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnعنوان)
            Me.columnتعداد = New Global.System.Data.DataColumn("تعداد", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتعداد)
            Me.columnقیمت = New Global.System.Data.DataColumn("قیمت", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnقیمت)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnSrl.AutoIncrement = true
            Me.columnSrl.AutoIncrementSeed = -1
            Me.columnSrl.AutoIncrementStep = -1
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.ReadOnly = true
            Me.columnSrl.Unique = true
            Me.columnکد.MaxLength = 50
            Me.columnعنوان.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newpm_con_ContractItemsTarikhRow() As pm_con_ContractItemsTarikhRow
            Return CType(Me.NewRow,pm_con_ContractItemsTarikhRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New pm_con_ContractItemsTarikhRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(pm_con_ContractItemsTarikhRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pm_con_ContractItemsTarikhRowChangedEvent) Is Nothing) Then
                RaiseEvent pm_con_ContractItemsTarikhRowChanged(Me, New pm_con_ContractItemsTarikhRowChangeEvent(CType(e.Row,pm_con_ContractItemsTarikhRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pm_con_ContractItemsTarikhRowChangingEvent) Is Nothing) Then
                RaiseEvent pm_con_ContractItemsTarikhRowChanging(Me, New pm_con_ContractItemsTarikhRowChangeEvent(CType(e.Row,pm_con_ContractItemsTarikhRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pm_con_ContractItemsTarikhRowDeletedEvent) Is Nothing) Then
                RaiseEvent pm_con_ContractItemsTarikhRowDeleted(Me, New pm_con_ContractItemsTarikhRowChangeEvent(CType(e.Row,pm_con_ContractItemsTarikhRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pm_con_ContractItemsTarikhRowDeletingEvent) Is Nothing) Then
                RaiseEvent pm_con_ContractItemsTarikhRowDeleting(Me, New pm_con_ContractItemsTarikhRowChangeEvent(CType(e.Row,pm_con_ContractItemsTarikhRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removepm_con_ContractItemsTarikhRow(ByVal row As pm_con_ContractItemsTarikhRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "pm_con_ContractItemsTarikhDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class pm_con_WorkformDataTable
        Inherits Global.System.Data.TypedTableBase(Of pm_con_WorkformRow)
        
        Private columnنام_پست As Global.System.Data.DataColumn
        
        Private columnنام_واحد As Global.System.Data.DataColumn
        
        Private columnنام_گروه As Global.System.Data.DataColumn
        
        Private columnتاریخ As Global.System.Data.DataColumn
        
        Private columnشماره As Global.System.Data.DataColumn
        
        Private columnsrl As Global.System.Data.DataColumn
        
        Private columnSrl_Pm_Vahed As Global.System.Data.DataColumn
        
        Private columnsrl_pm_post As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "pm_con_Workform"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نام_پستColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام_پست
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نام_واحدColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام_واحد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نام_گروهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام_گروه
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاریخColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاریخ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شمارهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشماره
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_Pm_VahedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_Pm_Vahed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_pm_postColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_pm_post
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As pm_con_WorkformRow
            Get
                Return CType(Me.Rows(index),pm_con_WorkformRow)
            End Get
        End Property
        
        Public Event pm_con_WorkformRowChanging As pm_con_WorkformRowChangeEventHandler
        
        Public Event pm_con_WorkformRowChanged As pm_con_WorkformRowChangeEventHandler
        
        Public Event pm_con_WorkformRowDeleting As pm_con_WorkformRowChangeEventHandler
        
        Public Event pm_con_WorkformRowDeleted As pm_con_WorkformRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addpm_con_WorkformRow(ByVal row As pm_con_WorkformRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addpm_con_WorkformRow(ByVal نام_پست As String, ByVal نام_واحد As String, ByVal نام_گروه As String, ByVal تاریخ As String, ByVal شماره As Integer, ByVal Srl_Pm_Vahed As Integer) As pm_con_WorkformRow
            Dim rowpm_con_WorkformRow As pm_con_WorkformRow = CType(Me.NewRow,pm_con_WorkformRow)
            Dim columnValuesArray() As Object = New Object() {نام_پست, نام_واحد, نام_گروه, تاریخ, شماره, Nothing, Srl_Pm_Vahed, Nothing}
            rowpm_con_WorkformRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowpm_con_WorkformRow)
            Return rowpm_con_WorkformRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysrl(ByVal srl As Integer) As pm_con_WorkformRow
            Return CType(Me.Rows.Find(New Object() {srl}),pm_con_WorkformRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As pm_con_WorkformDataTable = CType(MyBase.Clone,pm_con_WorkformDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New pm_con_WorkformDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnنام_پست = MyBase.Columns("نام پست")
            Me.columnنام_واحد = MyBase.Columns("نام واحد")
            Me.columnنام_گروه = MyBase.Columns("نام گروه")
            Me.columnتاریخ = MyBase.Columns("تاریخ")
            Me.columnشماره = MyBase.Columns("شماره")
            Me.columnsrl = MyBase.Columns("srl")
            Me.columnSrl_Pm_Vahed = MyBase.Columns("Srl_Pm_Vahed")
            Me.columnsrl_pm_post = MyBase.Columns("srl_pm_post")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnنام_پست = New Global.System.Data.DataColumn("نام پست", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام_پست)
            Me.columnنام_واحد = New Global.System.Data.DataColumn("نام واحد", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام_واحد)
            Me.columnنام_گروه = New Global.System.Data.DataColumn("نام گروه", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام_گروه)
            Me.columnتاریخ = New Global.System.Data.DataColumn("تاریخ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاریخ)
            Me.columnشماره = New Global.System.Data.DataColumn("شماره", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشماره)
            Me.columnsrl = New Global.System.Data.DataColumn("srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl)
            Me.columnSrl_Pm_Vahed = New Global.System.Data.DataColumn("Srl_Pm_Vahed", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_Pm_Vahed)
            Me.columnsrl_pm_post = New Global.System.Data.DataColumn("srl_pm_post", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_pm_post)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsrl}, true))
            Me.columnنام_پست.MaxLength = 50
            Me.columnنام_واحد.MaxLength = 400
            Me.columnنام_گروه.MaxLength = 50
            Me.columnتاریخ.MaxLength = 11
            Me.columnsrl.AutoIncrement = true
            Me.columnsrl.AutoIncrementSeed = -1
            Me.columnsrl.AutoIncrementStep = -1
            Me.columnsrl.AllowDBNull = false
            Me.columnsrl.ReadOnly = true
            Me.columnsrl.Unique = true
            Me.columnsrl_pm_post.AutoIncrement = true
            Me.columnsrl_pm_post.AutoIncrementSeed = -1
            Me.columnsrl_pm_post.AutoIncrementStep = -1
            Me.columnsrl_pm_post.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newpm_con_WorkformRow() As pm_con_WorkformRow
            Return CType(Me.NewRow,pm_con_WorkformRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New pm_con_WorkformRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(pm_con_WorkformRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pm_con_WorkformRowChangedEvent) Is Nothing) Then
                RaiseEvent pm_con_WorkformRowChanged(Me, New pm_con_WorkformRowChangeEvent(CType(e.Row,pm_con_WorkformRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pm_con_WorkformRowChangingEvent) Is Nothing) Then
                RaiseEvent pm_con_WorkformRowChanging(Me, New pm_con_WorkformRowChangeEvent(CType(e.Row,pm_con_WorkformRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pm_con_WorkformRowDeletedEvent) Is Nothing) Then
                RaiseEvent pm_con_WorkformRowDeleted(Me, New pm_con_WorkformRowChangeEvent(CType(e.Row,pm_con_WorkformRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pm_con_WorkformRowDeletingEvent) Is Nothing) Then
                RaiseEvent pm_con_WorkformRowDeleting(Me, New pm_con_WorkformRowChangeEvent(CType(e.Row,pm_con_WorkformRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removepm_con_WorkformRow(ByVal row As pm_con_WorkformRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "pm_con_WorkformDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Con_StatusStatementDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Con_StatusStatementRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnSrl_vahed As Global.System.Data.DataColumn
        
        Private columnSrl_group As Global.System.Data.DataColumn
        
        Private columnSrl_post As Global.System.Data.DataColumn
        
        Private columnSrl_Line As Global.System.Data.DataColumn
        
        Private columnنام_پست As Global.System.Data.DataColumn
        
        Private columnنام_واحد As Global.System.Data.DataColumn
        
        Private columnنام_گروه As Global.System.Data.DataColumn
        
        Private columnتاریخ As Global.System.Data.DataColumn
        
        Private columnنام_خط As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnشماره As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Con_StatusStatement"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_vahedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_vahed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_groupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_group
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_postColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_post
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_LineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_Line
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نام_پستColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام_پست
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نام_واحدColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام_واحد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نام_گروهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام_گروه
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاریخColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاریخ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نام_خطColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام_خط
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شمارهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشماره
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Con_StatusStatementRow
            Get
                Return CType(Me.Rows(index),Pm_Con_StatusStatementRow)
            End Get
        End Property
        
        Public Event Pm_Con_StatusStatementRowChanging As Pm_Con_StatusStatementRowChangeEventHandler
        
        Public Event Pm_Con_StatusStatementRowChanged As Pm_Con_StatusStatementRowChangeEventHandler
        
        Public Event Pm_Con_StatusStatementRowDeleting As Pm_Con_StatusStatementRowChangeEventHandler
        
        Public Event Pm_Con_StatusStatementRowDeleted As Pm_Con_StatusStatementRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Con_StatusStatementRow(ByVal row As Pm_Con_StatusStatementRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Con_StatusStatementRow(ByVal Srl_vahed As Integer, ByVal Srl_group As Integer, ByVal Srl_post As Integer, ByVal Srl_Line As Integer, ByVal نام_پست As String, ByVal نام_واحد As String, ByVal نام_گروه As String, ByVal تاریخ As String, ByVal نام_خط As String, ByVal Description As String, ByVal شماره As Integer) As Pm_Con_StatusStatementRow
            Dim rowPm_Con_StatusStatementRow As Pm_Con_StatusStatementRow = CType(Me.NewRow,Pm_Con_StatusStatementRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Srl_vahed, Srl_group, Srl_post, Srl_Line, نام_پست, نام_واحد, نام_گروه, تاریخ, نام_خط, Description, شماره}
            rowPm_Con_StatusStatementRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Con_StatusStatementRow)
            Return rowPm_Con_StatusStatementRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As Pm_Con_StatusStatementRow
            Return CType(Me.Rows.Find(New Object() {Srl}),Pm_Con_StatusStatementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Con_StatusStatementDataTable = CType(MyBase.Clone,Pm_Con_StatusStatementDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Con_StatusStatementDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnSrl_vahed = MyBase.Columns("Srl_vahed")
            Me.columnSrl_group = MyBase.Columns("Srl_group")
            Me.columnSrl_post = MyBase.Columns("Srl_post")
            Me.columnSrl_Line = MyBase.Columns("Srl_Line")
            Me.columnنام_پست = MyBase.Columns("نام پست")
            Me.columnنام_واحد = MyBase.Columns("نام واحد")
            Me.columnنام_گروه = MyBase.Columns("نام گروه")
            Me.columnتاریخ = MyBase.Columns("تاریخ")
            Me.columnنام_خط = MyBase.Columns("نام خط")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnشماره = MyBase.Columns("شماره")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnSrl_vahed = New Global.System.Data.DataColumn("Srl_vahed", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_vahed)
            Me.columnSrl_group = New Global.System.Data.DataColumn("Srl_group", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_group)
            Me.columnSrl_post = New Global.System.Data.DataColumn("Srl_post", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_post)
            Me.columnSrl_Line = New Global.System.Data.DataColumn("Srl_Line", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_Line)
            Me.columnنام_پست = New Global.System.Data.DataColumn("نام پست", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام_پست)
            Me.columnنام_واحد = New Global.System.Data.DataColumn("نام واحد", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام_واحد)
            Me.columnنام_گروه = New Global.System.Data.DataColumn("نام گروه", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام_گروه)
            Me.columnتاریخ = New Global.System.Data.DataColumn("تاریخ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاریخ)
            Me.columnنام_خط = New Global.System.Data.DataColumn("نام خط", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام_خط)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnشماره = New Global.System.Data.DataColumn("شماره", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشماره)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnSrl.AutoIncrement = true
            Me.columnSrl.AutoIncrementSeed = -1
            Me.columnSrl.AutoIncrementStep = -1
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.ReadOnly = true
            Me.columnSrl.Unique = true
            Me.columnنام_پست.MaxLength = 50
            Me.columnنام_واحد.MaxLength = 400
            Me.columnنام_گروه.MaxLength = 50
            Me.columnتاریخ.MaxLength = 10
            Me.columnنام_خط.ReadOnly = true
            Me.columnنام_خط.MaxLength = 81
            Me.columnDescription.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Con_StatusStatementRow() As Pm_Con_StatusStatementRow
            Return CType(Me.NewRow,Pm_Con_StatusStatementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Con_StatusStatementRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Con_StatusStatementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Con_StatusStatementRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_StatusStatementRowChanged(Me, New Pm_Con_StatusStatementRowChangeEvent(CType(e.Row,Pm_Con_StatusStatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Con_StatusStatementRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_StatusStatementRowChanging(Me, New Pm_Con_StatusStatementRowChangeEvent(CType(e.Row,Pm_Con_StatusStatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Con_StatusStatementRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_StatusStatementRowDeleted(Me, New Pm_Con_StatusStatementRowChangeEvent(CType(e.Row,Pm_Con_StatusStatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Con_StatusStatementRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_StatusStatementRowDeleting(Me, New Pm_Con_StatusStatementRowChangeEvent(CType(e.Row,Pm_Con_StatusStatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Con_StatusStatementRow(ByVal row As Pm_Con_StatusStatementRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Con_StatusStatementDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Con_UsedItemDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Con_UsedItemRow)
        
        Private columnAmount As Global.System.Data.DataColumn
        
        Private columnused As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Con_UsedItem"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property usedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnused
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Con_UsedItemRow
            Get
                Return CType(Me.Rows(index),Pm_Con_UsedItemRow)
            End Get
        End Property
        
        Public Event Pm_Con_UsedItemRowChanging As Pm_Con_UsedItemRowChangeEventHandler
        
        Public Event Pm_Con_UsedItemRowChanged As Pm_Con_UsedItemRowChangeEventHandler
        
        Public Event Pm_Con_UsedItemRowDeleting As Pm_Con_UsedItemRowChangeEventHandler
        
        Public Event Pm_Con_UsedItemRowDeleted As Pm_Con_UsedItemRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Con_UsedItemRow(ByVal row As Pm_Con_UsedItemRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Con_UsedItemRow(ByVal Amount As Double, ByVal used As Double) As Pm_Con_UsedItemRow
            Dim rowPm_Con_UsedItemRow As Pm_Con_UsedItemRow = CType(Me.NewRow,Pm_Con_UsedItemRow)
            Dim columnValuesArray() As Object = New Object() {Amount, used}
            rowPm_Con_UsedItemRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Con_UsedItemRow)
            Return rowPm_Con_UsedItemRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Con_UsedItemDataTable = CType(MyBase.Clone,Pm_Con_UsedItemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Con_UsedItemDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAmount = MyBase.Columns("Amount")
            Me.columnused = MyBase.Columns("used")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAmount = New Global.System.Data.DataColumn("Amount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount)
            Me.columnused = New Global.System.Data.DataColumn("used", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnused)
            Me.columnused.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Con_UsedItemRow() As Pm_Con_UsedItemRow
            Return CType(Me.NewRow,Pm_Con_UsedItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Con_UsedItemRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Con_UsedItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Con_UsedItemRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_UsedItemRowChanged(Me, New Pm_Con_UsedItemRowChangeEvent(CType(e.Row,Pm_Con_UsedItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Con_UsedItemRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_UsedItemRowChanging(Me, New Pm_Con_UsedItemRowChangeEvent(CType(e.Row,Pm_Con_UsedItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Con_UsedItemRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_UsedItemRowDeleted(Me, New Pm_Con_UsedItemRowChangeEvent(CType(e.Row,Pm_Con_UsedItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Con_UsedItemRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_UsedItemRowDeleting(Me, New Pm_Con_UsedItemRowChangeEvent(CType(e.Row,Pm_Con_UsedItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Con_UsedItemRow(ByVal row As Pm_Con_UsedItemRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Con_UsedItemDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Con_StatusStatementVwDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Con_StatusStatementVwRow)
        
        Private columnشماره As Global.System.Data.DataColumn
        
        Private columnتاریخ As Global.System.Data.DataColumn
        
        Private columnنام_واحد As Global.System.Data.DataColumn
        
        Private columnنام_گروه As Global.System.Data.DataColumn
        
        Private columnنام_پست As Global.System.Data.DataColumn
        
        Private columnنام_خط As Global.System.Data.DataColumn
        
        Private columnنوع As Global.System.Data.DataColumn
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnSrl_vahed As Global.System.Data.DataColumn
        
        Private columnSrl_group As Global.System.Data.DataColumn
        
        Private columnsrl_post As Global.System.Data.DataColumn
        
        Private columnsrl_line As Global.System.Data.DataColumn
        
        Private columnis_cancle As Global.System.Data.DataColumn
        
        Private columnis_night As Global.System.Data.DataColumn
        
        Private columnis_holiday As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Con_StatusStatementVw"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شمارهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشماره
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاریخColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاریخ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نام_واحدColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام_واحد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نام_گروهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام_گروه
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نام_پستColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام_پست
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نام_خطColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام_خط
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نوعColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنوع
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_vahedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_vahed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_groupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_group
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_postColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_post
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_lineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_line
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property is_cancleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnis_cancle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property is_nightColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnis_night
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property is_holidayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnis_holiday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Con_StatusStatementVwRow
            Get
                Return CType(Me.Rows(index),Pm_Con_StatusStatementVwRow)
            End Get
        End Property
        
        Public Event Pm_Con_StatusStatementVwRowChanging As Pm_Con_StatusStatementVwRowChangeEventHandler
        
        Public Event Pm_Con_StatusStatementVwRowChanged As Pm_Con_StatusStatementVwRowChangeEventHandler
        
        Public Event Pm_Con_StatusStatementVwRowDeleting As Pm_Con_StatusStatementVwRowChangeEventHandler
        
        Public Event Pm_Con_StatusStatementVwRowDeleted As Pm_Con_StatusStatementVwRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Con_StatusStatementVwRow(ByVal row As Pm_Con_StatusStatementVwRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Con_StatusStatementVwRow(ByVal شماره As Integer, ByVal تاریخ As String, ByVal نام_واحد As String, ByVal نام_گروه As String, ByVal نام_پست As String, ByVal نام_خط As String, ByVal نوع As String, ByVal Srl As Integer, ByVal Srl_vahed As Integer, ByVal Srl_group As Integer, ByVal srl_post As Integer, ByVal srl_line As Integer, ByVal is_cancle As Boolean, ByVal is_night As Boolean, ByVal is_holiday As Boolean) As Pm_Con_StatusStatementVwRow
            Dim rowPm_Con_StatusStatementVwRow As Pm_Con_StatusStatementVwRow = CType(Me.NewRow,Pm_Con_StatusStatementVwRow)
            Dim columnValuesArray() As Object = New Object() {شماره, تاریخ, نام_واحد, نام_گروه, نام_پست, نام_خط, نوع, Srl, Srl_vahed, Srl_group, srl_post, srl_line, is_cancle, is_night, is_holiday}
            rowPm_Con_StatusStatementVwRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Con_StatusStatementVwRow)
            Return rowPm_Con_StatusStatementVwRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Con_StatusStatementVwDataTable = CType(MyBase.Clone,Pm_Con_StatusStatementVwDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Con_StatusStatementVwDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnشماره = MyBase.Columns("شماره")
            Me.columnتاریخ = MyBase.Columns("تاریخ")
            Me.columnنام_واحد = MyBase.Columns("نام واحد")
            Me.columnنام_گروه = MyBase.Columns("نام گروه")
            Me.columnنام_پست = MyBase.Columns("نام پست")
            Me.columnنام_خط = MyBase.Columns("نام خط")
            Me.columnنوع = MyBase.Columns("نوع")
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnSrl_vahed = MyBase.Columns("Srl_vahed")
            Me.columnSrl_group = MyBase.Columns("Srl_group")
            Me.columnsrl_post = MyBase.Columns("srl_post")
            Me.columnsrl_line = MyBase.Columns("srl_line")
            Me.columnis_cancle = MyBase.Columns("is_cancle")
            Me.columnis_night = MyBase.Columns("is_night")
            Me.columnis_holiday = MyBase.Columns("is_holiday")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnشماره = New Global.System.Data.DataColumn("شماره", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشماره)
            Me.columnتاریخ = New Global.System.Data.DataColumn("تاریخ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاریخ)
            Me.columnنام_واحد = New Global.System.Data.DataColumn("نام واحد", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام_واحد)
            Me.columnنام_گروه = New Global.System.Data.DataColumn("نام گروه", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام_گروه)
            Me.columnنام_پست = New Global.System.Data.DataColumn("نام پست", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام_پست)
            Me.columnنام_خط = New Global.System.Data.DataColumn("نام خط", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام_خط)
            Me.columnنوع = New Global.System.Data.DataColumn("نوع", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنوع)
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnSrl_vahed = New Global.System.Data.DataColumn("Srl_vahed", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_vahed)
            Me.columnSrl_group = New Global.System.Data.DataColumn("Srl_group", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_group)
            Me.columnsrl_post = New Global.System.Data.DataColumn("srl_post", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_post)
            Me.columnsrl_line = New Global.System.Data.DataColumn("srl_line", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_line)
            Me.columnis_cancle = New Global.System.Data.DataColumn("is_cancle", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnis_cancle)
            Me.columnis_night = New Global.System.Data.DataColumn("is_night", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnis_night)
            Me.columnis_holiday = New Global.System.Data.DataColumn("is_holiday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnis_holiday)
            Me.columnشماره.ReadOnly = true
            Me.columnتاریخ.ReadOnly = true
            Me.columnتاریخ.MaxLength = 11
            Me.columnنام_واحد.ReadOnly = true
            Me.columnنام_واحد.MaxLength = 400
            Me.columnنام_گروه.ReadOnly = true
            Me.columnنام_گروه.MaxLength = 50
            Me.columnنام_پست.ReadOnly = true
            Me.columnنام_پست.MaxLength = 50
            Me.columnنام_خط.ReadOnly = true
            Me.columnنام_خط.MaxLength = 50
            Me.columnنوع.ReadOnly = true
            Me.columnنوع.MaxLength = 11
            Me.columnSrl.ReadOnly = true
            Me.columnSrl_vahed.ReadOnly = true
            Me.columnSrl_group.ReadOnly = true
            Me.columnsrl_post.ReadOnly = true
            Me.columnsrl_line.ReadOnly = true
            Me.columnis_cancle.ReadOnly = true
            Me.columnis_night.ReadOnly = true
            Me.columnis_holiday.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Con_StatusStatementVwRow() As Pm_Con_StatusStatementVwRow
            Return CType(Me.NewRow,Pm_Con_StatusStatementVwRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Con_StatusStatementVwRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Con_StatusStatementVwRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Con_StatusStatementVwRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_StatusStatementVwRowChanged(Me, New Pm_Con_StatusStatementVwRowChangeEvent(CType(e.Row,Pm_Con_StatusStatementVwRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Con_StatusStatementVwRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_StatusStatementVwRowChanging(Me, New Pm_Con_StatusStatementVwRowChangeEvent(CType(e.Row,Pm_Con_StatusStatementVwRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Con_StatusStatementVwRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_StatusStatementVwRowDeleted(Me, New Pm_Con_StatusStatementVwRowChangeEvent(CType(e.Row,Pm_Con_StatusStatementVwRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Con_StatusStatementVwRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_StatusStatementVwRowDeleting(Me, New Pm_Con_StatusStatementVwRowChangeEvent(CType(e.Row,Pm_Con_StatusStatementVwRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Con_StatusStatementVwRow(ByVal row As Pm_Con_StatusStatementVwRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Con_StatusStatementVwDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Con_SourceDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Con_SourceRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnعنوان As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Con_Source"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property عنوانColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnعنوان
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Con_SourceRow
            Get
                Return CType(Me.Rows(index),Pm_Con_SourceRow)
            End Get
        End Property
        
        Public Event Pm_Con_SourceRowChanging As Pm_Con_SourceRowChangeEventHandler
        
        Public Event Pm_Con_SourceRowChanged As Pm_Con_SourceRowChangeEventHandler
        
        Public Event Pm_Con_SourceRowDeleting As Pm_Con_SourceRowChangeEventHandler
        
        Public Event Pm_Con_SourceRowDeleted As Pm_Con_SourceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Con_SourceRow(ByVal row As Pm_Con_SourceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Con_SourceRow(ByVal عنوان As String) As Pm_Con_SourceRow
            Dim rowPm_Con_SourceRow As Pm_Con_SourceRow = CType(Me.NewRow,Pm_Con_SourceRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, عنوان}
            rowPm_Con_SourceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Con_SourceRow)
            Return rowPm_Con_SourceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As Pm_Con_SourceRow
            Return CType(Me.Rows.Find(New Object() {Srl}),Pm_Con_SourceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Con_SourceDataTable = CType(MyBase.Clone,Pm_Con_SourceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Con_SourceDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnعنوان = MyBase.Columns("عنوان")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnعنوان = New Global.System.Data.DataColumn("عنوان", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnعنوان)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnSrl.AutoIncrement = true
            Me.columnSrl.AutoIncrementSeed = -1
            Me.columnSrl.AutoIncrementStep = -1
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.ReadOnly = true
            Me.columnSrl.Unique = true
            Me.columnعنوان.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Con_SourceRow() As Pm_Con_SourceRow
            Return CType(Me.NewRow,Pm_Con_SourceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Con_SourceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Con_SourceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Con_SourceRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_SourceRowChanged(Me, New Pm_Con_SourceRowChangeEvent(CType(e.Row,Pm_Con_SourceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Con_SourceRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_SourceRowChanging(Me, New Pm_Con_SourceRowChangeEvent(CType(e.Row,Pm_Con_SourceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Con_SourceRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_SourceRowDeleted(Me, New Pm_Con_SourceRowChangeEvent(CType(e.Row,Pm_Con_SourceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Con_SourceRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_SourceRowDeleting(Me, New Pm_Con_SourceRowChangeEvent(CType(e.Row,Pm_Con_SourceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Con_SourceRow(ByVal row As Pm_Con_SourceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Con_SourceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class pm_con_AllItemDataTable
        Inherits Global.System.Data.TypedTableBase(Of pm_con_AllItemRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnکد As Global.System.Data.DataColumn
        
        Private columnعنوان As Global.System.Data.DataColumn
        
        Private columnتوضیحات As Global.System.Data.DataColumn
        
        Private columnولتاژ As Global.System.Data.DataColumn
        
        Private columnواحد_شمارش As Global.System.Data.DataColumn
        
        Private columnواحد_کاری As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "pm_con_AllItem"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property کدColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnکد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property عنوانColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnعنوان
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property توضیحاتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتوضیحات
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ولتاژColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnولتاژ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property واحد_شمارشColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnواحد_شمارش
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property واحد_کاریColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnواحد_کاری
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As pm_con_AllItemRow
            Get
                Return CType(Me.Rows(index),pm_con_AllItemRow)
            End Get
        End Property
        
        Public Event pm_con_AllItemRowChanging As pm_con_AllItemRowChangeEventHandler
        
        Public Event pm_con_AllItemRowChanged As pm_con_AllItemRowChangeEventHandler
        
        Public Event pm_con_AllItemRowDeleting As pm_con_AllItemRowChangeEventHandler
        
        Public Event pm_con_AllItemRowDeleted As pm_con_AllItemRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addpm_con_AllItemRow(ByVal row As pm_con_AllItemRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addpm_con_AllItemRow(ByVal کد As String, ByVal عنوان As String, ByVal توضیحات As String, ByVal ولتاژ As Integer, ByVal واحد_شمارش As String, ByVal واحد_کاری As String) As pm_con_AllItemRow
            Dim rowpm_con_AllItemRow As pm_con_AllItemRow = CType(Me.NewRow,pm_con_AllItemRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, کد, عنوان, توضیحات, ولتاژ, واحد_شمارش, واحد_کاری}
            rowpm_con_AllItemRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowpm_con_AllItemRow)
            Return rowpm_con_AllItemRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As pm_con_AllItemRow
            Return CType(Me.Rows.Find(New Object() {Srl}),pm_con_AllItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As pm_con_AllItemDataTable = CType(MyBase.Clone,pm_con_AllItemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New pm_con_AllItemDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnکد = MyBase.Columns("کد")
            Me.columnعنوان = MyBase.Columns("عنوان")
            Me.columnتوضیحات = MyBase.Columns("توضیحات")
            Me.columnولتاژ = MyBase.Columns("ولتاژ")
            Me.columnواحد_شمارش = MyBase.Columns("واحد شمارش")
            Me.columnواحد_کاری = MyBase.Columns("واحد کاری")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnکد = New Global.System.Data.DataColumn("کد", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnکد)
            Me.columnعنوان = New Global.System.Data.DataColumn("عنوان", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnعنوان)
            Me.columnتوضیحات = New Global.System.Data.DataColumn("توضیحات", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتوضیحات)
            Me.columnولتاژ = New Global.System.Data.DataColumn("ولتاژ", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnولتاژ)
            Me.columnواحد_شمارش = New Global.System.Data.DataColumn("واحد شمارش", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnواحد_شمارش)
            Me.columnواحد_کاری = New Global.System.Data.DataColumn("واحد کاری", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnواحد_کاری)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnSrl.AutoIncrement = true
            Me.columnSrl.AutoIncrementSeed = -1
            Me.columnSrl.AutoIncrementStep = -1
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.ReadOnly = true
            Me.columnSrl.Unique = true
            Me.columnکد.MaxLength = 50
            Me.columnعنوان.MaxLength = 500
            Me.columnتوضیحات.MaxLength = 1000
            Me.columnواحد_شمارش.MaxLength = 50
            Me.columnواحد_کاری.MaxLength = 400
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newpm_con_AllItemRow() As pm_con_AllItemRow
            Return CType(Me.NewRow,pm_con_AllItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New pm_con_AllItemRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(pm_con_AllItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pm_con_AllItemRowChangedEvent) Is Nothing) Then
                RaiseEvent pm_con_AllItemRowChanged(Me, New pm_con_AllItemRowChangeEvent(CType(e.Row,pm_con_AllItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pm_con_AllItemRowChangingEvent) Is Nothing) Then
                RaiseEvent pm_con_AllItemRowChanging(Me, New pm_con_AllItemRowChangeEvent(CType(e.Row,pm_con_AllItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pm_con_AllItemRowDeletedEvent) Is Nothing) Then
                RaiseEvent pm_con_AllItemRowDeleted(Me, New pm_con_AllItemRowChangeEvent(CType(e.Row,pm_con_AllItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pm_con_AllItemRowDeletingEvent) Is Nothing) Then
                RaiseEvent pm_con_AllItemRowDeleting(Me, New pm_con_AllItemRowChangeEvent(CType(e.Row,pm_con_AllItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removepm_con_AllItemRow(ByVal row As pm_con_AllItemRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "pm_con_AllItemDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_MonthDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_MonthRow)
        
        Private columnsrl As Global.System.Data.DataColumn
        
        Private columnname As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Month"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_MonthRow
            Get
                Return CType(Me.Rows(index),Pm_MonthRow)
            End Get
        End Property
        
        Public Event Pm_MonthRowChanging As Pm_MonthRowChangeEventHandler
        
        Public Event Pm_MonthRowChanged As Pm_MonthRowChangeEventHandler
        
        Public Event Pm_MonthRowDeleting As Pm_MonthRowChangeEventHandler
        
        Public Event Pm_MonthRowDeleted As Pm_MonthRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_MonthRow(ByVal row As Pm_MonthRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_MonthRow(ByVal srl As Integer, ByVal name As String) As Pm_MonthRow
            Dim rowPm_MonthRow As Pm_MonthRow = CType(Me.NewRow,Pm_MonthRow)
            Dim columnValuesArray() As Object = New Object() {srl, name}
            rowPm_MonthRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_MonthRow)
            Return rowPm_MonthRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_MonthDataTable = CType(MyBase.Clone,Pm_MonthDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_MonthDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsrl = MyBase.Columns("srl")
            Me.columnname = MyBase.Columns("name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsrl = New Global.System.Data.DataColumn("srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl)
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.columnsrl.ReadOnly = true
            Me.columnname.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_MonthRow() As Pm_MonthRow
            Return CType(Me.NewRow,Pm_MonthRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_MonthRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_MonthRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_MonthRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_MonthRowChanged(Me, New Pm_MonthRowChangeEvent(CType(e.Row,Pm_MonthRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_MonthRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_MonthRowChanging(Me, New Pm_MonthRowChangeEvent(CType(e.Row,Pm_MonthRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_MonthRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_MonthRowDeleted(Me, New Pm_MonthRowChangeEvent(CType(e.Row,Pm_MonthRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_MonthRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_MonthRowDeleting(Me, New Pm_MonthRowChangeEvent(CType(e.Row,Pm_MonthRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_MonthRow(ByVal row As Pm_MonthRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_MonthDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Con_StatusStatementTypeDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Con_StatusStatementTypeRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnname As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Con_StatusStatementType"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Con_StatusStatementTypeRow
            Get
                Return CType(Me.Rows(index),Pm_Con_StatusStatementTypeRow)
            End Get
        End Property
        
        Public Event Pm_Con_StatusStatementTypeRowChanging As Pm_Con_StatusStatementTypeRowChangeEventHandler
        
        Public Event Pm_Con_StatusStatementTypeRowChanged As Pm_Con_StatusStatementTypeRowChangeEventHandler
        
        Public Event Pm_Con_StatusStatementTypeRowDeleting As Pm_Con_StatusStatementTypeRowChangeEventHandler
        
        Public Event Pm_Con_StatusStatementTypeRowDeleted As Pm_Con_StatusStatementTypeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Con_StatusStatementTypeRow(ByVal row As Pm_Con_StatusStatementTypeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Con_StatusStatementTypeRow(ByVal Srl As Integer, ByVal name As String) As Pm_Con_StatusStatementTypeRow
            Dim rowPm_Con_StatusStatementTypeRow As Pm_Con_StatusStatementTypeRow = CType(Me.NewRow,Pm_Con_StatusStatementTypeRow)
            Dim columnValuesArray() As Object = New Object() {Srl, name}
            rowPm_Con_StatusStatementTypeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Con_StatusStatementTypeRow)
            Return rowPm_Con_StatusStatementTypeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As Pm_Con_StatusStatementTypeRow
            Return CType(Me.Rows.Find(New Object() {Srl}),Pm_Con_StatusStatementTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Con_StatusStatementTypeDataTable = CType(MyBase.Clone,Pm_Con_StatusStatementTypeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Con_StatusStatementTypeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnname = MyBase.Columns("name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.Unique = true
            Me.columnname.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Con_StatusStatementTypeRow() As Pm_Con_StatusStatementTypeRow
            Return CType(Me.NewRow,Pm_Con_StatusStatementTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Con_StatusStatementTypeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Con_StatusStatementTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Con_StatusStatementTypeRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_StatusStatementTypeRowChanged(Me, New Pm_Con_StatusStatementTypeRowChangeEvent(CType(e.Row,Pm_Con_StatusStatementTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Con_StatusStatementTypeRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_StatusStatementTypeRowChanging(Me, New Pm_Con_StatusStatementTypeRowChangeEvent(CType(e.Row,Pm_Con_StatusStatementTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Con_StatusStatementTypeRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_StatusStatementTypeRowDeleted(Me, New Pm_Con_StatusStatementTypeRowChangeEvent(CType(e.Row,Pm_Con_StatusStatementTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Con_StatusStatementTypeRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_StatusStatementTypeRowDeleting(Me, New Pm_Con_StatusStatementTypeRowChangeEvent(CType(e.Row,Pm_Con_StatusStatementTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Con_StatusStatementTypeRow(ByVal row As Pm_Con_StatusStatementTypeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Con_StatusStatementTypeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Con_Contract1DataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Con_Contract1Row)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnname As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Con_Contract1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Con_Contract1Row
            Get
                Return CType(Me.Rows(index),Pm_Con_Contract1Row)
            End Get
        End Property
        
        Public Event Pm_Con_Contract1RowChanging As Pm_Con_Contract1RowChangeEventHandler
        
        Public Event Pm_Con_Contract1RowChanged As Pm_Con_Contract1RowChangeEventHandler
        
        Public Event Pm_Con_Contract1RowDeleting As Pm_Con_Contract1RowChangeEventHandler
        
        Public Event Pm_Con_Contract1RowDeleted As Pm_Con_Contract1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Con_Contract1Row(ByVal row As Pm_Con_Contract1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Con_Contract1Row(ByVal name As String) As Pm_Con_Contract1Row
            Dim rowPm_Con_Contract1Row As Pm_Con_Contract1Row = CType(Me.NewRow,Pm_Con_Contract1Row)
            Dim columnValuesArray() As Object = New Object() {Nothing, name}
            rowPm_Con_Contract1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Con_Contract1Row)
            Return rowPm_Con_Contract1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As Pm_Con_Contract1Row
            Return CType(Me.Rows.Find(New Object() {Srl}),Pm_Con_Contract1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Con_Contract1DataTable = CType(MyBase.Clone,Pm_Con_Contract1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Con_Contract1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnname = MyBase.Columns("name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnSrl.AutoIncrement = true
            Me.columnSrl.AutoIncrementSeed = -1
            Me.columnSrl.AutoIncrementStep = -1
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.ReadOnly = true
            Me.columnSrl.Unique = true
            Me.columnname.ReadOnly = true
            Me.columnname.MaxLength = 90
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Con_Contract1Row() As Pm_Con_Contract1Row
            Return CType(Me.NewRow,Pm_Con_Contract1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Con_Contract1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Con_Contract1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Con_Contract1RowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_Contract1RowChanged(Me, New Pm_Con_Contract1RowChangeEvent(CType(e.Row,Pm_Con_Contract1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Con_Contract1RowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_Contract1RowChanging(Me, New Pm_Con_Contract1RowChangeEvent(CType(e.Row,Pm_Con_Contract1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Con_Contract1RowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_Contract1RowDeleted(Me, New Pm_Con_Contract1RowChangeEvent(CType(e.Row,Pm_Con_Contract1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Con_Contract1RowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_Contract1RowDeleting(Me, New Pm_Con_Contract1RowChangeEvent(CType(e.Row,Pm_Con_Contract1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Con_Contract1Row(ByVal row As Pm_Con_Contract1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Con_Contract1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_con_ContratZaribDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_con_ContratZaribRow)
        
        Private columnsrl As Global.System.Data.DataColumn
        
        Private columnقرارداد As Global.System.Data.DataColumn
        
        Private columnتعطیل As Global.System.Data.DataColumn
        
        Private columnشبانه As Global.System.Data.DataColumn
        
        Private columnکنسلی_فرم As Global.System.Data.DataColumn
        
        Private columnروزقبل_فرم As Global.System.Data.DataColumn
        
        Private columnکنسلی_غیر_فرم As Global.System.Data.DataColumn
        
        Private columnروز_قبل_غیر_فرم As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_con_ContratZarib"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property قراردادColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnقرارداد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تعطیلColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتعطیل
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شبانهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشبانه
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property کنسلی_فرمColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnکنسلی_فرم
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property روزقبل_فرمColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnروزقبل_فرم
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property کنسلی_غیر_فرمColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnکنسلی_غیر_فرم
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property روز_قبل_غیر_فرمColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnروز_قبل_غیر_فرم
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_con_ContratZaribRow
            Get
                Return CType(Me.Rows(index),Pm_con_ContratZaribRow)
            End Get
        End Property
        
        Public Event Pm_con_ContratZaribRowChanging As Pm_con_ContratZaribRowChangeEventHandler
        
        Public Event Pm_con_ContratZaribRowChanged As Pm_con_ContratZaribRowChangeEventHandler
        
        Public Event Pm_con_ContratZaribRowDeleting As Pm_con_ContratZaribRowChangeEventHandler
        
        Public Event Pm_con_ContratZaribRowDeleted As Pm_con_ContratZaribRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_con_ContratZaribRow(ByVal row As Pm_con_ContratZaribRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_con_ContratZaribRow(ByVal قرارداد As String, ByVal تعطیل As Double, ByVal شبانه As Double, ByVal کنسلی_فرم As Double, ByVal روزقبل_فرم As Double, ByVal کنسلی_غیر_فرم As Double, ByVal روز_قبل_غیر_فرم As Double) As Pm_con_ContratZaribRow
            Dim rowPm_con_ContratZaribRow As Pm_con_ContratZaribRow = CType(Me.NewRow,Pm_con_ContratZaribRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, قرارداد, تعطیل, شبانه, کنسلی_فرم, روزقبل_فرم, کنسلی_غیر_فرم, روز_قبل_غیر_فرم}
            rowPm_con_ContratZaribRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_con_ContratZaribRow)
            Return rowPm_con_ContratZaribRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysrl(ByVal srl As Integer) As Pm_con_ContratZaribRow
            Return CType(Me.Rows.Find(New Object() {srl}),Pm_con_ContratZaribRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_con_ContratZaribDataTable = CType(MyBase.Clone,Pm_con_ContratZaribDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_con_ContratZaribDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsrl = MyBase.Columns("srl")
            Me.columnقرارداد = MyBase.Columns("قرارداد")
            Me.columnتعطیل = MyBase.Columns("تعطیل")
            Me.columnشبانه = MyBase.Columns("شبانه")
            Me.columnکنسلی_فرم = MyBase.Columns("کنسلی فرم")
            Me.columnروزقبل_فرم = MyBase.Columns("روزقبل فرم")
            Me.columnکنسلی_غیر_فرم = MyBase.Columns("کنسلی غیر فرم")
            Me.columnروز_قبل_غیر_فرم = MyBase.Columns("روز قبل غیر فرم")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsrl = New Global.System.Data.DataColumn("srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl)
            Me.columnقرارداد = New Global.System.Data.DataColumn("قرارداد", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnقرارداد)
            Me.columnتعطیل = New Global.System.Data.DataColumn("تعطیل", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتعطیل)
            Me.columnشبانه = New Global.System.Data.DataColumn("شبانه", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشبانه)
            Me.columnکنسلی_فرم = New Global.System.Data.DataColumn("کنسلی فرم", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnکنسلی_فرم)
            Me.columnروزقبل_فرم = New Global.System.Data.DataColumn("روزقبل فرم", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnروزقبل_فرم)
            Me.columnکنسلی_غیر_فرم = New Global.System.Data.DataColumn("کنسلی غیر فرم", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnکنسلی_غیر_فرم)
            Me.columnروز_قبل_غیر_فرم = New Global.System.Data.DataColumn("روز قبل غیر فرم", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnروز_قبل_غیر_فرم)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsrl}, true))
            Me.columnsrl.AutoIncrement = true
            Me.columnsrl.AutoIncrementSeed = -1
            Me.columnsrl.AutoIncrementStep = -1
            Me.columnsrl.AllowDBNull = false
            Me.columnsrl.ReadOnly = true
            Me.columnsrl.Unique = true
            Me.columnقرارداد.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_con_ContratZaribRow() As Pm_con_ContratZaribRow
            Return CType(Me.NewRow,Pm_con_ContratZaribRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_con_ContratZaribRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_con_ContratZaribRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_con_ContratZaribRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_con_ContratZaribRowChanged(Me, New Pm_con_ContratZaribRowChangeEvent(CType(e.Row,Pm_con_ContratZaribRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_con_ContratZaribRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_con_ContratZaribRowChanging(Me, New Pm_con_ContratZaribRowChangeEvent(CType(e.Row,Pm_con_ContratZaribRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_con_ContratZaribRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_con_ContratZaribRowDeleted(Me, New Pm_con_ContratZaribRowChangeEvent(CType(e.Row,Pm_con_ContratZaribRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_con_ContratZaribRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_con_ContratZaribRowDeleting(Me, New Pm_con_ContratZaribRowChangeEvent(CType(e.Row,Pm_con_ContratZaribRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_con_ContratZaribRow(ByVal row As Pm_con_ContratZaribRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_con_ContratZaribDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Con_MonthReportAmountDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Con_MonthReportAmountRow)
        
        Private columnPrice As Global.System.Data.DataColumn
        
        Private columnsrl_group As Global.System.Data.DataColumn
        
        Private columnname As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Con_MonthReportAmount"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_groupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_group
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Con_MonthReportAmountRow
            Get
                Return CType(Me.Rows(index),Pm_Con_MonthReportAmountRow)
            End Get
        End Property
        
        Public Event Pm_Con_MonthReportAmountRowChanging As Pm_Con_MonthReportAmountRowChangeEventHandler
        
        Public Event Pm_Con_MonthReportAmountRowChanged As Pm_Con_MonthReportAmountRowChangeEventHandler
        
        Public Event Pm_Con_MonthReportAmountRowDeleting As Pm_Con_MonthReportAmountRowChangeEventHandler
        
        Public Event Pm_Con_MonthReportAmountRowDeleted As Pm_Con_MonthReportAmountRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Con_MonthReportAmountRow(ByVal row As Pm_Con_MonthReportAmountRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Con_MonthReportAmountRow(ByVal Price As Double, ByVal srl_group As Integer, ByVal name As String) As Pm_Con_MonthReportAmountRow
            Dim rowPm_Con_MonthReportAmountRow As Pm_Con_MonthReportAmountRow = CType(Me.NewRow,Pm_Con_MonthReportAmountRow)
            Dim columnValuesArray() As Object = New Object() {Price, srl_group, name}
            rowPm_Con_MonthReportAmountRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Con_MonthReportAmountRow)
            Return rowPm_Con_MonthReportAmountRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Con_MonthReportAmountDataTable = CType(MyBase.Clone,Pm_Con_MonthReportAmountDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Con_MonthReportAmountDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPrice = MyBase.Columns("Price")
            Me.columnsrl_group = MyBase.Columns("srl_group")
            Me.columnname = MyBase.Columns("name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPrice = New Global.System.Data.DataColumn("Price", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice)
            Me.columnsrl_group = New Global.System.Data.DataColumn("srl_group", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_group)
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.columnPrice.ReadOnly = true
            Me.columnsrl_group.ReadOnly = true
            Me.columnname.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Con_MonthReportAmountRow() As Pm_Con_MonthReportAmountRow
            Return CType(Me.NewRow,Pm_Con_MonthReportAmountRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Con_MonthReportAmountRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Con_MonthReportAmountRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Con_MonthReportAmountRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_MonthReportAmountRowChanged(Me, New Pm_Con_MonthReportAmountRowChangeEvent(CType(e.Row,Pm_Con_MonthReportAmountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Con_MonthReportAmountRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_MonthReportAmountRowChanging(Me, New Pm_Con_MonthReportAmountRowChangeEvent(CType(e.Row,Pm_Con_MonthReportAmountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Con_MonthReportAmountRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_MonthReportAmountRowDeleted(Me, New Pm_Con_MonthReportAmountRowChangeEvent(CType(e.Row,Pm_Con_MonthReportAmountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Con_MonthReportAmountRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_MonthReportAmountRowDeleting(Me, New Pm_Con_MonthReportAmountRowChangeEvent(CType(e.Row,Pm_Con_MonthReportAmountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Con_MonthReportAmountRow(ByVal row As Pm_Con_MonthReportAmountRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Con_MonthReportAmountDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class pm_Con_Rp_RemainedItemDataTable
        Inherits Global.System.Data.TypedTableBase(Of pm_Con_Rp_RemainedItemRow)
        
        Private columnitemcode As Global.System.Data.DataColumn
        
        Private columnItemTitle As Global.System.Data.DataColumn
        
        Private columnallamount As Global.System.Data.DataColumn
        
        Private columnDoAmount As Global.System.Data.DataColumn
        
        Private columndiff As Global.System.Data.DataColumn
        
        Private columnprice As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "pm_Con_Rp_RemainedItem"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemTitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property allamountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnallamount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DoAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDoAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property diffColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiff
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property priceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As pm_Con_Rp_RemainedItemRow
            Get
                Return CType(Me.Rows(index),pm_Con_Rp_RemainedItemRow)
            End Get
        End Property
        
        Public Event pm_Con_Rp_RemainedItemRowChanging As pm_Con_Rp_RemainedItemRowChangeEventHandler
        
        Public Event pm_Con_Rp_RemainedItemRowChanged As pm_Con_Rp_RemainedItemRowChangeEventHandler
        
        Public Event pm_Con_Rp_RemainedItemRowDeleting As pm_Con_Rp_RemainedItemRowChangeEventHandler
        
        Public Event pm_Con_Rp_RemainedItemRowDeleted As pm_Con_Rp_RemainedItemRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addpm_Con_Rp_RemainedItemRow(ByVal row As pm_Con_Rp_RemainedItemRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addpm_Con_Rp_RemainedItemRow(ByVal itemcode As String, ByVal ItemTitle As String, ByVal allamount As Double, ByVal DoAmount As Double, ByVal diff As Double, ByVal price As Double) As pm_Con_Rp_RemainedItemRow
            Dim rowpm_Con_Rp_RemainedItemRow As pm_Con_Rp_RemainedItemRow = CType(Me.NewRow,pm_Con_Rp_RemainedItemRow)
            Dim columnValuesArray() As Object = New Object() {itemcode, ItemTitle, allamount, DoAmount, diff, price}
            rowpm_Con_Rp_RemainedItemRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowpm_Con_Rp_RemainedItemRow)
            Return rowpm_Con_Rp_RemainedItemRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As pm_Con_Rp_RemainedItemDataTable = CType(MyBase.Clone,pm_Con_Rp_RemainedItemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New pm_Con_Rp_RemainedItemDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnitemcode = MyBase.Columns("itemcode")
            Me.columnItemTitle = MyBase.Columns("ItemTitle")
            Me.columnallamount = MyBase.Columns("allamount")
            Me.columnDoAmount = MyBase.Columns("DoAmount")
            Me.columndiff = MyBase.Columns("diff")
            Me.columnprice = MyBase.Columns("price")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnitemcode = New Global.System.Data.DataColumn("itemcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemcode)
            Me.columnItemTitle = New Global.System.Data.DataColumn("ItemTitle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemTitle)
            Me.columnallamount = New Global.System.Data.DataColumn("allamount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnallamount)
            Me.columnDoAmount = New Global.System.Data.DataColumn("DoAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDoAmount)
            Me.columndiff = New Global.System.Data.DataColumn("diff", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiff)
            Me.columnprice = New Global.System.Data.DataColumn("price", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprice)
            Me.columnitemcode.MaxLength = 50
            Me.columnItemTitle.MaxLength = 500
            Me.columnallamount.ReadOnly = true
            Me.columnDoAmount.ReadOnly = true
            Me.columndiff.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newpm_Con_Rp_RemainedItemRow() As pm_Con_Rp_RemainedItemRow
            Return CType(Me.NewRow,pm_Con_Rp_RemainedItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New pm_Con_Rp_RemainedItemRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(pm_Con_Rp_RemainedItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pm_Con_Rp_RemainedItemRowChangedEvent) Is Nothing) Then
                RaiseEvent pm_Con_Rp_RemainedItemRowChanged(Me, New pm_Con_Rp_RemainedItemRowChangeEvent(CType(e.Row,pm_Con_Rp_RemainedItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pm_Con_Rp_RemainedItemRowChangingEvent) Is Nothing) Then
                RaiseEvent pm_Con_Rp_RemainedItemRowChanging(Me, New pm_Con_Rp_RemainedItemRowChangeEvent(CType(e.Row,pm_Con_Rp_RemainedItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pm_Con_Rp_RemainedItemRowDeletedEvent) Is Nothing) Then
                RaiseEvent pm_Con_Rp_RemainedItemRowDeleted(Me, New pm_Con_Rp_RemainedItemRowChangeEvent(CType(e.Row,pm_Con_Rp_RemainedItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pm_Con_Rp_RemainedItemRowDeletingEvent) Is Nothing) Then
                RaiseEvent pm_Con_Rp_RemainedItemRowDeleting(Me, New pm_Con_Rp_RemainedItemRowChangeEvent(CType(e.Row,pm_Con_Rp_RemainedItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removepm_Con_Rp_RemainedItemRow(ByVal row As pm_Con_Rp_RemainedItemRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "pm_Con_Rp_RemainedItemDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_con_vahedWeightDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_con_vahedWeightRow)
        
        Private columnsrl As Global.System.Data.DataColumn
        
        Private columnsrl_vahed As Global.System.Data.DataColumn
        
        Private columnsrl_contract As Global.System.Data.DataColumn
        
        Private columnنام_واحد As Global.System.Data.DataColumn
        
        Private columnشاخص_وزنی As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_con_vahedWeight"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_vahedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_vahed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_contractColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_contract
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نام_واحدColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام_واحد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شاخص_وزنیColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشاخص_وزنی
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_con_vahedWeightRow
            Get
                Return CType(Me.Rows(index),Pm_con_vahedWeightRow)
            End Get
        End Property
        
        Public Event Pm_con_vahedWeightRowChanging As Pm_con_vahedWeightRowChangeEventHandler
        
        Public Event Pm_con_vahedWeightRowChanged As Pm_con_vahedWeightRowChangeEventHandler
        
        Public Event Pm_con_vahedWeightRowDeleting As Pm_con_vahedWeightRowChangeEventHandler
        
        Public Event Pm_con_vahedWeightRowDeleted As Pm_con_vahedWeightRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_con_vahedWeightRow(ByVal row As Pm_con_vahedWeightRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_con_vahedWeightRow(ByVal srl_vahed As Integer, ByVal parentPm_Con_ContractRowByFK_Pm_Con_VahedWeight_Pm_Con_Contract As Pm_Con_ContractRow, ByVal نام_واحد As String, ByVal شاخص_وزنی As Double) As Pm_con_vahedWeightRow
            Dim rowPm_con_vahedWeightRow As Pm_con_vahedWeightRow = CType(Me.NewRow,Pm_con_vahedWeightRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, srl_vahed, Nothing, نام_واحد, شاخص_وزنی}
            If (Not (parentPm_Con_ContractRowByFK_Pm_Con_VahedWeight_Pm_Con_Contract) Is Nothing) Then
                columnValuesArray(2) = parentPm_Con_ContractRowByFK_Pm_Con_VahedWeight_Pm_Con_Contract(0)
            End If
            rowPm_con_vahedWeightRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_con_vahedWeightRow)
            Return rowPm_con_vahedWeightRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysrl(ByVal srl As Integer) As Pm_con_vahedWeightRow
            Return CType(Me.Rows.Find(New Object() {srl}),Pm_con_vahedWeightRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_con_vahedWeightDataTable = CType(MyBase.Clone,Pm_con_vahedWeightDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_con_vahedWeightDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsrl = MyBase.Columns("srl")
            Me.columnsrl_vahed = MyBase.Columns("srl_vahed")
            Me.columnsrl_contract = MyBase.Columns("srl_contract")
            Me.columnنام_واحد = MyBase.Columns("نام واحد")
            Me.columnشاخص_وزنی = MyBase.Columns("شاخص وزنی")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsrl = New Global.System.Data.DataColumn("srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl)
            Me.columnsrl_vahed = New Global.System.Data.DataColumn("srl_vahed", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_vahed)
            Me.columnsrl_contract = New Global.System.Data.DataColumn("srl_contract", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_contract)
            Me.columnنام_واحد = New Global.System.Data.DataColumn("نام واحد", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام_واحد)
            Me.columnشاخص_وزنی = New Global.System.Data.DataColumn("شاخص وزنی", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشاخص_وزنی)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsrl}, true))
            Me.columnsrl.AutoIncrement = true
            Me.columnsrl.AutoIncrementSeed = -1
            Me.columnsrl.AutoIncrementStep = -1
            Me.columnsrl.AllowDBNull = false
            Me.columnsrl.ReadOnly = true
            Me.columnsrl.Unique = true
            Me.columnنام_واحد.MaxLength = 400
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_con_vahedWeightRow() As Pm_con_vahedWeightRow
            Return CType(Me.NewRow,Pm_con_vahedWeightRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_con_vahedWeightRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_con_vahedWeightRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_con_vahedWeightRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_con_vahedWeightRowChanged(Me, New Pm_con_vahedWeightRowChangeEvent(CType(e.Row,Pm_con_vahedWeightRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_con_vahedWeightRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_con_vahedWeightRowChanging(Me, New Pm_con_vahedWeightRowChangeEvent(CType(e.Row,Pm_con_vahedWeightRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_con_vahedWeightRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_con_vahedWeightRowDeleted(Me, New Pm_con_vahedWeightRowChangeEvent(CType(e.Row,Pm_con_vahedWeightRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_con_vahedWeightRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_con_vahedWeightRowDeleting(Me, New Pm_con_vahedWeightRowChangeEvent(CType(e.Row,Pm_con_vahedWeightRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_con_vahedWeightRow(ByVal row As Pm_con_vahedWeightRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_con_vahedWeightDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_con_StatusStatementDetailDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_con_StatusStatementDetailRow)
        
        Private columnsrl_ashkhas As Global.System.Data.DataColumn
        
        Private columnنام_و_نام_خانوادگی As Global.System.Data.DataColumn
        
        Private columnweight As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_con_StatusStatementDetail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_ashkhasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_ashkhas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نام_و_نام_خانوادگیColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام_و_نام_خانوادگی
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property weightColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnweight
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_con_StatusStatementDetailRow
            Get
                Return CType(Me.Rows(index),Pm_con_StatusStatementDetailRow)
            End Get
        End Property
        
        Public Event Pm_con_StatusStatementDetailRowChanging As Pm_con_StatusStatementDetailRowChangeEventHandler
        
        Public Event Pm_con_StatusStatementDetailRowChanged As Pm_con_StatusStatementDetailRowChangeEventHandler
        
        Public Event Pm_con_StatusStatementDetailRowDeleting As Pm_con_StatusStatementDetailRowChangeEventHandler
        
        Public Event Pm_con_StatusStatementDetailRowDeleted As Pm_con_StatusStatementDetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_con_StatusStatementDetailRow(ByVal row As Pm_con_StatusStatementDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_con_StatusStatementDetailRow(ByVal srl_ashkhas As Integer, ByVal نام_و_نام_خانوادگی As String, ByVal weight As Double) As Pm_con_StatusStatementDetailRow
            Dim rowPm_con_StatusStatementDetailRow As Pm_con_StatusStatementDetailRow = CType(Me.NewRow,Pm_con_StatusStatementDetailRow)
            Dim columnValuesArray() As Object = New Object() {srl_ashkhas, نام_و_نام_خانوادگی, weight}
            rowPm_con_StatusStatementDetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_con_StatusStatementDetailRow)
            Return rowPm_con_StatusStatementDetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_con_StatusStatementDetailDataTable = CType(MyBase.Clone,Pm_con_StatusStatementDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_con_StatusStatementDetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsrl_ashkhas = MyBase.Columns("srl_ashkhas")
            Me.columnنام_و_نام_خانوادگی = MyBase.Columns("نام و نام خانوادگی")
            Me.columnweight = MyBase.Columns("weight")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsrl_ashkhas = New Global.System.Data.DataColumn("srl_ashkhas", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_ashkhas)
            Me.columnنام_و_نام_خانوادگی = New Global.System.Data.DataColumn("نام و نام خانوادگی", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام_و_نام_خانوادگی)
            Me.columnweight = New Global.System.Data.DataColumn("weight", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnweight)
            Me.columnنام_و_نام_خانوادگی.ReadOnly = true
            Me.columnنام_و_نام_خانوادگی.MaxLength = 101
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_con_StatusStatementDetailRow() As Pm_con_StatusStatementDetailRow
            Return CType(Me.NewRow,Pm_con_StatusStatementDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_con_StatusStatementDetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_con_StatusStatementDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_con_StatusStatementDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_con_StatusStatementDetailRowChanged(Me, New Pm_con_StatusStatementDetailRowChangeEvent(CType(e.Row,Pm_con_StatusStatementDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_con_StatusStatementDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_con_StatusStatementDetailRowChanging(Me, New Pm_con_StatusStatementDetailRowChangeEvent(CType(e.Row,Pm_con_StatusStatementDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_con_StatusStatementDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_con_StatusStatementDetailRowDeleted(Me, New Pm_con_StatusStatementDetailRowChangeEvent(CType(e.Row,Pm_con_StatusStatementDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_con_StatusStatementDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_con_StatusStatementDetailRowDeleting(Me, New Pm_con_StatusStatementDetailRowChangeEvent(CType(e.Row,Pm_con_StatusStatementDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_con_StatusStatementDetailRow(ByVal row As Pm_con_StatusStatementDetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_con_StatusStatementDetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Con_ExcelMonthReportDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Con_ExcelMonthReportRow)
        
        Private columnشماره As Global.System.Data.DataColumn
        
        Private columnشرح As Global.System.Data.DataColumn
        
        Private columnمبلغ_ارسال As Global.System.Data.DataColumn
        
        Private _columnارزش_افزوده_9_ As Global.System.Data.DataColumn
        
        Private columnشماره_نامه As Global.System.Data.DataColumn
        
        Private columnتاریخ_ارسال As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Con_ExcelMonthReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شمارهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشماره
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شرحColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشرح
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property مبلغ_ارسالColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnمبلغ_ارسال
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _ارزش_افزوده_9_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnارزش_افزوده_9_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شماره_نامهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشماره_نامه
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاریخ_ارسالColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاریخ_ارسال
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Con_ExcelMonthReportRow
            Get
                Return CType(Me.Rows(index),Pm_Con_ExcelMonthReportRow)
            End Get
        End Property
        
        Public Event Pm_Con_ExcelMonthReportRowChanging As Pm_Con_ExcelMonthReportRowChangeEventHandler
        
        Public Event Pm_Con_ExcelMonthReportRowChanged As Pm_Con_ExcelMonthReportRowChangeEventHandler
        
        Public Event Pm_Con_ExcelMonthReportRowDeleting As Pm_Con_ExcelMonthReportRowChangeEventHandler
        
        Public Event Pm_Con_ExcelMonthReportRowDeleted As Pm_Con_ExcelMonthReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Con_ExcelMonthReportRow(ByVal row As Pm_Con_ExcelMonthReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Con_ExcelMonthReportRow(ByVal شماره As Integer, ByVal شرح As String, ByVal مبلغ_ارسال As String, ByVal _ارزش_افزوده_9_ As Long, ByVal شماره_نامه As String, ByVal تاریخ_ارسال As String) As Pm_Con_ExcelMonthReportRow
            Dim rowPm_Con_ExcelMonthReportRow As Pm_Con_ExcelMonthReportRow = CType(Me.NewRow,Pm_Con_ExcelMonthReportRow)
            Dim columnValuesArray() As Object = New Object() {شماره, شرح, مبلغ_ارسال, _ارزش_افزوده_9_, شماره_نامه, تاریخ_ارسال}
            rowPm_Con_ExcelMonthReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Con_ExcelMonthReportRow)
            Return rowPm_Con_ExcelMonthReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Con_ExcelMonthReportDataTable = CType(MyBase.Clone,Pm_Con_ExcelMonthReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Con_ExcelMonthReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnشماره = MyBase.Columns("شماره")
            Me.columnشرح = MyBase.Columns("شرح")
            Me.columnمبلغ_ارسال = MyBase.Columns("مبلغ ارسال")
            Me._columnارزش_افزوده_9_ = MyBase.Columns("ارزش افزوده 9%")
            Me.columnشماره_نامه = MyBase.Columns("شماره نامه")
            Me.columnتاریخ_ارسال = MyBase.Columns("تاریخ ارسال")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnشماره = New Global.System.Data.DataColumn("شماره", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشماره)
            Me.columnشرح = New Global.System.Data.DataColumn("شرح", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشرح)
            Me.columnمبلغ_ارسال = New Global.System.Data.DataColumn("مبلغ ارسال", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnمبلغ_ارسال)
            Me._columnارزش_افزوده_9_ = New Global.System.Data.DataColumn("ارزش افزوده 9%", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            Me._columnارزش_افزوده_9_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnارزش_افزوده_9_")
            Me._columnارزش_افزوده_9_.ExtendedProperties.Add("Generator_UserColumnName", "ارزش افزوده 9%")
            MyBase.Columns.Add(Me._columnارزش_افزوده_9_)
            Me.columnشماره_نامه = New Global.System.Data.DataColumn("شماره نامه", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشماره_نامه)
            Me.columnتاریخ_ارسال = New Global.System.Data.DataColumn("تاریخ ارسال", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاریخ_ارسال)
            Me.columnشرح.ReadOnly = true
            Me.columnشرح.MaxLength = 685
            Me.columnمبلغ_ارسال.MaxLength = 50
            Me._columnارزش_افزوده_9_.ReadOnly = true
            Me.columnشماره_نامه.MaxLength = 50
            Me.columnتاریخ_ارسال.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Con_ExcelMonthReportRow() As Pm_Con_ExcelMonthReportRow
            Return CType(Me.NewRow,Pm_Con_ExcelMonthReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Con_ExcelMonthReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Con_ExcelMonthReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Con_ExcelMonthReportRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_ExcelMonthReportRowChanged(Me, New Pm_Con_ExcelMonthReportRowChangeEvent(CType(e.Row,Pm_Con_ExcelMonthReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Con_ExcelMonthReportRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_ExcelMonthReportRowChanging(Me, New Pm_Con_ExcelMonthReportRowChangeEvent(CType(e.Row,Pm_Con_ExcelMonthReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Con_ExcelMonthReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_ExcelMonthReportRowDeleted(Me, New Pm_Con_ExcelMonthReportRowChangeEvent(CType(e.Row,Pm_Con_ExcelMonthReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Con_ExcelMonthReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_ExcelMonthReportRowDeleting(Me, New Pm_Con_ExcelMonthReportRowChangeEvent(CType(e.Row,Pm_Con_ExcelMonthReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Con_ExcelMonthReportRow(ByVal row As Pm_Con_ExcelMonthReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Con_ExcelMonthReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Con_StatusstatementItemVwDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Con_StatusstatementItemVwRow)
        
        Private columnکد As Global.System.Data.DataColumn
        
        Private columnعنوان As Global.System.Data.DataColumn
        
        Private columnتعداد As Global.System.Data.DataColumn
        
        Private columnقیمت As Global.System.Data.DataColumn
        
        Private columnکل As Global.System.Data.DataColumn
        
        Private columnتاریخ As Global.System.Data.DataColumn
        
        Private columnپست As Global.System.Data.DataColumn
        
        Private columnsrl_Post As Global.System.Data.DataColumn
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnSrl_workform_master As Global.System.Data.DataColumn
        
        Private columnsrl_contractItem As Global.System.Data.DataColumn
        
        Private columnAmount As Global.System.Data.DataColumn
        
        Private columnIs_Confirme As Global.System.Data.DataColumn
        
        Private columnPrice As Global.System.Data.DataColumn
        
        Private columnsrl_source As Global.System.Data.DataColumn
        
        Private columnSrl_SubmitUser As Global.System.Data.DataColumn
        
        Private columnIs_holiday As Global.System.Data.DataColumn
        
        Private columnIs_Night As Global.System.Data.DataColumn
        
        Private columnIs_Cancle As Global.System.Data.DataColumn
        
        Private columnSubmitDate As Global.System.Data.DataColumn
        
        Private columnsrl_StatusStatement As Global.System.Data.DataColumn
        
        Private columnIs_Beforecancle As Global.System.Data.DataColumn
        
        Private columnSrl_MonthReport As Global.System.Data.DataColumn
        
        Private columntitle As Global.System.Data.DataColumn
        
        Private columncode As Global.System.Data.DataColumn
        
        Private columnsrl_item As Global.System.Data.DataColumn
        
        Private columnSrl_Contract As Global.System.Data.DataColumn
        
        Private columnpostname As Global.System.Data.DataColumn
        
        Private columntarikh As Global.System.Data.DataColumn
        
        Private columnp As Global.System.Data.DataColumn
        
        Private columnsrl_vahed As Global.System.Data.DataColumn
        
        Private columnsrl_Post1 As Global.System.Data.DataColumn
        
        Private columnsrl_group As Global.System.Data.DataColumn
        
        Private columnsrl_Omoor As Global.System.Data.DataColumn
        
        Private column_Month As Global.System.Data.DataColumn
        
        Private column_Year As Global.System.Data.DataColumn
        
        Private columnsstype As Global.System.Data.DataColumn
        
        Private columndescription As Global.System.Data.DataColumn
        
        Private columnConfirm_Amount As Global.System.Data.DataColumn
        
        Private columnConfirm_Price As Global.System.Data.DataColumn
        
        Private columnCalcPrice As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Con_StatusstatementItemVw"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property کدColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnکد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property عنوانColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnعنوان
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تعدادColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتعداد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property قیمتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnقیمت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property کلColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnکل
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاریخColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاریخ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property پستColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnپست
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_PostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_Post
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_workform_masterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_workform_master
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_contractItemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_contractItem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Is_ConfirmeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIs_Confirme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_sourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_source
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_SubmitUserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_SubmitUser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Is_holidayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIs_holiday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Is_NightColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIs_Night
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Is_CancleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIs_Cancle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubmitDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubmitDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_StatusStatementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_StatusStatement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Is_BeforecancleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIs_Beforecancle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_MonthReportColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_MonthReport
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property titleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_itemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_item
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_ContractColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_Contract
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property postnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpostname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tarikhColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntarikh
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_vahedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_vahed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_Post1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_Post1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_groupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_group
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_OmoorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_Omoor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _MonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_Month
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_Year
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sstypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsstype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Confirm_AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConfirm_Amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Confirm_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConfirm_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CalcPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalcPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Con_StatusstatementItemVwRow
            Get
                Return CType(Me.Rows(index),Pm_Con_StatusstatementItemVwRow)
            End Get
        End Property
        
        Public Event Pm_Con_StatusstatementItemVwRowChanging As Pm_Con_StatusstatementItemVwRowChangeEventHandler
        
        Public Event Pm_Con_StatusstatementItemVwRowChanged As Pm_Con_StatusstatementItemVwRowChangeEventHandler
        
        Public Event Pm_Con_StatusstatementItemVwRowDeleting As Pm_Con_StatusstatementItemVwRowChangeEventHandler
        
        Public Event Pm_Con_StatusstatementItemVwRowDeleted As Pm_Con_StatusstatementItemVwRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Con_StatusstatementItemVwRow(ByVal row As Pm_Con_StatusstatementItemVwRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Con_StatusstatementItemVwRow( _
                    ByVal کد As String,  _
                    ByVal عنوان As String,  _
                    ByVal تعداد As Double,  _
                    ByVal قیمت As Double,  _
                    ByVal کل As Double,  _
                    ByVal تاریخ As String,  _
                    ByVal پست As String,  _
                    ByVal srl_Post As Integer,  _
                    ByVal Srl_workform_master As Integer,  _
                    ByVal srl_contractItem As Integer,  _
                    ByVal Amount As Double,  _
                    ByVal Is_Confirme As Boolean,  _
                    ByVal Price As Double,  _
                    ByVal srl_source As Integer,  _
                    ByVal Srl_SubmitUser As Integer,  _
                    ByVal Is_holiday As Boolean,  _
                    ByVal Is_Night As Boolean,  _
                    ByVal Is_Cancle As Boolean,  _
                    ByVal SubmitDate As Date,  _
                    ByVal srl_StatusStatement As Integer,  _
                    ByVal Is_Beforecancle As Boolean,  _
                    ByVal Srl_MonthReport As Integer,  _
                    ByVal title As String,  _
                    ByVal code As String,  _
                    ByVal Srl_Contract As Integer,  _
                    ByVal postname As String,  _
                    ByVal tarikh As String,  _
                    ByVal p As Double,  _
                    ByVal srl_vahed As Integer,  _
                    ByVal srl_Post1 As Integer,  _
                    ByVal srl_group As Integer,  _
                    ByVal srl_Omoor As Integer,  _
                    ByVal _Month As Integer,  _
                    ByVal _Year As Integer,  _
                    ByVal sstype As Integer,  _
                    ByVal description As String,  _
                    ByVal Confirm_Amount As Double,  _
                    ByVal Confirm_Price As Double,  _
                    ByVal CalcPrice As Double) As Pm_Con_StatusstatementItemVwRow
            Dim rowPm_Con_StatusstatementItemVwRow As Pm_Con_StatusstatementItemVwRow = CType(Me.NewRow,Pm_Con_StatusstatementItemVwRow)
            Dim columnValuesArray() As Object = New Object() {کد, عنوان, تعداد, قیمت, کل, تاریخ, پست, srl_Post, Nothing, Srl_workform_master, srl_contractItem, Amount, Is_Confirme, Price, srl_source, Srl_SubmitUser, Is_holiday, Is_Night, Is_Cancle, SubmitDate, srl_StatusStatement, Is_Beforecancle, Srl_MonthReport, title, code, Nothing, Srl_Contract, postname, tarikh, p, srl_vahed, srl_Post1, srl_group, srl_Omoor, _Month, _Year, sstype, description, Confirm_Amount, Confirm_Price, CalcPrice}
            rowPm_Con_StatusstatementItemVwRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Con_StatusstatementItemVwRow)
            Return rowPm_Con_StatusstatementItemVwRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Con_StatusstatementItemVwDataTable = CType(MyBase.Clone,Pm_Con_StatusstatementItemVwDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Con_StatusstatementItemVwDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnکد = MyBase.Columns("کد")
            Me.columnعنوان = MyBase.Columns("عنوان")
            Me.columnتعداد = MyBase.Columns("تعداد")
            Me.columnقیمت = MyBase.Columns("قیمت")
            Me.columnکل = MyBase.Columns("کل")
            Me.columnتاریخ = MyBase.Columns("تاریخ")
            Me.columnپست = MyBase.Columns("پست")
            Me.columnsrl_Post = MyBase.Columns("srl_Post")
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnSrl_workform_master = MyBase.Columns("Srl_workform_master")
            Me.columnsrl_contractItem = MyBase.Columns("srl_contractItem")
            Me.columnAmount = MyBase.Columns("Amount")
            Me.columnIs_Confirme = MyBase.Columns("Is_Confirme")
            Me.columnPrice = MyBase.Columns("Price")
            Me.columnsrl_source = MyBase.Columns("srl_source")
            Me.columnSrl_SubmitUser = MyBase.Columns("Srl_SubmitUser")
            Me.columnIs_holiday = MyBase.Columns("Is_holiday")
            Me.columnIs_Night = MyBase.Columns("Is_Night")
            Me.columnIs_Cancle = MyBase.Columns("Is_Cancle")
            Me.columnSubmitDate = MyBase.Columns("SubmitDate")
            Me.columnsrl_StatusStatement = MyBase.Columns("srl_StatusStatement")
            Me.columnIs_Beforecancle = MyBase.Columns("Is_Beforecancle")
            Me.columnSrl_MonthReport = MyBase.Columns("Srl_MonthReport")
            Me.columntitle = MyBase.Columns("title")
            Me.columncode = MyBase.Columns("code")
            Me.columnsrl_item = MyBase.Columns("srl_item")
            Me.columnSrl_Contract = MyBase.Columns("Srl_Contract")
            Me.columnpostname = MyBase.Columns("postname")
            Me.columntarikh = MyBase.Columns("tarikh")
            Me.columnp = MyBase.Columns("p")
            Me.columnsrl_vahed = MyBase.Columns("srl_vahed")
            Me.columnsrl_Post1 = MyBase.Columns("srl_Post1")
            Me.columnsrl_group = MyBase.Columns("srl_group")
            Me.columnsrl_Omoor = MyBase.Columns("srl_Omoor")
            Me.column_Month = MyBase.Columns("_Month")
            Me.column_Year = MyBase.Columns("_Year")
            Me.columnsstype = MyBase.Columns("sstype")
            Me.columndescription = MyBase.Columns("description")
            Me.columnConfirm_Amount = MyBase.Columns("Confirm_Amount")
            Me.columnConfirm_Price = MyBase.Columns("Confirm_Price")
            Me.columnCalcPrice = MyBase.Columns("CalcPrice")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnکد = New Global.System.Data.DataColumn("کد", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnکد)
            Me.columnعنوان = New Global.System.Data.DataColumn("عنوان", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnعنوان)
            Me.columnتعداد = New Global.System.Data.DataColumn("تعداد", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتعداد)
            Me.columnقیمت = New Global.System.Data.DataColumn("قیمت", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnقیمت)
            Me.columnکل = New Global.System.Data.DataColumn("کل", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnکل)
            Me.columnتاریخ = New Global.System.Data.DataColumn("تاریخ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاریخ)
            Me.columnپست = New Global.System.Data.DataColumn("پست", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnپست)
            Me.columnsrl_Post = New Global.System.Data.DataColumn("srl_Post", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_Post)
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnSrl_workform_master = New Global.System.Data.DataColumn("Srl_workform_master", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_workform_master)
            Me.columnsrl_contractItem = New Global.System.Data.DataColumn("srl_contractItem", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_contractItem)
            Me.columnAmount = New Global.System.Data.DataColumn("Amount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount)
            Me.columnIs_Confirme = New Global.System.Data.DataColumn("Is_Confirme", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIs_Confirme)
            Me.columnPrice = New Global.System.Data.DataColumn("Price", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice)
            Me.columnsrl_source = New Global.System.Data.DataColumn("srl_source", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_source)
            Me.columnSrl_SubmitUser = New Global.System.Data.DataColumn("Srl_SubmitUser", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_SubmitUser)
            Me.columnIs_holiday = New Global.System.Data.DataColumn("Is_holiday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIs_holiday)
            Me.columnIs_Night = New Global.System.Data.DataColumn("Is_Night", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIs_Night)
            Me.columnIs_Cancle = New Global.System.Data.DataColumn("Is_Cancle", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIs_Cancle)
            Me.columnSubmitDate = New Global.System.Data.DataColumn("SubmitDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubmitDate)
            Me.columnsrl_StatusStatement = New Global.System.Data.DataColumn("srl_StatusStatement", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_StatusStatement)
            Me.columnIs_Beforecancle = New Global.System.Data.DataColumn("Is_Beforecancle", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIs_Beforecancle)
            Me.columnSrl_MonthReport = New Global.System.Data.DataColumn("Srl_MonthReport", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_MonthReport)
            Me.columntitle = New Global.System.Data.DataColumn("title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntitle)
            Me.columncode = New Global.System.Data.DataColumn("code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncode)
            Me.columnsrl_item = New Global.System.Data.DataColumn("srl_item", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_item)
            Me.columnSrl_Contract = New Global.System.Data.DataColumn("Srl_Contract", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_Contract)
            Me.columnpostname = New Global.System.Data.DataColumn("postname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpostname)
            Me.columntarikh = New Global.System.Data.DataColumn("tarikh", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntarikh)
            Me.columnp = New Global.System.Data.DataColumn("p", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnp)
            Me.columnsrl_vahed = New Global.System.Data.DataColumn("srl_vahed", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_vahed)
            Me.columnsrl_Post1 = New Global.System.Data.DataColumn("srl_Post1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_Post1)
            Me.columnsrl_group = New Global.System.Data.DataColumn("srl_group", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_group)
            Me.columnsrl_Omoor = New Global.System.Data.DataColumn("srl_Omoor", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_Omoor)
            Me.column_Month = New Global.System.Data.DataColumn("_Month", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_Month)
            Me.column_Year = New Global.System.Data.DataColumn("_Year", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_Year)
            Me.columnsstype = New Global.System.Data.DataColumn("sstype", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsstype)
            Me.columndescription = New Global.System.Data.DataColumn("description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescription)
            Me.columnConfirm_Amount = New Global.System.Data.DataColumn("Confirm_Amount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConfirm_Amount)
            Me.columnConfirm_Price = New Global.System.Data.DataColumn("Confirm_Price", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConfirm_Price)
            Me.columnCalcPrice = New Global.System.Data.DataColumn("CalcPrice", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalcPrice)
            Me.columnکد.MaxLength = 50
            Me.columnعنوان.MaxLength = 500
            Me.columnکل.ReadOnly = true
            Me.columnتاریخ.ReadOnly = true
            Me.columnتاریخ.MaxLength = 11
            Me.columnپست.ReadOnly = true
            Me.columnپست.MaxLength = 50
            Me.columnsrl_Post.ReadOnly = true
            Me.columnSrl.AutoIncrement = true
            Me.columnSrl.AutoIncrementSeed = -1
            Me.columnSrl.AutoIncrementStep = -1
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.ReadOnly = true
            Me.columntitle.MaxLength = 500
            Me.columncode.MaxLength = 50
            Me.columnsrl_item.AutoIncrement = true
            Me.columnsrl_item.AutoIncrementSeed = -1
            Me.columnsrl_item.AutoIncrementStep = -1
            Me.columnsrl_item.ReadOnly = true
            Me.columnpostname.ReadOnly = true
            Me.columnpostname.MaxLength = 50
            Me.columntarikh.ReadOnly = true
            Me.columntarikh.MaxLength = 11
            Me.columnp.ReadOnly = true
            Me.columnsrl_vahed.ReadOnly = true
            Me.columnsrl_Post1.ReadOnly = true
            Me.columnsrl_group.ReadOnly = true
            Me.columnsrl_Omoor.ReadOnly = true
            Me.column_Month.ReadOnly = true
            Me.column_Year.ReadOnly = true
            Me.columndescription.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Con_StatusstatementItemVwRow() As Pm_Con_StatusstatementItemVwRow
            Return CType(Me.NewRow,Pm_Con_StatusstatementItemVwRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Con_StatusstatementItemVwRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Con_StatusstatementItemVwRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Con_StatusstatementItemVwRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_StatusstatementItemVwRowChanged(Me, New Pm_Con_StatusstatementItemVwRowChangeEvent(CType(e.Row,Pm_Con_StatusstatementItemVwRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Con_StatusstatementItemVwRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_StatusstatementItemVwRowChanging(Me, New Pm_Con_StatusstatementItemVwRowChangeEvent(CType(e.Row,Pm_Con_StatusstatementItemVwRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Con_StatusstatementItemVwRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_StatusstatementItemVwRowDeleted(Me, New Pm_Con_StatusstatementItemVwRowChangeEvent(CType(e.Row,Pm_Con_StatusstatementItemVwRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Con_StatusstatementItemVwRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_StatusstatementItemVwRowDeleting(Me, New Pm_Con_StatusstatementItemVwRowChangeEvent(CType(e.Row,Pm_Con_StatusstatementItemVwRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Con_StatusstatementItemVwRow(ByVal row As Pm_Con_StatusstatementItemVwRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Con_StatusstatementItemVwDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Con_GroupWeightDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Con_GroupWeightRow)
        
        Private columnsrl As Global.System.Data.DataColumn
        
        Private columnsrl_Group As Global.System.Data.DataColumn
        
        Private columnsrl_contract As Global.System.Data.DataColumn
        
        Private columnنام_گروه As Global.System.Data.DataColumn
        
        Private columnشاخص_وزنی As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Con_GroupWeight"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_GroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_Group
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_contractColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_contract
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نام_گروهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام_گروه
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شاخص_وزنیColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشاخص_وزنی
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Con_GroupWeightRow
            Get
                Return CType(Me.Rows(index),Pm_Con_GroupWeightRow)
            End Get
        End Property
        
        Public Event Pm_Con_GroupWeightRowChanging As Pm_Con_GroupWeightRowChangeEventHandler
        
        Public Event Pm_Con_GroupWeightRowChanged As Pm_Con_GroupWeightRowChangeEventHandler
        
        Public Event Pm_Con_GroupWeightRowDeleting As Pm_Con_GroupWeightRowChangeEventHandler
        
        Public Event Pm_Con_GroupWeightRowDeleted As Pm_Con_GroupWeightRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Con_GroupWeightRow(ByVal row As Pm_Con_GroupWeightRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Con_GroupWeightRow(ByVal srl_Group As Integer, ByVal srl_contract As Integer, ByVal نام_گروه As String, ByVal شاخص_وزنی As Double) As Pm_Con_GroupWeightRow
            Dim rowPm_Con_GroupWeightRow As Pm_Con_GroupWeightRow = CType(Me.NewRow,Pm_Con_GroupWeightRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, srl_Group, srl_contract, نام_گروه, شاخص_وزنی}
            rowPm_Con_GroupWeightRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Con_GroupWeightRow)
            Return rowPm_Con_GroupWeightRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysrl(ByVal srl As Integer) As Pm_Con_GroupWeightRow
            Return CType(Me.Rows.Find(New Object() {srl}),Pm_Con_GroupWeightRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Con_GroupWeightDataTable = CType(MyBase.Clone,Pm_Con_GroupWeightDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Con_GroupWeightDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsrl = MyBase.Columns("srl")
            Me.columnsrl_Group = MyBase.Columns("srl_Group")
            Me.columnsrl_contract = MyBase.Columns("srl_contract")
            Me.columnنام_گروه = MyBase.Columns("نام گروه")
            Me.columnشاخص_وزنی = MyBase.Columns("شاخص وزنی")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsrl = New Global.System.Data.DataColumn("srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl)
            Me.columnsrl_Group = New Global.System.Data.DataColumn("srl_Group", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_Group)
            Me.columnsrl_contract = New Global.System.Data.DataColumn("srl_contract", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_contract)
            Me.columnنام_گروه = New Global.System.Data.DataColumn("نام گروه", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام_گروه)
            Me.columnشاخص_وزنی = New Global.System.Data.DataColumn("شاخص وزنی", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشاخص_وزنی)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsrl}, true))
            Me.columnsrl.AutoIncrement = true
            Me.columnsrl.AutoIncrementSeed = -1
            Me.columnsrl.AutoIncrementStep = -1
            Me.columnsrl.AllowDBNull = false
            Me.columnsrl.ReadOnly = true
            Me.columnsrl.Unique = true
            Me.columnنام_گروه.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Con_GroupWeightRow() As Pm_Con_GroupWeightRow
            Return CType(Me.NewRow,Pm_Con_GroupWeightRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Con_GroupWeightRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Con_GroupWeightRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Con_GroupWeightRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_GroupWeightRowChanged(Me, New Pm_Con_GroupWeightRowChangeEvent(CType(e.Row,Pm_Con_GroupWeightRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Con_GroupWeightRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_GroupWeightRowChanging(Me, New Pm_Con_GroupWeightRowChangeEvent(CType(e.Row,Pm_Con_GroupWeightRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Con_GroupWeightRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_GroupWeightRowDeleted(Me, New Pm_Con_GroupWeightRowChangeEvent(CType(e.Row,Pm_Con_GroupWeightRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Con_GroupWeightRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_GroupWeightRowDeleting(Me, New Pm_Con_GroupWeightRowChangeEvent(CType(e.Row,Pm_Con_GroupWeightRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Con_GroupWeightRow(ByVal row As Pm_Con_GroupWeightRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Con_GroupWeightDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Con_NavahiWeightDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Con_NavahiWeightRow)
        
        Private columnsrl As Global.System.Data.DataColumn
        
        Private columnsrl_Post_type As Global.System.Data.DataColumn
        
        Private columnsrl_contract As Global.System.Data.DataColumn
        
        Private columnناحیه As Global.System.Data.DataColumn
        
        Private columnضریب As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Con_NavahiWeight"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_Post_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_Post_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_contractColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_contract
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ناحیهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnناحیه
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ضریبColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnضریب
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Con_NavahiWeightRow
            Get
                Return CType(Me.Rows(index),Pm_Con_NavahiWeightRow)
            End Get
        End Property
        
        Public Event Pm_Con_NavahiWeightRowChanging As Pm_Con_NavahiWeightRowChangeEventHandler
        
        Public Event Pm_Con_NavahiWeightRowChanged As Pm_Con_NavahiWeightRowChangeEventHandler
        
        Public Event Pm_Con_NavahiWeightRowDeleting As Pm_Con_NavahiWeightRowChangeEventHandler
        
        Public Event Pm_Con_NavahiWeightRowDeleted As Pm_Con_NavahiWeightRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Con_NavahiWeightRow(ByVal row As Pm_Con_NavahiWeightRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Con_NavahiWeightRow(ByVal srl_Post_type As Integer, ByVal parentPm_Con_ContractRowByFK_Pm_Con_NavahiWeight_Pm_Con_Contract As Pm_Con_ContractRow, ByVal ناحیه As String, ByVal ضریب As Double) As Pm_Con_NavahiWeightRow
            Dim rowPm_Con_NavahiWeightRow As Pm_Con_NavahiWeightRow = CType(Me.NewRow,Pm_Con_NavahiWeightRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, srl_Post_type, Nothing, ناحیه, ضریب}
            If (Not (parentPm_Con_ContractRowByFK_Pm_Con_NavahiWeight_Pm_Con_Contract) Is Nothing) Then
                columnValuesArray(2) = parentPm_Con_ContractRowByFK_Pm_Con_NavahiWeight_Pm_Con_Contract(0)
            End If
            rowPm_Con_NavahiWeightRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Con_NavahiWeightRow)
            Return rowPm_Con_NavahiWeightRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysrl(ByVal srl As Integer) As Pm_Con_NavahiWeightRow
            Return CType(Me.Rows.Find(New Object() {srl}),Pm_Con_NavahiWeightRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Con_NavahiWeightDataTable = CType(MyBase.Clone,Pm_Con_NavahiWeightDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Con_NavahiWeightDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsrl = MyBase.Columns("srl")
            Me.columnsrl_Post_type = MyBase.Columns("srl_Post_type")
            Me.columnsrl_contract = MyBase.Columns("srl_contract")
            Me.columnناحیه = MyBase.Columns("ناحیه")
            Me.columnضریب = MyBase.Columns("ضریب")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsrl = New Global.System.Data.DataColumn("srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl)
            Me.columnsrl_Post_type = New Global.System.Data.DataColumn("srl_Post_type", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_Post_type)
            Me.columnsrl_contract = New Global.System.Data.DataColumn("srl_contract", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_contract)
            Me.columnناحیه = New Global.System.Data.DataColumn("ناحیه", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnناحیه)
            Me.columnضریب = New Global.System.Data.DataColumn("ضریب", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnضریب)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsrl}, true))
            Me.columnsrl.AutoIncrement = true
            Me.columnsrl.AutoIncrementSeed = -1
            Me.columnsrl.AutoIncrementStep = -1
            Me.columnsrl.AllowDBNull = false
            Me.columnsrl.ReadOnly = true
            Me.columnsrl.Unique = true
            Me.columnناحیه.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Con_NavahiWeightRow() As Pm_Con_NavahiWeightRow
            Return CType(Me.NewRow,Pm_Con_NavahiWeightRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Con_NavahiWeightRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Con_NavahiWeightRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Con_NavahiWeightRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_NavahiWeightRowChanged(Me, New Pm_Con_NavahiWeightRowChangeEvent(CType(e.Row,Pm_Con_NavahiWeightRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Con_NavahiWeightRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_NavahiWeightRowChanging(Me, New Pm_Con_NavahiWeightRowChangeEvent(CType(e.Row,Pm_Con_NavahiWeightRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Con_NavahiWeightRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_NavahiWeightRowDeleted(Me, New Pm_Con_NavahiWeightRowChangeEvent(CType(e.Row,Pm_Con_NavahiWeightRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Con_NavahiWeightRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_NavahiWeightRowDeleting(Me, New Pm_Con_NavahiWeightRowChangeEvent(CType(e.Row,Pm_Con_NavahiWeightRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Con_NavahiWeightRow(ByVal row As Pm_Con_NavahiWeightRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Con_NavahiWeightDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Rp_Pm_MonthReport_OmoorDataTable
        Inherits Global.System.Data.TypedTableBase(Of Rp_Pm_MonthReport_OmoorRow)
        
        Private columnامور As Global.System.Data.DataColumn
        
        Private columnبررسی_کارمازاد As Global.System.Data.DataColumn
        
        Private columnبررسی_PM As Global.System.Data.DataColumn
        
        Private columnتائید_کارمازاد As Global.System.Data.DataColumn
        
        Private columnتائید_PM As Global.System.Data.DataColumn
        
        Private columnردشده_کارمازاد As Global.System.Data.DataColumn
        
        Private columnردشده_PM As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Rp_Pm_MonthReport_Omoor"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property امورColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnامور
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property بررسی_کارمازادColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnبررسی_کارمازاد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property بررسی_PMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnبررسی_PM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تائید_کارمازادColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتائید_کارمازاد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تائید_PMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتائید_PM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ردشده_کارمازادColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnردشده_کارمازاد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ردشده_PMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnردشده_PM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Rp_Pm_MonthReport_OmoorRow
            Get
                Return CType(Me.Rows(index),Rp_Pm_MonthReport_OmoorRow)
            End Get
        End Property
        
        Public Event Rp_Pm_MonthReport_OmoorRowChanging As Rp_Pm_MonthReport_OmoorRowChangeEventHandler
        
        Public Event Rp_Pm_MonthReport_OmoorRowChanged As Rp_Pm_MonthReport_OmoorRowChangeEventHandler
        
        Public Event Rp_Pm_MonthReport_OmoorRowDeleting As Rp_Pm_MonthReport_OmoorRowChangeEventHandler
        
        Public Event Rp_Pm_MonthReport_OmoorRowDeleted As Rp_Pm_MonthReport_OmoorRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRp_Pm_MonthReport_OmoorRow(ByVal row As Rp_Pm_MonthReport_OmoorRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRp_Pm_MonthReport_OmoorRow(ByVal امور As String, ByVal بررسی_کارمازاد As Long, ByVal بررسی_PM As Long, ByVal تائید_کارمازاد As Long, ByVal تائید_PM As Long, ByVal ردشده_کارمازاد As Long, ByVal ردشده_PM As Long) As Rp_Pm_MonthReport_OmoorRow
            Dim rowRp_Pm_MonthReport_OmoorRow As Rp_Pm_MonthReport_OmoorRow = CType(Me.NewRow,Rp_Pm_MonthReport_OmoorRow)
            Dim columnValuesArray() As Object = New Object() {امور, بررسی_کارمازاد, بررسی_PM, تائید_کارمازاد, تائید_PM, ردشده_کارمازاد, ردشده_PM}
            rowRp_Pm_MonthReport_OmoorRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRp_Pm_MonthReport_OmoorRow)
            Return rowRp_Pm_MonthReport_OmoorRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Rp_Pm_MonthReport_OmoorDataTable = CType(MyBase.Clone,Rp_Pm_MonthReport_OmoorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Rp_Pm_MonthReport_OmoorDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnامور = MyBase.Columns("امور")
            Me.columnبررسی_کارمازاد = MyBase.Columns("بررسی کارمازاد")
            Me.columnبررسی_PM = MyBase.Columns("بررسی PM")
            Me.columnتائید_کارمازاد = MyBase.Columns("تائید کارمازاد")
            Me.columnتائید_PM = MyBase.Columns("تائید PM")
            Me.columnردشده_کارمازاد = MyBase.Columns("ردشده کارمازاد")
            Me.columnردشده_PM = MyBase.Columns("ردشده PM")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnامور = New Global.System.Data.DataColumn("امور", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnامور)
            Me.columnبررسی_کارمازاد = New Global.System.Data.DataColumn("بررسی کارمازاد", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnبررسی_کارمازاد)
            Me.columnبررسی_PM = New Global.System.Data.DataColumn("بررسی PM", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnبررسی_PM)
            Me.columnتائید_کارمازاد = New Global.System.Data.DataColumn("تائید کارمازاد", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتائید_کارمازاد)
            Me.columnتائید_PM = New Global.System.Data.DataColumn("تائید PM", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتائید_PM)
            Me.columnردشده_کارمازاد = New Global.System.Data.DataColumn("ردشده کارمازاد", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnردشده_کارمازاد)
            Me.columnردشده_PM = New Global.System.Data.DataColumn("ردشده PM", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnردشده_PM)
            Me.columnامور.ReadOnly = true
            Me.columnامور.MaxLength = 601
            Me.columnبررسی_کارمازاد.ReadOnly = true
            Me.columnبررسی_PM.ReadOnly = true
            Me.columnتائید_کارمازاد.ReadOnly = true
            Me.columnتائید_PM.ReadOnly = true
            Me.columnردشده_کارمازاد.ReadOnly = true
            Me.columnردشده_PM.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRp_Pm_MonthReport_OmoorRow() As Rp_Pm_MonthReport_OmoorRow
            Return CType(Me.NewRow,Rp_Pm_MonthReport_OmoorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Rp_Pm_MonthReport_OmoorRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Rp_Pm_MonthReport_OmoorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Rp_Pm_MonthReport_OmoorRowChangedEvent) Is Nothing) Then
                RaiseEvent Rp_Pm_MonthReport_OmoorRowChanged(Me, New Rp_Pm_MonthReport_OmoorRowChangeEvent(CType(e.Row,Rp_Pm_MonthReport_OmoorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Rp_Pm_MonthReport_OmoorRowChangingEvent) Is Nothing) Then
                RaiseEvent Rp_Pm_MonthReport_OmoorRowChanging(Me, New Rp_Pm_MonthReport_OmoorRowChangeEvent(CType(e.Row,Rp_Pm_MonthReport_OmoorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Rp_Pm_MonthReport_OmoorRowDeletedEvent) Is Nothing) Then
                RaiseEvent Rp_Pm_MonthReport_OmoorRowDeleted(Me, New Rp_Pm_MonthReport_OmoorRowChangeEvent(CType(e.Row,Rp_Pm_MonthReport_OmoorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Rp_Pm_MonthReport_OmoorRowDeletingEvent) Is Nothing) Then
                RaiseEvent Rp_Pm_MonthReport_OmoorRowDeleting(Me, New Rp_Pm_MonthReport_OmoorRowChangeEvent(CType(e.Row,Rp_Pm_MonthReport_OmoorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRp_Pm_MonthReport_OmoorRow(ByVal row As Rp_Pm_MonthReport_OmoorRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Rp_Pm_MonthReport_OmoorDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class pm_con_statusStatementItemDataTable
        Inherits Global.System.Data.TypedTableBase(Of pm_con_statusStatementItemRow)
        
        Private columnsrl As Global.System.Data.DataColumn
        
        Private columnکد As Global.System.Data.DataColumn
        
        Private columnعنوان As Global.System.Data.DataColumn
        
        Private columnتعداد As Global.System.Data.DataColumn
        
        Private columnتائید As Global.System.Data.DataColumn
        
        Private columnقیمت As Global.System.Data.DataColumn
        
        Private columncalcprice As Global.System.Data.DataColumn
        
        Private columnConfirm_Price As Global.System.Data.DataColumn
        
        Private columnConfirm_Amount As Global.System.Data.DataColumn
        
        Private columnIs_holiday As Global.System.Data.DataColumn
        
        Private columnis_cancle As Global.System.Data.DataColumn
        
        Private columnis_night As Global.System.Data.DataColumn
        
        Private columnis_beforeCancle As Global.System.Data.DataColumn
        
        Private columnsrl_contract As Global.System.Data.DataColumn
        
        Private columnsrl_source As Global.System.Data.DataColumn
        
        Private columnقیمت_کل As Global.System.Data.DataColumn
        
        Private columnSSPM As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "pm_con_statusStatementItem"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property کدColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnکد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property عنوانColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnعنوان
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تعدادColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتعداد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تائیدColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتائید
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property قیمتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnقیمت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property calcpriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncalcprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Confirm_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConfirm_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Confirm_AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConfirm_Amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Is_holidayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIs_holiday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property is_cancleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnis_cancle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property is_nightColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnis_night
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property is_beforeCancleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnis_beforeCancle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_contractColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_contract
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_sourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_source
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property قیمت_کلColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnقیمت_کل
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SSPMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSSPM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As pm_con_statusStatementItemRow
            Get
                Return CType(Me.Rows(index),pm_con_statusStatementItemRow)
            End Get
        End Property
        
        Public Event pm_con_statusStatementItemRowChanging As pm_con_statusStatementItemRowChangeEventHandler
        
        Public Event pm_con_statusStatementItemRowChanged As pm_con_statusStatementItemRowChangeEventHandler
        
        Public Event pm_con_statusStatementItemRowDeleting As pm_con_statusStatementItemRowChangeEventHandler
        
        Public Event pm_con_statusStatementItemRowDeleted As pm_con_statusStatementItemRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addpm_con_statusStatementItemRow(ByVal row As pm_con_statusStatementItemRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addpm_con_statusStatementItemRow( _
                    ByVal کد As String,  _
                    ByVal عنوان As String,  _
                    ByVal تعداد As Double,  _
                    ByVal تائید As Boolean,  _
                    ByVal قیمت As Double,  _
                    ByVal calcprice As Double,  _
                    ByVal Confirm_Price As Double,  _
                    ByVal Confirm_Amount As Double,  _
                    ByVal Is_holiday As Boolean,  _
                    ByVal is_cancle As Boolean,  _
                    ByVal is_night As Boolean,  _
                    ByVal is_beforeCancle As Boolean,  _
                    ByVal parentPm_Con_ContractRowByFK_Pm_Con_ContractItems_Pm_Con_Contract As Pm_Con_ContractRow,  _
                    ByVal srl_source As Integer,  _
                    ByVal قیمت_کل As Double,  _
                    ByVal SSPM As String) As pm_con_statusStatementItemRow
            Dim rowpm_con_statusStatementItemRow As pm_con_statusStatementItemRow = CType(Me.NewRow,pm_con_statusStatementItemRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, کد, عنوان, تعداد, تائید, قیمت, calcprice, Confirm_Price, Confirm_Amount, Is_holiday, is_cancle, is_night, is_beforeCancle, Nothing, srl_source, قیمت_کل, SSPM}
            If (Not (parentPm_Con_ContractRowByFK_Pm_Con_ContractItems_Pm_Con_Contract) Is Nothing) Then
                columnValuesArray(13) = parentPm_Con_ContractRowByFK_Pm_Con_ContractItems_Pm_Con_Contract(0)
            End If
            rowpm_con_statusStatementItemRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowpm_con_statusStatementItemRow)
            Return rowpm_con_statusStatementItemRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysrl(ByVal srl As Integer) As pm_con_statusStatementItemRow
            Return CType(Me.Rows.Find(New Object() {srl}),pm_con_statusStatementItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As pm_con_statusStatementItemDataTable = CType(MyBase.Clone,pm_con_statusStatementItemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New pm_con_statusStatementItemDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsrl = MyBase.Columns("srl")
            Me.columnکد = MyBase.Columns("کد")
            Me.columnعنوان = MyBase.Columns("عنوان")
            Me.columnتعداد = MyBase.Columns("تعداد")
            Me.columnتائید = MyBase.Columns("تائید")
            Me.columnقیمت = MyBase.Columns("قیمت")
            Me.columncalcprice = MyBase.Columns("calcprice")
            Me.columnConfirm_Price = MyBase.Columns("Confirm_Price")
            Me.columnConfirm_Amount = MyBase.Columns("Confirm_Amount")
            Me.columnIs_holiday = MyBase.Columns("Is_holiday")
            Me.columnis_cancle = MyBase.Columns("is_cancle")
            Me.columnis_night = MyBase.Columns("is_night")
            Me.columnis_beforeCancle = MyBase.Columns("is_beforeCancle")
            Me.columnsrl_contract = MyBase.Columns("srl_contract")
            Me.columnsrl_source = MyBase.Columns("srl_source")
            Me.columnقیمت_کل = MyBase.Columns("قیمت کل")
            Me.columnSSPM = MyBase.Columns("SSPM")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsrl = New Global.System.Data.DataColumn("srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl)
            Me.columnکد = New Global.System.Data.DataColumn("کد", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnکد)
            Me.columnعنوان = New Global.System.Data.DataColumn("عنوان", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnعنوان)
            Me.columnتعداد = New Global.System.Data.DataColumn("تعداد", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتعداد)
            Me.columnتائید = New Global.System.Data.DataColumn("تائید", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتائید)
            Me.columnقیمت = New Global.System.Data.DataColumn("قیمت", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnقیمت)
            Me.columncalcprice = New Global.System.Data.DataColumn("calcprice", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncalcprice)
            Me.columnConfirm_Price = New Global.System.Data.DataColumn("Confirm_Price", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConfirm_Price)
            Me.columnConfirm_Amount = New Global.System.Data.DataColumn("Confirm_Amount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConfirm_Amount)
            Me.columnIs_holiday = New Global.System.Data.DataColumn("Is_holiday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIs_holiday)
            Me.columnis_cancle = New Global.System.Data.DataColumn("is_cancle", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnis_cancle)
            Me.columnis_night = New Global.System.Data.DataColumn("is_night", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnis_night)
            Me.columnis_beforeCancle = New Global.System.Data.DataColumn("is_beforeCancle", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnis_beforeCancle)
            Me.columnsrl_contract = New Global.System.Data.DataColumn("srl_contract", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_contract)
            Me.columnsrl_source = New Global.System.Data.DataColumn("srl_source", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_source)
            Me.columnقیمت_کل = New Global.System.Data.DataColumn("قیمت کل", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnقیمت_کل)
            Me.columnSSPM = New Global.System.Data.DataColumn("SSPM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSSPM)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsrl}, true))
            Me.columnsrl.AutoIncrement = true
            Me.columnsrl.AutoIncrementSeed = -1
            Me.columnsrl.AutoIncrementStep = -1
            Me.columnsrl.AllowDBNull = false
            Me.columnsrl.ReadOnly = true
            Me.columnsrl.Unique = true
            Me.columnکد.MaxLength = 50
            Me.columnعنوان.MaxLength = 500
            Me.columnقیمت_کل.ReadOnly = true
            Me.columnSSPM.ReadOnly = true
            Me.columnSSPM.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newpm_con_statusStatementItemRow() As pm_con_statusStatementItemRow
            Return CType(Me.NewRow,pm_con_statusStatementItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New pm_con_statusStatementItemRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(pm_con_statusStatementItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pm_con_statusStatementItemRowChangedEvent) Is Nothing) Then
                RaiseEvent pm_con_statusStatementItemRowChanged(Me, New pm_con_statusStatementItemRowChangeEvent(CType(e.Row,pm_con_statusStatementItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pm_con_statusStatementItemRowChangingEvent) Is Nothing) Then
                RaiseEvent pm_con_statusStatementItemRowChanging(Me, New pm_con_statusStatementItemRowChangeEvent(CType(e.Row,pm_con_statusStatementItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pm_con_statusStatementItemRowDeletedEvent) Is Nothing) Then
                RaiseEvent pm_con_statusStatementItemRowDeleted(Me, New pm_con_statusStatementItemRowChangeEvent(CType(e.Row,pm_con_statusStatementItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pm_con_statusStatementItemRowDeletingEvent) Is Nothing) Then
                RaiseEvent pm_con_statusStatementItemRowDeleting(Me, New pm_con_statusStatementItemRowChangeEvent(CType(e.Row,pm_con_statusStatementItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removepm_con_statusStatementItemRow(ByVal row As pm_con_statusStatementItemRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "pm_con_statusStatementItemDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Rp_Pm_MonthReport_OmoorVahedDataTable
        Inherits Global.System.Data.TypedTableBase(Of Rp_Pm_MonthReport_OmoorVahedRow)
        
        Private columnامور As Global.System.Data.DataColumn
        
        Private columnواحد As Global.System.Data.DataColumn
        
        Private columnبررسی_کارمازاد As Global.System.Data.DataColumn
        
        Private columnبررسی_PM As Global.System.Data.DataColumn
        
        Private columnتائید_کارمازاد As Global.System.Data.DataColumn
        
        Private columnتائید_PM As Global.System.Data.DataColumn
        
        Private columnردشده_کارمازاد As Global.System.Data.DataColumn
        
        Private columnردشده_PM As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Rp_Pm_MonthReport_OmoorVahed"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property امورColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnامور
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property واحدColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnواحد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property بررسی_کارمازادColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnبررسی_کارمازاد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property بررسی_PMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnبررسی_PM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تائید_کارمازادColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتائید_کارمازاد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تائید_PMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتائید_PM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ردشده_کارمازادColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnردشده_کارمازاد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ردشده_PMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnردشده_PM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Rp_Pm_MonthReport_OmoorVahedRow
            Get
                Return CType(Me.Rows(index),Rp_Pm_MonthReport_OmoorVahedRow)
            End Get
        End Property
        
        Public Event Rp_Pm_MonthReport_OmoorVahedRowChanging As Rp_Pm_MonthReport_OmoorVahedRowChangeEventHandler
        
        Public Event Rp_Pm_MonthReport_OmoorVahedRowChanged As Rp_Pm_MonthReport_OmoorVahedRowChangeEventHandler
        
        Public Event Rp_Pm_MonthReport_OmoorVahedRowDeleting As Rp_Pm_MonthReport_OmoorVahedRowChangeEventHandler
        
        Public Event Rp_Pm_MonthReport_OmoorVahedRowDeleted As Rp_Pm_MonthReport_OmoorVahedRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRp_Pm_MonthReport_OmoorVahedRow(ByVal row As Rp_Pm_MonthReport_OmoorVahedRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRp_Pm_MonthReport_OmoorVahedRow(ByVal امور As String, ByVal واحد As String, ByVal بررسی_کارمازاد As Long, ByVal بررسی_PM As Long, ByVal تائید_کارمازاد As Long, ByVal تائید_PM As Long, ByVal ردشده_کارمازاد As Long, ByVal ردشده_PM As Long) As Rp_Pm_MonthReport_OmoorVahedRow
            Dim rowRp_Pm_MonthReport_OmoorVahedRow As Rp_Pm_MonthReport_OmoorVahedRow = CType(Me.NewRow,Rp_Pm_MonthReport_OmoorVahedRow)
            Dim columnValuesArray() As Object = New Object() {امور, واحد, بررسی_کارمازاد, بررسی_PM, تائید_کارمازاد, تائید_PM, ردشده_کارمازاد, ردشده_PM}
            rowRp_Pm_MonthReport_OmoorVahedRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRp_Pm_MonthReport_OmoorVahedRow)
            Return rowRp_Pm_MonthReport_OmoorVahedRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Rp_Pm_MonthReport_OmoorVahedDataTable = CType(MyBase.Clone,Rp_Pm_MonthReport_OmoorVahedDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Rp_Pm_MonthReport_OmoorVahedDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnامور = MyBase.Columns("امور")
            Me.columnواحد = MyBase.Columns("واحد")
            Me.columnبررسی_کارمازاد = MyBase.Columns("بررسی کارمازاد")
            Me.columnبررسی_PM = MyBase.Columns("بررسی PM")
            Me.columnتائید_کارمازاد = MyBase.Columns("تائید کارمازاد")
            Me.columnتائید_PM = MyBase.Columns("تائید PM")
            Me.columnردشده_کارمازاد = MyBase.Columns("ردشده کارمازاد")
            Me.columnردشده_PM = MyBase.Columns("ردشده PM")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnامور = New Global.System.Data.DataColumn("امور", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnامور)
            Me.columnواحد = New Global.System.Data.DataColumn("واحد", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnواحد)
            Me.columnبررسی_کارمازاد = New Global.System.Data.DataColumn("بررسی کارمازاد", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnبررسی_کارمازاد)
            Me.columnبررسی_PM = New Global.System.Data.DataColumn("بررسی PM", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnبررسی_PM)
            Me.columnتائید_کارمازاد = New Global.System.Data.DataColumn("تائید کارمازاد", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتائید_کارمازاد)
            Me.columnتائید_PM = New Global.System.Data.DataColumn("تائید PM", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتائید_PM)
            Me.columnردشده_کارمازاد = New Global.System.Data.DataColumn("ردشده کارمازاد", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnردشده_کارمازاد)
            Me.columnردشده_PM = New Global.System.Data.DataColumn("ردشده PM", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnردشده_PM)
            Me.columnامور.ReadOnly = true
            Me.columnامور.MaxLength = 601
            Me.columnواحد.MaxLength = 400
            Me.columnبررسی_کارمازاد.ReadOnly = true
            Me.columnبررسی_PM.ReadOnly = true
            Me.columnتائید_کارمازاد.ReadOnly = true
            Me.columnتائید_PM.ReadOnly = true
            Me.columnردشده_کارمازاد.ReadOnly = true
            Me.columnردشده_PM.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRp_Pm_MonthReport_OmoorVahedRow() As Rp_Pm_MonthReport_OmoorVahedRow
            Return CType(Me.NewRow,Rp_Pm_MonthReport_OmoorVahedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Rp_Pm_MonthReport_OmoorVahedRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Rp_Pm_MonthReport_OmoorVahedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Rp_Pm_MonthReport_OmoorVahedRowChangedEvent) Is Nothing) Then
                RaiseEvent Rp_Pm_MonthReport_OmoorVahedRowChanged(Me, New Rp_Pm_MonthReport_OmoorVahedRowChangeEvent(CType(e.Row,Rp_Pm_MonthReport_OmoorVahedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Rp_Pm_MonthReport_OmoorVahedRowChangingEvent) Is Nothing) Then
                RaiseEvent Rp_Pm_MonthReport_OmoorVahedRowChanging(Me, New Rp_Pm_MonthReport_OmoorVahedRowChangeEvent(CType(e.Row,Rp_Pm_MonthReport_OmoorVahedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Rp_Pm_MonthReport_OmoorVahedRowDeletedEvent) Is Nothing) Then
                RaiseEvent Rp_Pm_MonthReport_OmoorVahedRowDeleted(Me, New Rp_Pm_MonthReport_OmoorVahedRowChangeEvent(CType(e.Row,Rp_Pm_MonthReport_OmoorVahedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Rp_Pm_MonthReport_OmoorVahedRowDeletingEvent) Is Nothing) Then
                RaiseEvent Rp_Pm_MonthReport_OmoorVahedRowDeleting(Me, New Rp_Pm_MonthReport_OmoorVahedRowChangeEvent(CType(e.Row,Rp_Pm_MonthReport_OmoorVahedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRp_Pm_MonthReport_OmoorVahedRow(ByVal row As Rp_Pm_MonthReport_OmoorVahedRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Rp_Pm_MonthReport_OmoorVahedDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Con_MonthReport_DetailDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Con_MonthReport_DetailRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnشماره As Global.System.Data.DataColumn
        
        Private columnشماره_نامه As Global.System.Data.DataColumn
        
        Private columnدوره As Global.System.Data.DataColumn
        
        Private columnگروه As Global.System.Data.DataColumn
        
        Private columnنام_واحد As Global.System.Data.DataColumn
        
        Private columnنوع As Global.System.Data.DataColumn
        
        Private columnتاریخ_ارسال As Global.System.Data.DataColumn
        
        Private columnتاریخ_تائید As Global.System.Data.DataColumn
        
        Private columnتاریخ_ERP As Global.System.Data.DataColumn
        
        Private columnشماره_پیگیری As Global.System.Data.DataColumn
        
        Private columnشماره_وضعیت As Global.System.Data.DataColumn
        
        Private columnشماره_سند As Global.System.Data.DataColumn
        
        Private columnتوضیحات As Global.System.Data.DataColumn
        
        Private columnقرارداد As Global.System.Data.DataColumn
        
        Private columnIsCancle As Global.System.Data.DataColumn
        
        Private columnSrl_Con_Contract As Global.System.Data.DataColumn
        
        Private columnSrl_Pm_Con_source As Global.System.Data.DataColumn
        
        Private columnSrl_Pm_PostType As Global.System.Data.DataColumn
        
        Private columnSrl_Pm_Vahed As Global.System.Data.DataColumn
        
        Private columnSrl_SubmitUser As Global.System.Data.DataColumn
        
        Private columnSubmitDate As Global.System.Data.DataColumn
        
        Private columnsrl_Statusstatementtype As Global.System.Data.DataColumn
        
        Private columnمبلغ As Global.System.Data.DataColumn
        
        Private columnمبلغ_تائید As Global.System.Data.DataColumn
        
        Private columnMonth As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Con_MonthReport_Detail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شمارهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشماره
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شماره_نامهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشماره_نامه
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property دورهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnدوره
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property گروهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnگروه
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نام_واحدColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام_واحد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نوعColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنوع
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاریخ_ارسالColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاریخ_ارسال
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاریخ_تائیدColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاریخ_تائید
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاریخ_ERPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاریخ_ERP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شماره_پیگیریColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشماره_پیگیری
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شماره_وضعیتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشماره_وضعیت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شماره_سندColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشماره_سند
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property توضیحاتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتوضیحات
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property قراردادColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnقرارداد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsCancleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsCancle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_Con_ContractColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_Con_Contract
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_Pm_Con_sourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_Pm_Con_source
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_Pm_PostTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_Pm_PostType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_Pm_VahedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_Pm_Vahed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_SubmitUserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_SubmitUser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubmitDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubmitDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_StatusstatementtypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_Statusstatementtype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property مبلغColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnمبلغ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property مبلغ_تائیدColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnمبلغ_تائید
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Con_MonthReport_DetailRow
            Get
                Return CType(Me.Rows(index),Pm_Con_MonthReport_DetailRow)
            End Get
        End Property
        
        Public Event Pm_Con_MonthReport_DetailRowChanging As Pm_Con_MonthReport_DetailRowChangeEventHandler
        
        Public Event Pm_Con_MonthReport_DetailRowChanged As Pm_Con_MonthReport_DetailRowChangeEventHandler
        
        Public Event Pm_Con_MonthReport_DetailRowDeleting As Pm_Con_MonthReport_DetailRowChangeEventHandler
        
        Public Event Pm_Con_MonthReport_DetailRowDeleted As Pm_Con_MonthReport_DetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Con_MonthReport_DetailRow(ByVal row As Pm_Con_MonthReport_DetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Con_MonthReport_DetailRow( _
                    ByVal شماره As Integer,  _
                    ByVal شماره_نامه As String,  _
                    ByVal دوره As String,  _
                    ByVal گروه As String,  _
                    ByVal نام_واحد As String,  _
                    ByVal نوع As String,  _
                    ByVal تاریخ_ارسال As String,  _
                    ByVal تاریخ_تائید As String,  _
                    ByVal تاریخ_ERP As String,  _
                    ByVal شماره_پیگیری As String,  _
                    ByVal شماره_وضعیت As String,  _
                    ByVal شماره_سند As String,  _
                    ByVal توضیحات As String,  _
                    ByVal قرارداد As String,  _
                    ByVal IsCancle As Boolean,  _
                    ByVal Srl_Con_Contract As Integer,  _
                    ByVal Srl_Pm_Con_source As Integer,  _
                    ByVal Srl_Pm_PostType As Integer,  _
                    ByVal Srl_Pm_Vahed As Integer,  _
                    ByVal Srl_SubmitUser As Integer,  _
                    ByVal SubmitDate As Date,  _
                    ByVal srl_Statusstatementtype As Integer,  _
                    ByVal مبلغ As Long,  _
                    ByVal مبلغ_تائید As Long,  _
                    ByVal Month As Integer) As Pm_Con_MonthReport_DetailRow
            Dim rowPm_Con_MonthReport_DetailRow As Pm_Con_MonthReport_DetailRow = CType(Me.NewRow,Pm_Con_MonthReport_DetailRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, شماره, شماره_نامه, دوره, گروه, نام_واحد, نوع, تاریخ_ارسال, تاریخ_تائید, تاریخ_ERP, شماره_پیگیری, شماره_وضعیت, شماره_سند, توضیحات, قرارداد, IsCancle, Srl_Con_Contract, Srl_Pm_Con_source, Srl_Pm_PostType, Srl_Pm_Vahed, Srl_SubmitUser, SubmitDate, srl_Statusstatementtype, مبلغ, مبلغ_تائید, Month}
            rowPm_Con_MonthReport_DetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Con_MonthReport_DetailRow)
            Return rowPm_Con_MonthReport_DetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As Pm_Con_MonthReport_DetailRow
            Return CType(Me.Rows.Find(New Object() {Srl}),Pm_Con_MonthReport_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Con_MonthReport_DetailDataTable = CType(MyBase.Clone,Pm_Con_MonthReport_DetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Con_MonthReport_DetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnشماره = MyBase.Columns("شماره")
            Me.columnشماره_نامه = MyBase.Columns("شماره نامه")
            Me.columnدوره = MyBase.Columns("دوره")
            Me.columnگروه = MyBase.Columns("گروه")
            Me.columnنام_واحد = MyBase.Columns("نام واحد")
            Me.columnنوع = MyBase.Columns("نوع")
            Me.columnتاریخ_ارسال = MyBase.Columns("تاریخ ارسال")
            Me.columnتاریخ_تائید = MyBase.Columns("تاریخ تائید")
            Me.columnتاریخ_ERP = MyBase.Columns("تاریخ ERP")
            Me.columnشماره_پیگیری = MyBase.Columns("شماره پیگیری")
            Me.columnشماره_وضعیت = MyBase.Columns("شماره وضعیت")
            Me.columnشماره_سند = MyBase.Columns("شماره سند")
            Me.columnتوضیحات = MyBase.Columns("توضیحات")
            Me.columnقرارداد = MyBase.Columns("قرارداد")
            Me.columnIsCancle = MyBase.Columns("IsCancle")
            Me.columnSrl_Con_Contract = MyBase.Columns("Srl_Con_Contract")
            Me.columnSrl_Pm_Con_source = MyBase.Columns("Srl_Pm_Con_source")
            Me.columnSrl_Pm_PostType = MyBase.Columns("Srl_Pm_PostType")
            Me.columnSrl_Pm_Vahed = MyBase.Columns("Srl_Pm_Vahed")
            Me.columnSrl_SubmitUser = MyBase.Columns("Srl_SubmitUser")
            Me.columnSubmitDate = MyBase.Columns("SubmitDate")
            Me.columnsrl_Statusstatementtype = MyBase.Columns("srl_Statusstatementtype")
            Me.columnمبلغ = MyBase.Columns("مبلغ")
            Me.columnمبلغ_تائید = MyBase.Columns("مبلغ تائید")
            Me.columnMonth = MyBase.Columns("Month")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnشماره = New Global.System.Data.DataColumn("شماره", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشماره)
            Me.columnشماره_نامه = New Global.System.Data.DataColumn("شماره نامه", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشماره_نامه)
            Me.columnدوره = New Global.System.Data.DataColumn("دوره", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnدوره)
            Me.columnگروه = New Global.System.Data.DataColumn("گروه", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnگروه)
            Me.columnنام_واحد = New Global.System.Data.DataColumn("نام واحد", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام_واحد)
            Me.columnنوع = New Global.System.Data.DataColumn("نوع", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنوع)
            Me.columnتاریخ_ارسال = New Global.System.Data.DataColumn("تاریخ ارسال", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاریخ_ارسال)
            Me.columnتاریخ_تائید = New Global.System.Data.DataColumn("تاریخ تائید", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاریخ_تائید)
            Me.columnتاریخ_ERP = New Global.System.Data.DataColumn("تاریخ ERP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاریخ_ERP)
            Me.columnشماره_پیگیری = New Global.System.Data.DataColumn("شماره پیگیری", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشماره_پیگیری)
            Me.columnشماره_وضعیت = New Global.System.Data.DataColumn("شماره وضعیت", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشماره_وضعیت)
            Me.columnشماره_سند = New Global.System.Data.DataColumn("شماره سند", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشماره_سند)
            Me.columnتوضیحات = New Global.System.Data.DataColumn("توضیحات", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتوضیحات)
            Me.columnقرارداد = New Global.System.Data.DataColumn("قرارداد", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnقرارداد)
            Me.columnIsCancle = New Global.System.Data.DataColumn("IsCancle", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsCancle)
            Me.columnSrl_Con_Contract = New Global.System.Data.DataColumn("Srl_Con_Contract", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_Con_Contract)
            Me.columnSrl_Pm_Con_source = New Global.System.Data.DataColumn("Srl_Pm_Con_source", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_Pm_Con_source)
            Me.columnSrl_Pm_PostType = New Global.System.Data.DataColumn("Srl_Pm_PostType", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_Pm_PostType)
            Me.columnSrl_Pm_Vahed = New Global.System.Data.DataColumn("Srl_Pm_Vahed", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_Pm_Vahed)
            Me.columnSrl_SubmitUser = New Global.System.Data.DataColumn("Srl_SubmitUser", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_SubmitUser)
            Me.columnSubmitDate = New Global.System.Data.DataColumn("SubmitDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubmitDate)
            Me.columnsrl_Statusstatementtype = New Global.System.Data.DataColumn("srl_Statusstatementtype", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_Statusstatementtype)
            Me.columnمبلغ = New Global.System.Data.DataColumn("مبلغ", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnمبلغ)
            Me.columnمبلغ_تائید = New Global.System.Data.DataColumn("مبلغ تائید", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnمبلغ_تائید)
            Me.columnMonth = New Global.System.Data.DataColumn("Month", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonth)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnSrl.AutoIncrement = true
            Me.columnSrl.AutoIncrementSeed = -1
            Me.columnSrl.AutoIncrementStep = -1
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.ReadOnly = true
            Me.columnSrl.Unique = true
            Me.columnشماره_نامه.MaxLength = 50
            Me.columnدوره.ReadOnly = true
            Me.columnدوره.MaxLength = 61
            Me.columnگروه.ReadOnly = true
            Me.columnگروه.MaxLength = 601
            Me.columnنام_واحد.MaxLength = 400
            Me.columnنوع.MaxLength = 50
            Me.columnتاریخ_ارسال.MaxLength = 10
            Me.columnتاریخ_تائید.MaxLength = 10
            Me.columnتاریخ_ERP.MaxLength = 10
            Me.columnشماره_پیگیری.MaxLength = 50
            Me.columnشماره_وضعیت.MaxLength = 50
            Me.columnشماره_سند.MaxLength = 50
            Me.columnتوضیحات.MaxLength = 500
            Me.columnقرارداد.MaxLength = 500
            Me.columnمبلغ.ReadOnly = true
            Me.columnمبلغ_تائید.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Con_MonthReport_DetailRow() As Pm_Con_MonthReport_DetailRow
            Return CType(Me.NewRow,Pm_Con_MonthReport_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Con_MonthReport_DetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Con_MonthReport_DetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Con_MonthReport_DetailRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_MonthReport_DetailRowChanged(Me, New Pm_Con_MonthReport_DetailRowChangeEvent(CType(e.Row,Pm_Con_MonthReport_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Con_MonthReport_DetailRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_MonthReport_DetailRowChanging(Me, New Pm_Con_MonthReport_DetailRowChangeEvent(CType(e.Row,Pm_Con_MonthReport_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Con_MonthReport_DetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_MonthReport_DetailRowDeleted(Me, New Pm_Con_MonthReport_DetailRowChangeEvent(CType(e.Row,Pm_Con_MonthReport_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Con_MonthReport_DetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_MonthReport_DetailRowDeleting(Me, New Pm_Con_MonthReport_DetailRowChangeEvent(CType(e.Row,Pm_Con_MonthReport_DetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Con_MonthReport_DetailRow(ByVal row As Pm_Con_MonthReport_DetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Con_MonthReport_DetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Con_SaveEzafekarDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Con_SaveEzafekarRow)
        
        Private columnsrl As Global.System.Data.DataColumn
        
        Private columnنام_واحد As Global.System.Data.DataColumn
        
        Private columnدرصد_ذخیره As Global.System.Data.DataColumn
        
        Private columnsrl_vahed As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Con_SaveEzafekar"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نام_واحدColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام_واحد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property درصد_ذخیرهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnدرصد_ذخیره
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_vahedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_vahed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Con_SaveEzafekarRow
            Get
                Return CType(Me.Rows(index),Pm_Con_SaveEzafekarRow)
            End Get
        End Property
        
        Public Event Pm_Con_SaveEzafekarRowChanging As Pm_Con_SaveEzafekarRowChangeEventHandler
        
        Public Event Pm_Con_SaveEzafekarRowChanged As Pm_Con_SaveEzafekarRowChangeEventHandler
        
        Public Event Pm_Con_SaveEzafekarRowDeleting As Pm_Con_SaveEzafekarRowChangeEventHandler
        
        Public Event Pm_Con_SaveEzafekarRowDeleted As Pm_Con_SaveEzafekarRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Con_SaveEzafekarRow(ByVal row As Pm_Con_SaveEzafekarRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Con_SaveEzafekarRow(ByVal نام_واحد As String, ByVal درصد_ذخیره As Decimal) As Pm_Con_SaveEzafekarRow
            Dim rowPm_Con_SaveEzafekarRow As Pm_Con_SaveEzafekarRow = CType(Me.NewRow,Pm_Con_SaveEzafekarRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, نام_واحد, درصد_ذخیره, Nothing}
            rowPm_Con_SaveEzafekarRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Con_SaveEzafekarRow)
            Return rowPm_Con_SaveEzafekarRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysrlsrl_vahed(ByVal srl As Integer, ByVal srl_vahed As Integer) As Pm_Con_SaveEzafekarRow
            Return CType(Me.Rows.Find(New Object() {srl, srl_vahed}),Pm_Con_SaveEzafekarRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Con_SaveEzafekarDataTable = CType(MyBase.Clone,Pm_Con_SaveEzafekarDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Con_SaveEzafekarDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsrl = MyBase.Columns("srl")
            Me.columnنام_واحد = MyBase.Columns("نام واحد")
            Me.columnدرصد_ذخیره = MyBase.Columns("درصد ذخیره")
            Me.columnsrl_vahed = MyBase.Columns("srl_vahed")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsrl = New Global.System.Data.DataColumn("srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl)
            Me.columnنام_واحد = New Global.System.Data.DataColumn("نام واحد", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام_واحد)
            Me.columnدرصد_ذخیره = New Global.System.Data.DataColumn("درصد ذخیره", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnدرصد_ذخیره)
            Me.columnsrl_vahed = New Global.System.Data.DataColumn("srl_vahed", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_vahed)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsrl, Me.columnsrl_vahed}, true))
            Me.columnsrl.AutoIncrement = true
            Me.columnsrl.AutoIncrementSeed = -1
            Me.columnsrl.AutoIncrementStep = -1
            Me.columnsrl.AllowDBNull = false
            Me.columnsrl.ReadOnly = true
            Me.columnنام_واحد.MaxLength = 400
            Me.columnsrl_vahed.AutoIncrement = true
            Me.columnsrl_vahed.AutoIncrementSeed = -1
            Me.columnsrl_vahed.AutoIncrementStep = -1
            Me.columnsrl_vahed.AllowDBNull = false
            Me.columnsrl_vahed.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Con_SaveEzafekarRow() As Pm_Con_SaveEzafekarRow
            Return CType(Me.NewRow,Pm_Con_SaveEzafekarRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Con_SaveEzafekarRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Con_SaveEzafekarRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Con_SaveEzafekarRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_SaveEzafekarRowChanged(Me, New Pm_Con_SaveEzafekarRowChangeEvent(CType(e.Row,Pm_Con_SaveEzafekarRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Con_SaveEzafekarRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_SaveEzafekarRowChanging(Me, New Pm_Con_SaveEzafekarRowChangeEvent(CType(e.Row,Pm_Con_SaveEzafekarRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Con_SaveEzafekarRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_SaveEzafekarRowDeleted(Me, New Pm_Con_SaveEzafekarRowChangeEvent(CType(e.Row,Pm_Con_SaveEzafekarRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Con_SaveEzafekarRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_SaveEzafekarRowDeleting(Me, New Pm_Con_SaveEzafekarRowChangeEvent(CType(e.Row,Pm_Con_SaveEzafekarRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Con_SaveEzafekarRow(ByVal row As Pm_Con_SaveEzafekarRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Con_SaveEzafekarDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_con_MonthReportGrouupConfirmPriceDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_con_MonthReportGrouupConfirmPriceRow)
        
        Private columnsrl As Global.System.Data.DataColumn
        
        Private columnنام_گروه As Global.System.Data.DataColumn
        
        Private columnمبلغ_ارسالی As Global.System.Data.DataColumn
        
        Private columnمبلغ_تائید_شده As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_con_MonthReportGrouupConfirmPrice"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نام_گروهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام_گروه
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property مبلغ_ارسالیColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnمبلغ_ارسالی
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property مبلغ_تائید_شدهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnمبلغ_تائید_شده
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_con_MonthReportGrouupConfirmPriceRow
            Get
                Return CType(Me.Rows(index),Pm_con_MonthReportGrouupConfirmPriceRow)
            End Get
        End Property
        
        Public Event Pm_con_MonthReportGrouupConfirmPriceRowChanging As Pm_con_MonthReportGrouupConfirmPriceRowChangeEventHandler
        
        Public Event Pm_con_MonthReportGrouupConfirmPriceRowChanged As Pm_con_MonthReportGrouupConfirmPriceRowChangeEventHandler
        
        Public Event Pm_con_MonthReportGrouupConfirmPriceRowDeleting As Pm_con_MonthReportGrouupConfirmPriceRowChangeEventHandler
        
        Public Event Pm_con_MonthReportGrouupConfirmPriceRowDeleted As Pm_con_MonthReportGrouupConfirmPriceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_con_MonthReportGrouupConfirmPriceRow(ByVal row As Pm_con_MonthReportGrouupConfirmPriceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_con_MonthReportGrouupConfirmPriceRow(ByVal نام_گروه As String, ByVal مبلغ_ارسالی As Long, ByVal مبلغ_تائید_شده As Long) As Pm_con_MonthReportGrouupConfirmPriceRow
            Dim rowPm_con_MonthReportGrouupConfirmPriceRow As Pm_con_MonthReportGrouupConfirmPriceRow = CType(Me.NewRow,Pm_con_MonthReportGrouupConfirmPriceRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, نام_گروه, مبلغ_ارسالی, مبلغ_تائید_شده}
            rowPm_con_MonthReportGrouupConfirmPriceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_con_MonthReportGrouupConfirmPriceRow)
            Return rowPm_con_MonthReportGrouupConfirmPriceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysrl(ByVal srl As Integer) As Pm_con_MonthReportGrouupConfirmPriceRow
            Return CType(Me.Rows.Find(New Object() {srl}),Pm_con_MonthReportGrouupConfirmPriceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_con_MonthReportGrouupConfirmPriceDataTable = CType(MyBase.Clone,Pm_con_MonthReportGrouupConfirmPriceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_con_MonthReportGrouupConfirmPriceDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsrl = MyBase.Columns("srl")
            Me.columnنام_گروه = MyBase.Columns("نام گروه")
            Me.columnمبلغ_ارسالی = MyBase.Columns("مبلغ ارسالی")
            Me.columnمبلغ_تائید_شده = MyBase.Columns("مبلغ تائید شده")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsrl = New Global.System.Data.DataColumn("srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl)
            Me.columnنام_گروه = New Global.System.Data.DataColumn("نام گروه", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام_گروه)
            Me.columnمبلغ_ارسالی = New Global.System.Data.DataColumn("مبلغ ارسالی", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnمبلغ_ارسالی)
            Me.columnمبلغ_تائید_شده = New Global.System.Data.DataColumn("مبلغ تائید شده", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnمبلغ_تائید_شده)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsrl}, true))
            Me.columnsrl.AutoIncrement = true
            Me.columnsrl.AutoIncrementSeed = -1
            Me.columnsrl.AutoIncrementStep = -1
            Me.columnsrl.AllowDBNull = false
            Me.columnsrl.ReadOnly = true
            Me.columnsrl.Unique = true
            Me.columnنام_گروه.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_con_MonthReportGrouupConfirmPriceRow() As Pm_con_MonthReportGrouupConfirmPriceRow
            Return CType(Me.NewRow,Pm_con_MonthReportGrouupConfirmPriceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_con_MonthReportGrouupConfirmPriceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_con_MonthReportGrouupConfirmPriceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_con_MonthReportGrouupConfirmPriceRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_con_MonthReportGrouupConfirmPriceRowChanged(Me, New Pm_con_MonthReportGrouupConfirmPriceRowChangeEvent(CType(e.Row,Pm_con_MonthReportGrouupConfirmPriceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_con_MonthReportGrouupConfirmPriceRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_con_MonthReportGrouupConfirmPriceRowChanging(Me, New Pm_con_MonthReportGrouupConfirmPriceRowChangeEvent(CType(e.Row,Pm_con_MonthReportGrouupConfirmPriceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_con_MonthReportGrouupConfirmPriceRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_con_MonthReportGrouupConfirmPriceRowDeleted(Me, New Pm_con_MonthReportGrouupConfirmPriceRowChangeEvent(CType(e.Row,Pm_con_MonthReportGrouupConfirmPriceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_con_MonthReportGrouupConfirmPriceRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_con_MonthReportGrouupConfirmPriceRowDeleting(Me, New Pm_con_MonthReportGrouupConfirmPriceRowChangeEvent(CType(e.Row,Pm_con_MonthReportGrouupConfirmPriceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_con_MonthReportGrouupConfirmPriceRow(ByVal row As Pm_con_MonthReportGrouupConfirmPriceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_con_MonthReportGrouupConfirmPriceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_MonthReportDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_MonthReportRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnشماره As Global.System.Data.DataColumn
        
        Private columnشماره_نامه As Global.System.Data.DataColumn
        
        Private columnدوره As Global.System.Data.DataColumn
        
        Private columnگروه As Global.System.Data.DataColumn
        
        Private columnنام_واحد As Global.System.Data.DataColumn
        
        Private columnنوع As Global.System.Data.DataColumn
        
        Private columnتاریخ_ارسال As Global.System.Data.DataColumn
        
        Private columnتاریخ_تائید As Global.System.Data.DataColumn
        
        Private columnتاریخ_ERP As Global.System.Data.DataColumn
        
        Private columnشماره_پیگیری As Global.System.Data.DataColumn
        
        Private columnشماره_وضعیت As Global.System.Data.DataColumn
        
        Private columnشماره_سند As Global.System.Data.DataColumn
        
        Private columnتوضیحات As Global.System.Data.DataColumn
        
        Private columnIsCancle As Global.System.Data.DataColumn
        
        Private columnSrl_Con_Contract As Global.System.Data.DataColumn
        
        Private columnSrl_Pm_Con_source As Global.System.Data.DataColumn
        
        Private columnSrl_Pm_PostType As Global.System.Data.DataColumn
        
        Private columnSrl_Pm_Vahed As Global.System.Data.DataColumn
        
        Private columnSrl_SubmitUser As Global.System.Data.DataColumn
        
        Private columnSubmitDate As Global.System.Data.DataColumn
        
        Private columnsrl_Statusstatementtype As Global.System.Data.DataColumn
        
        Private columnتائیدی As Global.System.Data.DataColumn
        
        Private columnتفاوت As Global.System.Data.DataColumn
        
        Private columnمبلغ As Global.System.Data.DataColumn
        
        Private columnمبلغ_تائید As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_MonthReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شمارهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشماره
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شماره_نامهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشماره_نامه
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property دورهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnدوره
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property گروهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnگروه
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نام_واحدColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام_واحد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نوعColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنوع
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاریخ_ارسالColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاریخ_ارسال
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاریخ_تائیدColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاریخ_تائید
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاریخ_ERPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاریخ_ERP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شماره_پیگیریColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشماره_پیگیری
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شماره_وضعیتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشماره_وضعیت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شماره_سندColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشماره_سند
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property توضیحاتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتوضیحات
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsCancleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsCancle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_Con_ContractColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_Con_Contract
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_Pm_Con_sourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_Pm_Con_source
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_Pm_PostTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_Pm_PostType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_Pm_VahedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_Pm_Vahed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_SubmitUserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_SubmitUser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubmitDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubmitDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_StatusstatementtypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_Statusstatementtype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تائیدیColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتائیدی
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تفاوتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتفاوت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property مبلغColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnمبلغ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property مبلغ_تائیدColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnمبلغ_تائید
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_MonthReportRow
            Get
                Return CType(Me.Rows(index),Pm_MonthReportRow)
            End Get
        End Property
        
        Public Event Pm_MonthReportRowChanging As Pm_MonthReportRowChangeEventHandler
        
        Public Event Pm_MonthReportRowChanged As Pm_MonthReportRowChangeEventHandler
        
        Public Event Pm_MonthReportRowDeleting As Pm_MonthReportRowChangeEventHandler
        
        Public Event Pm_MonthReportRowDeleted As Pm_MonthReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_MonthReportRow(ByVal row As Pm_MonthReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_MonthReportRow( _
                    ByVal شماره As Integer,  _
                    ByVal شماره_نامه As String,  _
                    ByVal دوره As String,  _
                    ByVal گروه As String,  _
                    ByVal نام_واحد As String,  _
                    ByVal نوع As String,  _
                    ByVal تاریخ_ارسال As String,  _
                    ByVal تاریخ_تائید As String,  _
                    ByVal تاریخ_ERP As String,  _
                    ByVal شماره_پیگیری As String,  _
                    ByVal شماره_وضعیت As String,  _
                    ByVal شماره_سند As String,  _
                    ByVal توضیحات As String,  _
                    ByVal IsCancle As Boolean,  _
                    ByVal Srl_Con_Contract As Integer,  _
                    ByVal Srl_Pm_Con_source As Integer,  _
                    ByVal Srl_Pm_PostType As Integer,  _
                    ByVal Srl_Pm_Vahed As Integer,  _
                    ByVal Srl_SubmitUser As Integer,  _
                    ByVal SubmitDate As Date,  _
                    ByVal srl_Statusstatementtype As Integer,  _
                    ByVal تائیدی As Double,  _
                    ByVal تفاوت As Double,  _
                    ByVal مبلغ As Long,  _
                    ByVal مبلغ_تائید As Long) As Pm_MonthReportRow
            Dim rowPm_MonthReportRow As Pm_MonthReportRow = CType(Me.NewRow,Pm_MonthReportRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, شماره, شماره_نامه, دوره, گروه, نام_واحد, نوع, تاریخ_ارسال, تاریخ_تائید, تاریخ_ERP, شماره_پیگیری, شماره_وضعیت, شماره_سند, توضیحات, IsCancle, Srl_Con_Contract, Srl_Pm_Con_source, Srl_Pm_PostType, Srl_Pm_Vahed, Srl_SubmitUser, SubmitDate, srl_Statusstatementtype, تائیدی, تفاوت, مبلغ, مبلغ_تائید}
            rowPm_MonthReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_MonthReportRow)
            Return rowPm_MonthReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As Pm_MonthReportRow
            Return CType(Me.Rows.Find(New Object() {Srl}),Pm_MonthReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_MonthReportDataTable = CType(MyBase.Clone,Pm_MonthReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_MonthReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnشماره = MyBase.Columns("شماره")
            Me.columnشماره_نامه = MyBase.Columns("شماره نامه")
            Me.columnدوره = MyBase.Columns("دوره")
            Me.columnگروه = MyBase.Columns("گروه")
            Me.columnنام_واحد = MyBase.Columns("نام واحد")
            Me.columnنوع = MyBase.Columns("نوع")
            Me.columnتاریخ_ارسال = MyBase.Columns("تاریخ ارسال")
            Me.columnتاریخ_تائید = MyBase.Columns("تاریخ تائید")
            Me.columnتاریخ_ERP = MyBase.Columns("تاریخ ERP")
            Me.columnشماره_پیگیری = MyBase.Columns("شماره پیگیری")
            Me.columnشماره_وضعیت = MyBase.Columns("شماره وضعیت")
            Me.columnشماره_سند = MyBase.Columns("شماره سند")
            Me.columnتوضیحات = MyBase.Columns("توضیحات")
            Me.columnIsCancle = MyBase.Columns("IsCancle")
            Me.columnSrl_Con_Contract = MyBase.Columns("Srl_Con_Contract")
            Me.columnSrl_Pm_Con_source = MyBase.Columns("Srl_Pm_Con_source")
            Me.columnSrl_Pm_PostType = MyBase.Columns("Srl_Pm_PostType")
            Me.columnSrl_Pm_Vahed = MyBase.Columns("Srl_Pm_Vahed")
            Me.columnSrl_SubmitUser = MyBase.Columns("Srl_SubmitUser")
            Me.columnSubmitDate = MyBase.Columns("SubmitDate")
            Me.columnsrl_Statusstatementtype = MyBase.Columns("srl_Statusstatementtype")
            Me.columnتائیدی = MyBase.Columns("تائیدی")
            Me.columnتفاوت = MyBase.Columns("تفاوت")
            Me.columnمبلغ = MyBase.Columns("مبلغ")
            Me.columnمبلغ_تائید = MyBase.Columns("مبلغ تائید")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnشماره = New Global.System.Data.DataColumn("شماره", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشماره)
            Me.columnشماره_نامه = New Global.System.Data.DataColumn("شماره نامه", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشماره_نامه)
            Me.columnدوره = New Global.System.Data.DataColumn("دوره", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnدوره)
            Me.columnگروه = New Global.System.Data.DataColumn("گروه", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnگروه)
            Me.columnنام_واحد = New Global.System.Data.DataColumn("نام واحد", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام_واحد)
            Me.columnنوع = New Global.System.Data.DataColumn("نوع", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنوع)
            Me.columnتاریخ_ارسال = New Global.System.Data.DataColumn("تاریخ ارسال", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاریخ_ارسال)
            Me.columnتاریخ_تائید = New Global.System.Data.DataColumn("تاریخ تائید", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاریخ_تائید)
            Me.columnتاریخ_ERP = New Global.System.Data.DataColumn("تاریخ ERP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاریخ_ERP)
            Me.columnشماره_پیگیری = New Global.System.Data.DataColumn("شماره پیگیری", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشماره_پیگیری)
            Me.columnشماره_وضعیت = New Global.System.Data.DataColumn("شماره وضعیت", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشماره_وضعیت)
            Me.columnشماره_سند = New Global.System.Data.DataColumn("شماره سند", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشماره_سند)
            Me.columnتوضیحات = New Global.System.Data.DataColumn("توضیحات", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتوضیحات)
            Me.columnIsCancle = New Global.System.Data.DataColumn("IsCancle", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsCancle)
            Me.columnSrl_Con_Contract = New Global.System.Data.DataColumn("Srl_Con_Contract", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_Con_Contract)
            Me.columnSrl_Pm_Con_source = New Global.System.Data.DataColumn("Srl_Pm_Con_source", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_Pm_Con_source)
            Me.columnSrl_Pm_PostType = New Global.System.Data.DataColumn("Srl_Pm_PostType", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_Pm_PostType)
            Me.columnSrl_Pm_Vahed = New Global.System.Data.DataColumn("Srl_Pm_Vahed", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_Pm_Vahed)
            Me.columnSrl_SubmitUser = New Global.System.Data.DataColumn("Srl_SubmitUser", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_SubmitUser)
            Me.columnSubmitDate = New Global.System.Data.DataColumn("SubmitDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubmitDate)
            Me.columnsrl_Statusstatementtype = New Global.System.Data.DataColumn("srl_Statusstatementtype", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_Statusstatementtype)
            Me.columnتائیدی = New Global.System.Data.DataColumn("تائیدی", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتائیدی)
            Me.columnتفاوت = New Global.System.Data.DataColumn("تفاوت", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتفاوت)
            Me.columnمبلغ = New Global.System.Data.DataColumn("مبلغ", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnمبلغ)
            Me.columnمبلغ_تائید = New Global.System.Data.DataColumn("مبلغ تائید", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnمبلغ_تائید)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnSrl.AutoIncrement = true
            Me.columnSrl.AutoIncrementSeed = -1
            Me.columnSrl.AutoIncrementStep = -1
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.ReadOnly = true
            Me.columnSrl.Unique = true
            Me.columnشماره_نامه.MaxLength = 50
            Me.columnدوره.ReadOnly = true
            Me.columnدوره.MaxLength = 61
            Me.columnگروه.ReadOnly = true
            Me.columnگروه.MaxLength = 601
            Me.columnنام_واحد.MaxLength = 400
            Me.columnنوع.MaxLength = 50
            Me.columnتاریخ_ارسال.MaxLength = 10
            Me.columnتاریخ_تائید.MaxLength = 10
            Me.columnتاریخ_ERP.MaxLength = 10
            Me.columnشماره_پیگیری.MaxLength = 50
            Me.columnشماره_وضعیت.MaxLength = 50
            Me.columnشماره_سند.MaxLength = 50
            Me.columnتوضیحات.MaxLength = 500
            Me.columnتائیدی.ReadOnly = true
            Me.columnتفاوت.ReadOnly = true
            Me.columnمبلغ.ReadOnly = true
            Me.columnمبلغ_تائید.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_MonthReportRow() As Pm_MonthReportRow
            Return CType(Me.NewRow,Pm_MonthReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_MonthReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_MonthReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_MonthReportRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_MonthReportRowChanged(Me, New Pm_MonthReportRowChangeEvent(CType(e.Row,Pm_MonthReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_MonthReportRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_MonthReportRowChanging(Me, New Pm_MonthReportRowChangeEvent(CType(e.Row,Pm_MonthReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_MonthReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_MonthReportRowDeleted(Me, New Pm_MonthReportRowChangeEvent(CType(e.Row,Pm_MonthReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_MonthReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_MonthReportRowDeleting(Me, New Pm_MonthReportRowChangeEvent(CType(e.Row,Pm_MonthReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_MonthReportRow(ByVal row As Pm_MonthReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_MonthReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Con_Non_MonthReportDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Con_Non_MonthReportRow)
        
        Private columnعنوان_آیتم As Global.System.Data.DataColumn
        
        Private columnتعداد As Global.System.Data.DataColumn
        
        Private columnقیمت As Global.System.Data.DataColumn
        
        Private columnواحد As Global.System.Data.DataColumn
        
        Private columnماه As Global.System.Data.DataColumn
        
        Private columnسال As Global.System.Data.DataColumn
        
        Private columnنوع As Global.System.Data.DataColumn
        
        Private columnمنبع As Global.System.Data.DataColumn
        
        Private columnامور As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Con_Non_MonthReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property عنوان_آیتمColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnعنوان_آیتم
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تعدادColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتعداد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property قیمتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnقیمت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property واحدColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnواحد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ماهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnماه
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property سالColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnسال
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نوعColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنوع
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property منبعColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnمنبع
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property امورColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnامور
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Con_Non_MonthReportRow
            Get
                Return CType(Me.Rows(index),Pm_Con_Non_MonthReportRow)
            End Get
        End Property
        
        Public Event Pm_Con_Non_MonthReportRowChanging As Pm_Con_Non_MonthReportRowChangeEventHandler
        
        Public Event Pm_Con_Non_MonthReportRowChanged As Pm_Con_Non_MonthReportRowChangeEventHandler
        
        Public Event Pm_Con_Non_MonthReportRowDeleting As Pm_Con_Non_MonthReportRowChangeEventHandler
        
        Public Event Pm_Con_Non_MonthReportRowDeleted As Pm_Con_Non_MonthReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Con_Non_MonthReportRow(ByVal row As Pm_Con_Non_MonthReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Con_Non_MonthReportRow(ByVal عنوان_آیتم As String, ByVal تعداد As Double, ByVal قیمت As Double, ByVal واحد As String, ByVal ماه As Integer, ByVal سال As Integer, ByVal نوع As String, ByVal منبع As String, ByVal امور As String) As Pm_Con_Non_MonthReportRow
            Dim rowPm_Con_Non_MonthReportRow As Pm_Con_Non_MonthReportRow = CType(Me.NewRow,Pm_Con_Non_MonthReportRow)
            Dim columnValuesArray() As Object = New Object() {عنوان_آیتم, تعداد, قیمت, واحد, ماه, سال, نوع, منبع, امور}
            rowPm_Con_Non_MonthReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Con_Non_MonthReportRow)
            Return rowPm_Con_Non_MonthReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Con_Non_MonthReportDataTable = CType(MyBase.Clone,Pm_Con_Non_MonthReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Con_Non_MonthReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnعنوان_آیتم = MyBase.Columns("عنوان آیتم")
            Me.columnتعداد = MyBase.Columns("تعداد")
            Me.columnقیمت = MyBase.Columns("قیمت")
            Me.columnواحد = MyBase.Columns("واحد")
            Me.columnماه = MyBase.Columns("ماه")
            Me.columnسال = MyBase.Columns("سال")
            Me.columnنوع = MyBase.Columns("نوع")
            Me.columnمنبع = MyBase.Columns("منبع")
            Me.columnامور = MyBase.Columns("امور")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnعنوان_آیتم = New Global.System.Data.DataColumn("عنوان آیتم", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnعنوان_آیتم)
            Me.columnتعداد = New Global.System.Data.DataColumn("تعداد", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتعداد)
            Me.columnقیمت = New Global.System.Data.DataColumn("قیمت", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnقیمت)
            Me.columnواحد = New Global.System.Data.DataColumn("واحد", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnواحد)
            Me.columnماه = New Global.System.Data.DataColumn("ماه", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnماه)
            Me.columnسال = New Global.System.Data.DataColumn("سال", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnسال)
            Me.columnنوع = New Global.System.Data.DataColumn("نوع", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنوع)
            Me.columnمنبع = New Global.System.Data.DataColumn("منبع", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnمنبع)
            Me.columnامور = New Global.System.Data.DataColumn("امور", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnامور)
            Me.columnعنوان_آیتم.MaxLength = 500
            Me.columnواحد.MaxLength = 400
            Me.columnماه.ReadOnly = true
            Me.columnسال.ReadOnly = true
            Me.columnنوع.MaxLength = 50
            Me.columnمنبع.MaxLength = 500
            Me.columnامور.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Con_Non_MonthReportRow() As Pm_Con_Non_MonthReportRow
            Return CType(Me.NewRow,Pm_Con_Non_MonthReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Con_Non_MonthReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Con_Non_MonthReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Con_Non_MonthReportRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_Non_MonthReportRowChanged(Me, New Pm_Con_Non_MonthReportRowChangeEvent(CType(e.Row,Pm_Con_Non_MonthReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Con_Non_MonthReportRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_Non_MonthReportRowChanging(Me, New Pm_Con_Non_MonthReportRowChangeEvent(CType(e.Row,Pm_Con_Non_MonthReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Con_Non_MonthReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Con_Non_MonthReportRowDeleted(Me, New Pm_Con_Non_MonthReportRowChangeEvent(CType(e.Row,Pm_Con_Non_MonthReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Con_Non_MonthReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Con_Non_MonthReportRowDeleting(Me, New Pm_Con_Non_MonthReportRowChangeEvent(CType(e.Row,Pm_Con_Non_MonthReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Con_Non_MonthReportRow(ByVal row As Pm_Con_Non_MonthReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Con = New Ds_Con
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Con_Non_MonthReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Con_UnitRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Con_Unit As Pm_Con_UnitDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Con_Unit = CType(Me.Table,Pm_Con_UnitDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Con_Unit.srlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Con_Unit.srlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property name() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_Unit.nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'name' in table 'Pm_Con_Unit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_Unit.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_Unit.nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnameNull()
            Me(Me.tablePm_Con_Unit.nameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Con_ItemRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Con_Item As Pm_Con_ItemDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Con_Item = CType(Me.Table,Pm_Con_ItemDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Con_Item.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Con_Item.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property کد() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_Item.کدColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'کد' in table 'Pm_Con_Item' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_Item.کدColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property عنوان() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_Item.عنوانColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'عنوان' in table 'Pm_Con_Item' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_Item.عنوانColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property توضیحات() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_Item.توضیحاتColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'توضیحات' in table 'Pm_Con_Item' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_Item.توضیحاتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property واحد_شمارش() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_Item.واحد_شمارشColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'واحد شمارش' in table 'Pm_Con_Item' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_Item.واحد_شمارشColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property واحد_کاری() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_Item.واحد_کاریColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'واحد کاری' in table 'Pm_Con_Item' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_Item.واحد_کاریColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ولتاژ() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_Item.ولتاژColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ولتاژ' in table 'Pm_Con_Item' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_Item.ولتاژColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsکدNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_Item.کدColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetکدNull()
            Me(Me.tablePm_Con_Item.کدColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsعنوانNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_Item.عنوانColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetعنوانNull()
            Me(Me.tablePm_Con_Item.عنوانColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتوضیحاتNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_Item.توضیحاتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتوضیحاتNull()
            Me(Me.tablePm_Con_Item.توضیحاتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isواحد_شمارشNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_Item.واحد_شمارشColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setواحد_شمارشNull()
            Me(Me.tablePm_Con_Item.واحد_شمارشColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isواحد_کاریNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_Item.واحد_کاریColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setواحد_کاریNull()
            Me(Me.tablePm_Con_Item.واحد_کاریColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsولتاژNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_Item.ولتاژColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetولتاژNull()
            Me(Me.tablePm_Con_Item.ولتاژColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Con_ContractRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Con_Contract As Pm_Con_ContractDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Con_Contract = CType(Me.Table,Pm_Con_ContractDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Con_Contract.srlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Con_Contract.srlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property عنوان() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_Contract.عنوانColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'عنوان' in table 'Pm_Con_Contract' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_Contract.عنوانColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property توضیحات() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_Contract.توضیحاتColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'توضیحات' in table 'Pm_Con_Contract' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_Contract.توضیحاتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاریخ_شروع() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_Contract.تاریخ_شروعColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تاریخ شروع' in table 'Pm_Con_Contract' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_Contract.تاریخ_شروعColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاریخ_خاتمه() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_Contract.تاریخ_خاتمهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تاریخ خاتمه' in table 'Pm_Con_Contract' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_Contract.تاریخ_خاتمهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property کد() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_Contract.کدColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'کد' in table 'Pm_Con_Contract' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_Contract.کدColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsعنوانNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_Contract.عنوانColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetعنوانNull()
            Me(Me.tablePm_Con_Contract.عنوانColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتوضیحاتNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_Contract.توضیحاتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتوضیحاتNull()
            Me(Me.tablePm_Con_Contract.توضیحاتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isتاریخ_شروعNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_Contract.تاریخ_شروعColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setتاریخ_شروعNull()
            Me(Me.tablePm_Con_Contract.تاریخ_شروعColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isتاریخ_خاتمهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_Contract.تاریخ_خاتمهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setتاریخ_خاتمهNull()
            Me(Me.tablePm_Con_Contract.تاریخ_خاتمهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsکدNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_Contract.کدColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetکدNull()
            Me(Me.tablePm_Con_Contract.کدColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPm_con_vahedWeightRows() As Pm_con_vahedWeightRow()
            If (Me.Table.ChildRelations("FK_Pm_Con_VahedWeight_Pm_Con_Contract") Is Nothing) Then
                Return New Pm_con_vahedWeightRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Pm_Con_VahedWeight_Pm_Con_Contract")),Pm_con_vahedWeightRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPm_Con_NavahiWeightRows() As Pm_Con_NavahiWeightRow()
            If (Me.Table.ChildRelations("FK_Pm_Con_NavahiWeight_Pm_Con_Contract") Is Nothing) Then
                Return New Pm_Con_NavahiWeightRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Pm_Con_NavahiWeight_Pm_Con_Contract")),Pm_Con_NavahiWeightRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Getpm_con_statusStatementItemRows() As pm_con_statusStatementItemRow()
            If (Me.Table.ChildRelations("FK_Pm_Con_ContractItems_Pm_Con_Contract") Is Nothing) Then
                Return New pm_con_statusStatementItemRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Pm_Con_ContractItems_Pm_Con_Contract")),pm_con_statusStatementItemRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Con_VahedRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Con_Vahed As Pm_Con_VahedDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Con_Vahed = CType(Me.Table,Pm_Con_VahedDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_vahed() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_Vahed.srl_vahedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_vahed' in table 'Pm_Con_Vahed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_Vahed.srl_vahedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_Vahed.نامColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام' in table 'Pm_Con_Vahed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_Vahed.نامColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_vahedNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_Vahed.srl_vahedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_vahedNull()
            Me(Me.tablePm_Con_Vahed.srl_vahedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsنامNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_Vahed.نامColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetنامNull()
            Me(Me.tablePm_Con_Vahed.نامColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Con_ContractItemsRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Con_ContractItems As Pm_Con_ContractItemsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Con_ContractItems = CType(Me.Table,Pm_Con_ContractItemsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Con_ContractItems.srlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Con_ContractItems.srlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property کد() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_ContractItems.کدColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'کد' in table 'Pm_Con_ContractItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_ContractItems.کدColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property عنوان() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_ContractItems.عنوانColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'عنوان' in table 'Pm_Con_ContractItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_ContractItems.عنوانColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property مقدار() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_ContractItems.مقدارColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'مقدار' in table 'Pm_Con_ContractItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_ContractItems.مقدارColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property قیمت() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_ContractItems.قیمتColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'قیمت' in table 'Pm_Con_ContractItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_ContractItems.قیمتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property دوره_زمانی() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_ContractItems.دوره_زمانیColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'دوره زمانی' in table 'Pm_Con_ContractItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_ContractItems.دوره_زمانیColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsکدNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_ContractItems.کدColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetکدNull()
            Me(Me.tablePm_Con_ContractItems.کدColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsعنوانNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_ContractItems.عنوانColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetعنوانNull()
            Me(Me.tablePm_Con_ContractItems.عنوانColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsمقدارNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_ContractItems.مقدارColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetمقدارNull()
            Me(Me.tablePm_Con_ContractItems.مقدارColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsقیمتNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_ContractItems.قیمتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetقیمتNull()
            Me(Me.tablePm_Con_ContractItems.قیمتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isدوره_زمانیNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_ContractItems.دوره_زمانیColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setدوره_زمانیNull()
            Me(Me.tablePm_Con_ContractItems.دوره_زمانیColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class pm_con_ContractItemsTarikhRow
        Inherits Global.System.Data.DataRow
        
        Private tablepm_con_ContractItemsTarikh As pm_con_ContractItemsTarikhDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepm_con_ContractItemsTarikh = CType(Me.Table,pm_con_ContractItemsTarikhDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablepm_con_ContractItemsTarikh.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablepm_con_ContractItemsTarikh.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property کد() As String
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_ContractItemsTarikh.کدColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'کد' in table 'pm_con_ContractItemsTarikh' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_ContractItemsTarikh.کدColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property عنوان() As String
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_ContractItemsTarikh.عنوانColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'عنوان' in table 'pm_con_ContractItemsTarikh' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_ContractItemsTarikh.عنوانColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تعداد() As Double
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_ContractItemsTarikh.تعدادColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تعداد' in table 'pm_con_ContractItemsTarikh' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_ContractItemsTarikh.تعدادColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property قیمت() As Double
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_ContractItemsTarikh.قیمتColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'قیمت' in table 'pm_con_ContractItemsTarikh' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_ContractItemsTarikh.قیمتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsکدNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_ContractItemsTarikh.کدColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetکدNull()
            Me(Me.tablepm_con_ContractItemsTarikh.کدColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsعنوانNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_ContractItemsTarikh.عنوانColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetعنوانNull()
            Me(Me.tablepm_con_ContractItemsTarikh.عنوانColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتعدادNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_ContractItemsTarikh.تعدادColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتعدادNull()
            Me(Me.tablepm_con_ContractItemsTarikh.تعدادColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsقیمتNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_ContractItemsTarikh.قیمتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetقیمتNull()
            Me(Me.tablepm_con_ContractItemsTarikh.قیمتColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class pm_con_WorkformRow
        Inherits Global.System.Data.DataRow
        
        Private tablepm_con_Workform As pm_con_WorkformDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepm_con_Workform = CType(Me.Table,pm_con_WorkformDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام_پست() As String
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_Workform.نام_پستColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام پست' in table 'pm_con_Workform' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_Workform.نام_پستColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام_واحد() As String
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_Workform.نام_واحدColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام واحد' in table 'pm_con_Workform' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_Workform.نام_واحدColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام_گروه() As String
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_Workform.نام_گروهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام گروه' in table 'pm_con_Workform' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_Workform.نام_گروهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاریخ() As String
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_Workform.تاریخColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تاریخ' in table 'pm_con_Workform' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_Workform.تاریخColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شماره() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_Workform.شمارهColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شماره' in table 'pm_con_Workform' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_Workform.شمارهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl() As Integer
            Get
                Return CType(Me(Me.tablepm_con_Workform.srlColumn),Integer)
            End Get
            Set
                Me(Me.tablepm_con_Workform.srlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_Pm_Vahed() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_Workform.Srl_Pm_VahedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_Pm_Vahed' in table 'pm_con_Workform' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_Workform.Srl_Pm_VahedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_pm_post() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_Workform.srl_pm_postColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_pm_post' in table 'pm_con_Workform' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_Workform.srl_pm_postColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنام_پستNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_Workform.نام_پستColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنام_پستNull()
            Me(Me.tablepm_con_Workform.نام_پستColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنام_واحدNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_Workform.نام_واحدColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنام_واحدNull()
            Me(Me.tablepm_con_Workform.نام_واحدColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنام_گروهNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_Workform.نام_گروهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنام_گروهNull()
            Me(Me.tablepm_con_Workform.نام_گروهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتاریخNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_Workform.تاریخColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتاریخNull()
            Me(Me.tablepm_con_Workform.تاریخColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsشمارهNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_Workform.شمارهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetشمارهNull()
            Me(Me.tablepm_con_Workform.شمارهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_Pm_VahedNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_Workform.Srl_Pm_VahedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_Pm_VahedNull()
            Me(Me.tablepm_con_Workform.Srl_Pm_VahedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_pm_postNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_Workform.srl_pm_postColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_pm_postNull()
            Me(Me.tablepm_con_Workform.srl_pm_postColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Con_StatusStatementRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Con_StatusStatement As Pm_Con_StatusStatementDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Con_StatusStatement = CType(Me.Table,Pm_Con_StatusStatementDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Con_StatusStatement.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatement.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_vahed() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatement.Srl_vahedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_vahed' in table 'Pm_Con_StatusStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatement.Srl_vahedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_group() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatement.Srl_groupColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_group' in table 'Pm_Con_StatusStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatement.Srl_groupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_post() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatement.Srl_postColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_post' in table 'Pm_Con_StatusStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatement.Srl_postColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_Line() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatement.Srl_LineColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_Line' in table 'Pm_Con_StatusStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatement.Srl_LineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام_پست() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatement.نام_پستColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام پست' in table 'Pm_Con_StatusStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatement.نام_پستColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام_واحد() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatement.نام_واحدColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام واحد' in table 'Pm_Con_StatusStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatement.نام_واحدColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام_گروه() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatement.نام_گروهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام گروه' in table 'Pm_Con_StatusStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatement.نام_گروهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاریخ() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatement.تاریخColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تاریخ' in table 'Pm_Con_StatusStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatement.تاریخColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام_خط() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatement.نام_خطColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام خط' in table 'Pm_Con_StatusStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatement.نام_خطColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatement.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'Pm_Con_StatusStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatement.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شماره() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatement.شمارهColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شماره' in table 'Pm_Con_StatusStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatement.شمارهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_vahedNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatement.Srl_vahedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_vahedNull()
            Me(Me.tablePm_Con_StatusStatement.Srl_vahedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_groupNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatement.Srl_groupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_groupNull()
            Me(Me.tablePm_Con_StatusStatement.Srl_groupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_postNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatement.Srl_postColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_postNull()
            Me(Me.tablePm_Con_StatusStatement.Srl_postColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_LineNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatement.Srl_LineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_LineNull()
            Me(Me.tablePm_Con_StatusStatement.Srl_LineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنام_پستNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatement.نام_پستColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنام_پستNull()
            Me(Me.tablePm_Con_StatusStatement.نام_پستColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنام_واحدNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatement.نام_واحدColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنام_واحدNull()
            Me(Me.tablePm_Con_StatusStatement.نام_واحدColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنام_گروهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatement.نام_گروهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنام_گروهNull()
            Me(Me.tablePm_Con_StatusStatement.نام_گروهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتاریخNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatement.تاریخColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتاریخNull()
            Me(Me.tablePm_Con_StatusStatement.تاریخColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنام_خطNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatement.نام_خطColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنام_خطNull()
            Me(Me.tablePm_Con_StatusStatement.نام_خطColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatement.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tablePm_Con_StatusStatement.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsشمارهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatement.شمارهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetشمارهNull()
            Me(Me.tablePm_Con_StatusStatement.شمارهColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Con_UsedItemRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Con_UsedItem As Pm_Con_UsedItemDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Con_UsedItem = CType(Me.Table,Pm_Con_UsedItemDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Amount() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_UsedItem.AmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Amount' in table 'Pm_Con_UsedItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_UsedItem.AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property used() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_UsedItem.usedColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'used' in table 'Pm_Con_UsedItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_UsedItem.usedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_UsedItem.AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmountNull()
            Me(Me.tablePm_Con_UsedItem.AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsusedNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_UsedItem.usedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetusedNull()
            Me(Me.tablePm_Con_UsedItem.usedColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Con_StatusStatementVwRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Con_StatusStatementVw As Pm_Con_StatusStatementVwDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Con_StatusStatementVw = CType(Me.Table,Pm_Con_StatusStatementVwDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شماره() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatementVw.شمارهColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شماره' in table 'Pm_Con_StatusStatementVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatementVw.شمارهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاریخ() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatementVw.تاریخColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تاریخ' in table 'Pm_Con_StatusStatementVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatementVw.تاریخColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام_واحد() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatementVw.نام_واحدColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام واحد' in table 'Pm_Con_StatusStatementVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatementVw.نام_واحدColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام_گروه() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatementVw.نام_گروهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام گروه' in table 'Pm_Con_StatusStatementVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatementVw.نام_گروهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام_پست() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatementVw.نام_پستColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام پست' in table 'Pm_Con_StatusStatementVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatementVw.نام_پستColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام_خط() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatementVw.نام_خطColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام خط' in table 'Pm_Con_StatusStatementVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatementVw.نام_خطColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نوع() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatementVw.نوعColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نوع' in table 'Pm_Con_StatusStatementVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatementVw.نوعColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatementVw.SrlColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl' in table 'Pm_Con_StatusStatementVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatementVw.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_vahed() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatementVw.Srl_vahedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_vahed' in table 'Pm_Con_StatusStatementVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatementVw.Srl_vahedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_group() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatementVw.Srl_groupColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_group' in table 'Pm_Con_StatusStatementVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatementVw.Srl_groupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_post() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatementVw.srl_postColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_post' in table 'Pm_Con_StatusStatementVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatementVw.srl_postColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_line() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatementVw.srl_lineColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_line' in table 'Pm_Con_StatusStatementVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatementVw.srl_lineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property is_cancle() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatementVw.is_cancleColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'is_cancle' in table 'Pm_Con_StatusStatementVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatementVw.is_cancleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property is_night() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatementVw.is_nightColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'is_night' in table 'Pm_Con_StatusStatementVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatementVw.is_nightColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property is_holiday() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatementVw.is_holidayColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'is_holiday' in table 'Pm_Con_StatusStatementVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatementVw.is_holidayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsشمارهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatementVw.شمارهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetشمارهNull()
            Me(Me.tablePm_Con_StatusStatementVw.شمارهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتاریخNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatementVw.تاریخColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتاریخNull()
            Me(Me.tablePm_Con_StatusStatementVw.تاریخColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنام_واحدNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatementVw.نام_واحدColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنام_واحدNull()
            Me(Me.tablePm_Con_StatusStatementVw.نام_واحدColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنام_گروهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatementVw.نام_گروهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنام_گروهNull()
            Me(Me.tablePm_Con_StatusStatementVw.نام_گروهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنام_پستNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatementVw.نام_پستColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنام_پستNull()
            Me(Me.tablePm_Con_StatusStatementVw.نام_پستColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنام_خطNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatementVw.نام_خطColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنام_خطNull()
            Me(Me.tablePm_Con_StatusStatementVw.نام_خطColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsنوعNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatementVw.نوعColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetنوعNull()
            Me(Me.tablePm_Con_StatusStatementVw.نوعColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrlNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatementVw.SrlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrlNull()
            Me(Me.tablePm_Con_StatusStatementVw.SrlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_vahedNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatementVw.Srl_vahedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_vahedNull()
            Me(Me.tablePm_Con_StatusStatementVw.Srl_vahedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_groupNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatementVw.Srl_groupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_groupNull()
            Me(Me.tablePm_Con_StatusStatementVw.Srl_groupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_postNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatementVw.srl_postColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_postNull()
            Me(Me.tablePm_Con_StatusStatementVw.srl_postColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_lineNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatementVw.srl_lineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_lineNull()
            Me(Me.tablePm_Con_StatusStatementVw.srl_lineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isis_cancleNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatementVw.is_cancleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setis_cancleNull()
            Me(Me.tablePm_Con_StatusStatementVw.is_cancleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isis_nightNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatementVw.is_nightColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setis_nightNull()
            Me(Me.tablePm_Con_StatusStatementVw.is_nightColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isis_holidayNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatementVw.is_holidayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setis_holidayNull()
            Me(Me.tablePm_Con_StatusStatementVw.is_holidayColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Con_SourceRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Con_Source As Pm_Con_SourceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Con_Source = CType(Me.Table,Pm_Con_SourceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Con_Source.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Con_Source.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property عنوان() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_Source.عنوانColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'عنوان' in table 'Pm_Con_Source' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_Source.عنوانColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsعنوانNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_Source.عنوانColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetعنوانNull()
            Me(Me.tablePm_Con_Source.عنوانColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class pm_con_AllItemRow
        Inherits Global.System.Data.DataRow
        
        Private tablepm_con_AllItem As pm_con_AllItemDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepm_con_AllItem = CType(Me.Table,pm_con_AllItemDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablepm_con_AllItem.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablepm_con_AllItem.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property کد() As String
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_AllItem.کدColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'کد' in table 'pm_con_AllItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_AllItem.کدColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property عنوان() As String
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_AllItem.عنوانColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'عنوان' in table 'pm_con_AllItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_AllItem.عنوانColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property توضیحات() As String
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_AllItem.توضیحاتColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'توضیحات' in table 'pm_con_AllItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_AllItem.توضیحاتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ولتاژ() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_AllItem.ولتاژColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ولتاژ' in table 'pm_con_AllItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_AllItem.ولتاژColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property واحد_شمارش() As String
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_AllItem.واحد_شمارشColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'واحد شمارش' in table 'pm_con_AllItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_AllItem.واحد_شمارشColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property واحد_کاری() As String
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_AllItem.واحد_کاریColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'واحد کاری' in table 'pm_con_AllItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_AllItem.واحد_کاریColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsکدNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_AllItem.کدColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetکدNull()
            Me(Me.tablepm_con_AllItem.کدColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsعنوانNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_AllItem.عنوانColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetعنوانNull()
            Me(Me.tablepm_con_AllItem.عنوانColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتوضیحاتNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_AllItem.توضیحاتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتوضیحاتNull()
            Me(Me.tablepm_con_AllItem.توضیحاتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsولتاژNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_AllItem.ولتاژColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetولتاژNull()
            Me(Me.tablepm_con_AllItem.ولتاژColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isواحد_شمارشNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_AllItem.واحد_شمارشColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setواحد_شمارشNull()
            Me(Me.tablepm_con_AllItem.واحد_شمارشColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isواحد_کاریNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_AllItem.واحد_کاریColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setواحد_کاریNull()
            Me(Me.tablepm_con_AllItem.واحد_کاریColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_MonthRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Month As Pm_MonthDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Month = CType(Me.Table,Pm_MonthDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Month.srlColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl' in table 'Pm_Month' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Month.srlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property name() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Month.nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'name' in table 'Pm_Month' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Month.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssrlNull() As Boolean
            Return Me.IsNull(Me.tablePm_Month.srlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsrlNull()
            Me(Me.tablePm_Month.srlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tablePm_Month.nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnameNull()
            Me(Me.tablePm_Month.nameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Con_StatusStatementTypeRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Con_StatusStatementType As Pm_Con_StatusStatementTypeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Con_StatusStatementType = CType(Me.Table,Pm_Con_StatusStatementTypeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Con_StatusStatementType.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatementType.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property name() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusStatementType.nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'name' in table 'Pm_Con_StatusStatementType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusStatementType.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusStatementType.nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnameNull()
            Me(Me.tablePm_Con_StatusStatementType.nameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Con_Contract1Row
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Con_Contract1 As Pm_Con_Contract1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Con_Contract1 = CType(Me.Table,Pm_Con_Contract1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Con_Contract1.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Con_Contract1.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property name() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_Contract1.nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'name' in table 'Pm_Con_Contract1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_Contract1.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_Contract1.nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnameNull()
            Me(Me.tablePm_Con_Contract1.nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPm_con_vahedWeightRows() As Pm_con_vahedWeightRow()
            If (Me.Table.ChildRelations("FK_Pm_Con_VahedWeight_Pm_Con_Contract1") Is Nothing) Then
                Return New Pm_con_vahedWeightRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Pm_Con_VahedWeight_Pm_Con_Contract1")),Pm_con_vahedWeightRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPm_Con_NavahiWeightRows() As Pm_Con_NavahiWeightRow()
            If (Me.Table.ChildRelations("FK_Pm_Con_NavahiWeight_Pm_Con_Contract1") Is Nothing) Then
                Return New Pm_Con_NavahiWeightRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Pm_Con_NavahiWeight_Pm_Con_Contract1")),Pm_Con_NavahiWeightRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Getpm_con_statusStatementItemRows() As pm_con_statusStatementItemRow()
            If (Me.Table.ChildRelations("FK_Pm_Con_ContractItems_Pm_Con_Contract1") Is Nothing) Then
                Return New pm_con_statusStatementItemRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Pm_Con_ContractItems_Pm_Con_Contract1")),pm_con_statusStatementItemRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_con_ContratZaribRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_con_ContratZarib As Pm_con_ContratZaribDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_con_ContratZarib = CType(Me.Table,Pm_con_ContratZaribDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl() As Integer
            Get
                Return CType(Me(Me.tablePm_con_ContratZarib.srlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_con_ContratZarib.srlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property قرارداد() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_con_ContratZarib.قراردادColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'قرارداد' in table 'Pm_con_ContratZarib' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_con_ContratZarib.قراردادColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تعطیل() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_con_ContratZarib.تعطیلColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تعطیل' in table 'Pm_con_ContratZarib' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_con_ContratZarib.تعطیلColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شبانه() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_con_ContratZarib.شبانهColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شبانه' in table 'Pm_con_ContratZarib' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_con_ContratZarib.شبانهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property کنسلی_فرم() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_con_ContratZarib.کنسلی_فرمColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'کنسلی فرم' in table 'Pm_con_ContratZarib' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_con_ContratZarib.کنسلی_فرمColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property روزقبل_فرم() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_con_ContratZarib.روزقبل_فرمColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'روزقبل فرم' in table 'Pm_con_ContratZarib' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_con_ContratZarib.روزقبل_فرمColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property کنسلی_غیر_فرم() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_con_ContratZarib.کنسلی_غیر_فرمColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'کنسلی غیر فرم' in table 'Pm_con_ContratZarib' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_con_ContratZarib.کنسلی_غیر_فرمColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property روز_قبل_غیر_فرم() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_con_ContratZarib.روز_قبل_غیر_فرمColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'روز قبل غیر فرم' in table 'Pm_con_ContratZarib' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_con_ContratZarib.روز_قبل_غیر_فرمColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsقراردادNull() As Boolean
            Return Me.IsNull(Me.tablePm_con_ContratZarib.قراردادColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetقراردادNull()
            Me(Me.tablePm_con_ContratZarib.قراردادColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتعطیلNull() As Boolean
            Return Me.IsNull(Me.tablePm_con_ContratZarib.تعطیلColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتعطیلNull()
            Me(Me.tablePm_con_ContratZarib.تعطیلColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsشبانهNull() As Boolean
            Return Me.IsNull(Me.tablePm_con_ContratZarib.شبانهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetشبانهNull()
            Me(Me.tablePm_con_ContratZarib.شبانهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isکنسلی_فرمNull() As Boolean
            Return Me.IsNull(Me.tablePm_con_ContratZarib.کنسلی_فرمColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setکنسلی_فرمNull()
            Me(Me.tablePm_con_ContratZarib.کنسلی_فرمColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isروزقبل_فرمNull() As Boolean
            Return Me.IsNull(Me.tablePm_con_ContratZarib.روزقبل_فرمColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setروزقبل_فرمNull()
            Me(Me.tablePm_con_ContratZarib.روزقبل_فرمColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isکنسلی_غیر_فرمNull() As Boolean
            Return Me.IsNull(Me.tablePm_con_ContratZarib.کنسلی_غیر_فرمColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setکنسلی_غیر_فرمNull()
            Me(Me.tablePm_con_ContratZarib.کنسلی_غیر_فرمColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isروز_قبل_غیر_فرمNull() As Boolean
            Return Me.IsNull(Me.tablePm_con_ContratZarib.روز_قبل_غیر_فرمColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setروز_قبل_غیر_فرمNull()
            Me(Me.tablePm_con_ContratZarib.روز_قبل_غیر_فرمColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Con_MonthReportAmountRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Con_MonthReportAmount As Pm_Con_MonthReportAmountDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Con_MonthReportAmount = CType(Me.Table,Pm_Con_MonthReportAmountDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Price() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReportAmount.PriceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Price' in table 'Pm_Con_MonthReportAmount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReportAmount.PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_group() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReportAmount.srl_groupColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_group' in table 'Pm_Con_MonthReportAmount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReportAmount.srl_groupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property name() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReportAmount.nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'name' in table 'Pm_Con_MonthReportAmount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReportAmount.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPriceNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReportAmount.PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPriceNull()
            Me(Me.tablePm_Con_MonthReportAmount.PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_groupNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReportAmount.srl_groupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_groupNull()
            Me(Me.tablePm_Con_MonthReportAmount.srl_groupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReportAmount.nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnameNull()
            Me(Me.tablePm_Con_MonthReportAmount.nameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class pm_Con_Rp_RemainedItemRow
        Inherits Global.System.Data.DataRow
        
        Private tablepm_Con_Rp_RemainedItem As pm_Con_Rp_RemainedItemDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepm_Con_Rp_RemainedItem = CType(Me.Table,pm_Con_Rp_RemainedItemDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemcode() As String
            Get
                Try 
                    Return CType(Me(Me.tablepm_Con_Rp_RemainedItem.itemcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'itemcode' in table 'pm_Con_Rp_RemainedItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_Con_Rp_RemainedItem.itemcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemTitle() As String
            Get
                Try 
                    Return CType(Me(Me.tablepm_Con_Rp_RemainedItem.ItemTitleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemTitle' in table 'pm_Con_Rp_RemainedItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_Con_Rp_RemainedItem.ItemTitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property allamount() As Double
            Get
                Try 
                    Return CType(Me(Me.tablepm_Con_Rp_RemainedItem.allamountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'allamount' in table 'pm_Con_Rp_RemainedItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_Con_Rp_RemainedItem.allamountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DoAmount() As Double
            Get
                Try 
                    Return CType(Me(Me.tablepm_Con_Rp_RemainedItem.DoAmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DoAmount' in table 'pm_Con_Rp_RemainedItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_Con_Rp_RemainedItem.DoAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property diff() As Double
            Get
                Try 
                    Return CType(Me(Me.tablepm_Con_Rp_RemainedItem.diffColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'diff' in table 'pm_Con_Rp_RemainedItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_Con_Rp_RemainedItem.diffColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property price() As Double
            Get
                Try 
                    Return CType(Me(Me.tablepm_Con_Rp_RemainedItem.priceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'price' in table 'pm_Con_Rp_RemainedItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_Con_Rp_RemainedItem.priceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsitemcodeNull() As Boolean
            Return Me.IsNull(Me.tablepm_Con_Rp_RemainedItem.itemcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetitemcodeNull()
            Me(Me.tablepm_Con_Rp_RemainedItem.itemcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemTitleNull() As Boolean
            Return Me.IsNull(Me.tablepm_Con_Rp_RemainedItem.ItemTitleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemTitleNull()
            Me(Me.tablepm_Con_Rp_RemainedItem.ItemTitleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsallamountNull() As Boolean
            Return Me.IsNull(Me.tablepm_Con_Rp_RemainedItem.allamountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetallamountNull()
            Me(Me.tablepm_Con_Rp_RemainedItem.allamountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDoAmountNull() As Boolean
            Return Me.IsNull(Me.tablepm_Con_Rp_RemainedItem.DoAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDoAmountNull()
            Me(Me.tablepm_Con_Rp_RemainedItem.DoAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdiffNull() As Boolean
            Return Me.IsNull(Me.tablepm_Con_Rp_RemainedItem.diffColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdiffNull()
            Me(Me.tablepm_Con_Rp_RemainedItem.diffColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspriceNull() As Boolean
            Return Me.IsNull(Me.tablepm_Con_Rp_RemainedItem.priceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpriceNull()
            Me(Me.tablepm_Con_Rp_RemainedItem.priceColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_con_vahedWeightRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_con_vahedWeight As Pm_con_vahedWeightDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_con_vahedWeight = CType(Me.Table,Pm_con_vahedWeightDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl() As Integer
            Get
                Return CType(Me(Me.tablePm_con_vahedWeight.srlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_con_vahedWeight.srlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_vahed() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_con_vahedWeight.srl_vahedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_vahed' in table 'Pm_con_vahedWeight' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_con_vahedWeight.srl_vahedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_contract() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_con_vahedWeight.srl_contractColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_contract' in table 'Pm_con_vahedWeight' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_con_vahedWeight.srl_contractColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام_واحد() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_con_vahedWeight.نام_واحدColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام واحد' in table 'Pm_con_vahedWeight' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_con_vahedWeight.نام_واحدColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شاخص_وزنی() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_con_vahedWeight.شاخص_وزنیColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شاخص وزنی' in table 'Pm_con_vahedWeight' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_con_vahedWeight.شاخص_وزنیColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pm_Con_ContractRow() As Pm_Con_ContractRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Pm_Con_VahedWeight_Pm_Con_Contract")),Pm_Con_ContractRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Pm_Con_VahedWeight_Pm_Con_Contract"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pm_Con_Contract1Row() As Pm_Con_Contract1Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Pm_Con_VahedWeight_Pm_Con_Contract1")),Pm_Con_Contract1Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Pm_Con_VahedWeight_Pm_Con_Contract1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_vahedNull() As Boolean
            Return Me.IsNull(Me.tablePm_con_vahedWeight.srl_vahedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_vahedNull()
            Me(Me.tablePm_con_vahedWeight.srl_vahedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_contractNull() As Boolean
            Return Me.IsNull(Me.tablePm_con_vahedWeight.srl_contractColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_contractNull()
            Me(Me.tablePm_con_vahedWeight.srl_contractColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنام_واحدNull() As Boolean
            Return Me.IsNull(Me.tablePm_con_vahedWeight.نام_واحدColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنام_واحدNull()
            Me(Me.tablePm_con_vahedWeight.نام_واحدColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isشاخص_وزنیNull() As Boolean
            Return Me.IsNull(Me.tablePm_con_vahedWeight.شاخص_وزنیColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setشاخص_وزنیNull()
            Me(Me.tablePm_con_vahedWeight.شاخص_وزنیColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_con_StatusStatementDetailRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_con_StatusStatementDetail As Pm_con_StatusStatementDetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_con_StatusStatementDetail = CType(Me.Table,Pm_con_StatusStatementDetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_ashkhas() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_con_StatusStatementDetail.srl_ashkhasColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_ashkhas' in table 'Pm_con_StatusStatementDetail' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_con_StatusStatementDetail.srl_ashkhasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام_و_نام_خانوادگی() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_con_StatusStatementDetail.نام_و_نام_خانوادگیColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام و نام خانوادگی' in table 'Pm_con_StatusStatementDetail'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_con_StatusStatementDetail.نام_و_نام_خانوادگیColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property weight() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_con_StatusStatementDetail.weightColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'weight' in table 'Pm_con_StatusStatementDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_con_StatusStatementDetail.weightColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_ashkhasNull() As Boolean
            Return Me.IsNull(Me.tablePm_con_StatusStatementDetail.srl_ashkhasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_ashkhasNull()
            Me(Me.tablePm_con_StatusStatementDetail.srl_ashkhasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنام_و_نام_خانوادگیNull() As Boolean
            Return Me.IsNull(Me.tablePm_con_StatusStatementDetail.نام_و_نام_خانوادگیColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنام_و_نام_خانوادگیNull()
            Me(Me.tablePm_con_StatusStatementDetail.نام_و_نام_خانوادگیColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsweightNull() As Boolean
            Return Me.IsNull(Me.tablePm_con_StatusStatementDetail.weightColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetweightNull()
            Me(Me.tablePm_con_StatusStatementDetail.weightColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Con_ExcelMonthReportRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Con_ExcelMonthReport As Pm_Con_ExcelMonthReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Con_ExcelMonthReport = CType(Me.Table,Pm_Con_ExcelMonthReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شماره() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_ExcelMonthReport.شمارهColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شماره' in table 'Pm_Con_ExcelMonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_ExcelMonthReport.شمارهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شرح() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_ExcelMonthReport.شرحColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شرح' in table 'Pm_Con_ExcelMonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_ExcelMonthReport.شرحColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property مبلغ_ارسال() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_ExcelMonthReport.مبلغ_ارسالColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'مبلغ ارسال' in table 'Pm_Con_ExcelMonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_ExcelMonthReport.مبلغ_ارسالColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _ارزش_افزوده_9_() As Long
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_ExcelMonthReport._ارزش_افزوده_9_Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ارزش افزوده 9%' in table 'Pm_Con_ExcelMonthReport' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_ExcelMonthReport._ارزش_افزوده_9_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شماره_نامه() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_ExcelMonthReport.شماره_نامهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شماره نامه' in table 'Pm_Con_ExcelMonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_ExcelMonthReport.شماره_نامهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاریخ_ارسال() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_ExcelMonthReport.تاریخ_ارسالColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تاریخ ارسال' in table 'Pm_Con_ExcelMonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_ExcelMonthReport.تاریخ_ارسالColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsشمارهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_ExcelMonthReport.شمارهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetشمارهNull()
            Me(Me.tablePm_Con_ExcelMonthReport.شمارهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsشرحNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_ExcelMonthReport.شرحColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetشرحNull()
            Me(Me.tablePm_Con_ExcelMonthReport.شرحColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isمبلغ_ارسالNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_ExcelMonthReport.مبلغ_ارسالColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setمبلغ_ارسالNull()
            Me(Me.tablePm_Con_ExcelMonthReport.مبلغ_ارسالColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_ارزش_افزوده_9_Null() As Boolean
            Return Me.IsNull(Me.tablePm_Con_ExcelMonthReport._ارزش_افزوده_9_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_ارزش_افزوده_9_Null()
            Me(Me.tablePm_Con_ExcelMonthReport._ارزش_افزوده_9_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isشماره_نامهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_ExcelMonthReport.شماره_نامهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setشماره_نامهNull()
            Me(Me.tablePm_Con_ExcelMonthReport.شماره_نامهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isتاریخ_ارسالNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_ExcelMonthReport.تاریخ_ارسالColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setتاریخ_ارسالNull()
            Me(Me.tablePm_Con_ExcelMonthReport.تاریخ_ارسالColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Con_StatusstatementItemVwRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Con_StatusstatementItemVw As Pm_Con_StatusstatementItemVwDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Con_StatusstatementItemVw = CType(Me.Table,Pm_Con_StatusstatementItemVwDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property کد() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.کدColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'کد' in table 'Pm_Con_StatusstatementItemVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.کدColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property عنوان() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.عنوانColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'عنوان' in table 'Pm_Con_StatusstatementItemVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.عنوانColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تعداد() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.تعدادColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تعداد' in table 'Pm_Con_StatusstatementItemVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.تعدادColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property قیمت() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.قیمتColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'قیمت' in table 'Pm_Con_StatusstatementItemVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.قیمتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property کل() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.کلColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'کل' in table 'Pm_Con_StatusstatementItemVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.کلColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاریخ() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.تاریخColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تاریخ' in table 'Pm_Con_StatusstatementItemVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.تاریخColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property پست() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.پستColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'پست' in table 'Pm_Con_StatusstatementItemVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.پستColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_Post() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.srl_PostColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_Post' in table 'Pm_Con_StatusstatementItemVw' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.srl_PostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_workform_master() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.Srl_workform_masterColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_workform_master' in table 'Pm_Con_StatusstatementItemVw"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.Srl_workform_masterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_contractItem() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.srl_contractItemColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_contractItem' in table 'Pm_Con_StatusstatementItemVw' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.srl_contractItemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Amount() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.AmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Amount' in table 'Pm_Con_StatusstatementItemVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Is_Confirme() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.Is_ConfirmeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Is_Confirme' in table 'Pm_Con_StatusstatementItemVw' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.Is_ConfirmeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Price() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.PriceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Price' in table 'Pm_Con_StatusstatementItemVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_source() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.srl_sourceColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_source' in table 'Pm_Con_StatusstatementItemVw' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.srl_sourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_SubmitUser() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.Srl_SubmitUserColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_SubmitUser' in table 'Pm_Con_StatusstatementItemVw' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.Srl_SubmitUserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Is_holiday() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.Is_holidayColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Is_holiday' in table 'Pm_Con_StatusstatementItemVw' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.Is_holidayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Is_Night() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.Is_NightColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Is_Night' in table 'Pm_Con_StatusstatementItemVw' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.Is_NightColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Is_Cancle() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.Is_CancleColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Is_Cancle' in table 'Pm_Con_StatusstatementItemVw' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.Is_CancleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubmitDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.SubmitDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubmitDate' in table 'Pm_Con_StatusstatementItemVw' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.SubmitDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_StatusStatement() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.srl_StatusStatementColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_StatusStatement' in table 'Pm_Con_StatusstatementItemVw"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.srl_StatusStatementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Is_Beforecancle() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.Is_BeforecancleColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Is_Beforecancle' in table 'Pm_Con_StatusstatementItemVw' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.Is_BeforecancleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_MonthReport() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.Srl_MonthReportColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_MonthReport' in table 'Pm_Con_StatusstatementItemVw' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.Srl_MonthReportColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property title() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.titleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'title' in table 'Pm_Con_StatusstatementItemVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.titleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property code() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.codeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'code' in table 'Pm_Con_StatusstatementItemVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_item() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.srl_itemColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_item' in table 'Pm_Con_StatusstatementItemVw' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.srl_itemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_Contract() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.Srl_ContractColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_Contract' in table 'Pm_Con_StatusstatementItemVw' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.Srl_ContractColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property postname() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.postnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'postname' in table 'Pm_Con_StatusstatementItemVw' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.postnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tarikh() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.tarikhColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tarikh' in table 'Pm_Con_StatusstatementItemVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.tarikhColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property p() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.pColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'p' in table 'Pm_Con_StatusstatementItemVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.pColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_vahed() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.srl_vahedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_vahed' in table 'Pm_Con_StatusstatementItemVw' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.srl_vahedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_Post1() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.srl_Post1Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_Post1' in table 'Pm_Con_StatusstatementItemVw' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.srl_Post1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_group() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.srl_groupColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_group' in table 'Pm_Con_StatusstatementItemVw' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.srl_groupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_Omoor() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.srl_OmoorColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_Omoor' in table 'Pm_Con_StatusstatementItemVw' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.srl_OmoorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Month() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw._MonthColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_Month' in table 'Pm_Con_StatusstatementItemVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw._MonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Year() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw._YearColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_Year' in table 'Pm_Con_StatusstatementItemVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw._YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sstype() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.sstypeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sstype' in table 'Pm_Con_StatusstatementItemVw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.sstypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property description() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.descriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'description' in table 'Pm_Con_StatusstatementItemVw' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Confirm_Amount() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.Confirm_AmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Confirm_Amount' in table 'Pm_Con_StatusstatementItemVw' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.Confirm_AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Confirm_Price() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.Confirm_PriceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Confirm_Price' in table 'Pm_Con_StatusstatementItemVw' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.Confirm_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CalcPrice() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_StatusstatementItemVw.CalcPriceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CalcPrice' in table 'Pm_Con_StatusstatementItemVw' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_StatusstatementItemVw.CalcPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsکدNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.کدColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetکدNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.کدColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsعنوانNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.عنوانColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetعنوانNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.عنوانColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتعدادNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.تعدادColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتعدادNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.تعدادColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsقیمتNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.قیمتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetقیمتNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.قیمتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsکلNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.کلColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetکلNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.کلColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتاریخNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.تاریخColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتاریخNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.تاریخColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsپستNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.پستColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetپستNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.پستColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_PostNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.srl_PostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_PostNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.srl_PostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_workform_masterNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.Srl_workform_masterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_workform_masterNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.Srl_workform_masterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_contractItemNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.srl_contractItemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_contractItemNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.srl_contractItemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmountNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIs_ConfirmeNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.Is_ConfirmeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIs_ConfirmeNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.Is_ConfirmeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPriceNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPriceNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_sourceNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.srl_sourceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_sourceNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.srl_sourceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_SubmitUserNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.Srl_SubmitUserColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_SubmitUserNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.Srl_SubmitUserColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIs_holidayNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.Is_holidayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIs_holidayNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.Is_holidayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIs_NightNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.Is_NightColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIs_NightNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.Is_NightColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIs_CancleNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.Is_CancleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIs_CancleNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.Is_CancleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubmitDateNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.SubmitDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubmitDateNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.SubmitDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_StatusStatementNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.srl_StatusStatementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_StatusStatementNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.srl_StatusStatementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIs_BeforecancleNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.Is_BeforecancleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIs_BeforecancleNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.Is_BeforecancleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_MonthReportNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.Srl_MonthReportColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_MonthReportNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.Srl_MonthReportColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstitleNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.titleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettitleNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.titleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodeNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.codeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodeNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.codeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_itemNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.srl_itemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_itemNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.srl_itemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_ContractNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.Srl_ContractColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_ContractNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.Srl_ContractColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspostnameNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.postnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpostnameNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.postnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstarikhNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.tarikhColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettarikhNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.tarikhColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.pColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.pColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_vahedNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.srl_vahedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_vahedNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.srl_vahedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_Post1Null() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.srl_Post1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_Post1Null()
            Me(Me.tablePm_Con_StatusstatementItemVw.srl_Post1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_groupNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.srl_groupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_groupNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.srl_groupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_OmoorNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.srl_OmoorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_OmoorNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.srl_OmoorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_MonthNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw._MonthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_MonthNull()
            Me(Me.tablePm_Con_StatusstatementItemVw._MonthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_YearNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw._YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_YearNull()
            Me(Me.tablePm_Con_StatusstatementItemVw._YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssstypeNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.sstypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsstypeNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.sstypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.descriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdescriptionNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.descriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConfirm_AmountNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.Confirm_AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConfirm_AmountNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.Confirm_AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConfirm_PriceNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.Confirm_PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConfirm_PriceNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.Confirm_PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCalcPriceNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_StatusstatementItemVw.CalcPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCalcPriceNull()
            Me(Me.tablePm_Con_StatusstatementItemVw.CalcPriceColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Con_GroupWeightRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Con_GroupWeight As Pm_Con_GroupWeightDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Con_GroupWeight = CType(Me.Table,Pm_Con_GroupWeightDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Con_GroupWeight.srlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Con_GroupWeight.srlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_Group() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_GroupWeight.srl_GroupColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_Group' in table 'Pm_Con_GroupWeight' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_GroupWeight.srl_GroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_contract() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_GroupWeight.srl_contractColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_contract' in table 'Pm_Con_GroupWeight' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_GroupWeight.srl_contractColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام_گروه() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_GroupWeight.نام_گروهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام گروه' in table 'Pm_Con_GroupWeight' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_GroupWeight.نام_گروهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شاخص_وزنی() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_GroupWeight.شاخص_وزنیColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شاخص وزنی' in table 'Pm_Con_GroupWeight' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_GroupWeight.شاخص_وزنیColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_GroupNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_GroupWeight.srl_GroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_GroupNull()
            Me(Me.tablePm_Con_GroupWeight.srl_GroupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_contractNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_GroupWeight.srl_contractColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_contractNull()
            Me(Me.tablePm_Con_GroupWeight.srl_contractColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنام_گروهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_GroupWeight.نام_گروهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنام_گروهNull()
            Me(Me.tablePm_Con_GroupWeight.نام_گروهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isشاخص_وزنیNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_GroupWeight.شاخص_وزنیColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setشاخص_وزنیNull()
            Me(Me.tablePm_Con_GroupWeight.شاخص_وزنیColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Con_NavahiWeightRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Con_NavahiWeight As Pm_Con_NavahiWeightDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Con_NavahiWeight = CType(Me.Table,Pm_Con_NavahiWeightDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Con_NavahiWeight.srlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Con_NavahiWeight.srlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_Post_type() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_NavahiWeight.srl_Post_typeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_Post_type' in table 'Pm_Con_NavahiWeight' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_NavahiWeight.srl_Post_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_contract() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_NavahiWeight.srl_contractColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_contract' in table 'Pm_Con_NavahiWeight' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_NavahiWeight.srl_contractColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ناحیه() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_NavahiWeight.ناحیهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ناحیه' in table 'Pm_Con_NavahiWeight' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_NavahiWeight.ناحیهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ضریب() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_NavahiWeight.ضریبColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ضریب' in table 'Pm_Con_NavahiWeight' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_NavahiWeight.ضریبColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pm_Con_ContractRow() As Pm_Con_ContractRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Pm_Con_NavahiWeight_Pm_Con_Contract")),Pm_Con_ContractRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Pm_Con_NavahiWeight_Pm_Con_Contract"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pm_Con_Contract1Row() As Pm_Con_Contract1Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Pm_Con_NavahiWeight_Pm_Con_Contract1")),Pm_Con_Contract1Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Pm_Con_NavahiWeight_Pm_Con_Contract1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_Post_typeNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_NavahiWeight.srl_Post_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_Post_typeNull()
            Me(Me.tablePm_Con_NavahiWeight.srl_Post_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_contractNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_NavahiWeight.srl_contractColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_contractNull()
            Me(Me.tablePm_Con_NavahiWeight.srl_contractColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsناحیهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_NavahiWeight.ناحیهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetناحیهNull()
            Me(Me.tablePm_Con_NavahiWeight.ناحیهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsضریبNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_NavahiWeight.ضریبColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetضریبNull()
            Me(Me.tablePm_Con_NavahiWeight.ضریبColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Rp_Pm_MonthReport_OmoorRow
        Inherits Global.System.Data.DataRow
        
        Private tableRp_Pm_MonthReport_Omoor As Rp_Pm_MonthReport_OmoorDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRp_Pm_MonthReport_Omoor = CType(Me.Table,Rp_Pm_MonthReport_OmoorDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property امور() As String
            Get
                Try 
                    Return CType(Me(Me.tableRp_Pm_MonthReport_Omoor.امورColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'امور' in table 'Rp_Pm_MonthReport_Omoor' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_Pm_MonthReport_Omoor.امورColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property بررسی_کارمازاد() As Long
            Get
                Try 
                    Return CType(Me(Me.tableRp_Pm_MonthReport_Omoor.بررسی_کارمازادColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'بررسی کارمازاد' in table 'Rp_Pm_MonthReport_Omoor' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_Pm_MonthReport_Omoor.بررسی_کارمازادColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property بررسی_PM() As Long
            Get
                Try 
                    Return CType(Me(Me.tableRp_Pm_MonthReport_Omoor.بررسی_PMColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'بررسی PM' in table 'Rp_Pm_MonthReport_Omoor' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_Pm_MonthReport_Omoor.بررسی_PMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تائید_کارمازاد() As Long
            Get
                Try 
                    Return CType(Me(Me.tableRp_Pm_MonthReport_Omoor.تائید_کارمازادColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تائید کارمازاد' in table 'Rp_Pm_MonthReport_Omoor' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_Pm_MonthReport_Omoor.تائید_کارمازادColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تائید_PM() As Long
            Get
                Try 
                    Return CType(Me(Me.tableRp_Pm_MonthReport_Omoor.تائید_PMColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تائید PM' in table 'Rp_Pm_MonthReport_Omoor' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_Pm_MonthReport_Omoor.تائید_PMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ردشده_کارمازاد() As Long
            Get
                Try 
                    Return CType(Me(Me.tableRp_Pm_MonthReport_Omoor.ردشده_کارمازادColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ردشده کارمازاد' in table 'Rp_Pm_MonthReport_Omoor' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_Pm_MonthReport_Omoor.ردشده_کارمازادColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ردشده_PM() As Long
            Get
                Try 
                    Return CType(Me(Me.tableRp_Pm_MonthReport_Omoor.ردشده_PMColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ردشده PM' in table 'Rp_Pm_MonthReport_Omoor' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_Pm_MonthReport_Omoor.ردشده_PMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsامورNull() As Boolean
            Return Me.IsNull(Me.tableRp_Pm_MonthReport_Omoor.امورColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetامورNull()
            Me(Me.tableRp_Pm_MonthReport_Omoor.امورColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isبررسی_کارمازادNull() As Boolean
            Return Me.IsNull(Me.tableRp_Pm_MonthReport_Omoor.بررسی_کارمازادColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setبررسی_کارمازادNull()
            Me(Me.tableRp_Pm_MonthReport_Omoor.بررسی_کارمازادColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isبررسی_PMNull() As Boolean
            Return Me.IsNull(Me.tableRp_Pm_MonthReport_Omoor.بررسی_PMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setبررسی_PMNull()
            Me(Me.tableRp_Pm_MonthReport_Omoor.بررسی_PMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isتائید_کارمازادNull() As Boolean
            Return Me.IsNull(Me.tableRp_Pm_MonthReport_Omoor.تائید_کارمازادColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setتائید_کارمازادNull()
            Me(Me.tableRp_Pm_MonthReport_Omoor.تائید_کارمازادColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isتائید_PMNull() As Boolean
            Return Me.IsNull(Me.tableRp_Pm_MonthReport_Omoor.تائید_PMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setتائید_PMNull()
            Me(Me.tableRp_Pm_MonthReport_Omoor.تائید_PMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isردشده_کارمازادNull() As Boolean
            Return Me.IsNull(Me.tableRp_Pm_MonthReport_Omoor.ردشده_کارمازادColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setردشده_کارمازادNull()
            Me(Me.tableRp_Pm_MonthReport_Omoor.ردشده_کارمازادColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isردشده_PMNull() As Boolean
            Return Me.IsNull(Me.tableRp_Pm_MonthReport_Omoor.ردشده_PMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setردشده_PMNull()
            Me(Me.tableRp_Pm_MonthReport_Omoor.ردشده_PMColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class pm_con_statusStatementItemRow
        Inherits Global.System.Data.DataRow
        
        Private tablepm_con_statusStatementItem As pm_con_statusStatementItemDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepm_con_statusStatementItem = CType(Me.Table,pm_con_statusStatementItemDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl() As Integer
            Get
                Return CType(Me(Me.tablepm_con_statusStatementItem.srlColumn),Integer)
            End Get
            Set
                Me(Me.tablepm_con_statusStatementItem.srlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property کد() As String
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_statusStatementItem.کدColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'کد' in table 'pm_con_statusStatementItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_statusStatementItem.کدColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property عنوان() As String
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_statusStatementItem.عنوانColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'عنوان' in table 'pm_con_statusStatementItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_statusStatementItem.عنوانColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تعداد() As Double
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_statusStatementItem.تعدادColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تعداد' in table 'pm_con_statusStatementItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_statusStatementItem.تعدادColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تائید() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_statusStatementItem.تائیدColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تائید' in table 'pm_con_statusStatementItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_statusStatementItem.تائیدColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property قیمت() As Double
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_statusStatementItem.قیمتColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'قیمت' in table 'pm_con_statusStatementItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_statusStatementItem.قیمتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property calcprice() As Double
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_statusStatementItem.calcpriceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'calcprice' in table 'pm_con_statusStatementItem' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_statusStatementItem.calcpriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Confirm_Price() As Double
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_statusStatementItem.Confirm_PriceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Confirm_Price' in table 'pm_con_statusStatementItem' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_statusStatementItem.Confirm_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Confirm_Amount() As Double
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_statusStatementItem.Confirm_AmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Confirm_Amount' in table 'pm_con_statusStatementItem' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_statusStatementItem.Confirm_AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Is_holiday() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_statusStatementItem.Is_holidayColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Is_holiday' in table 'pm_con_statusStatementItem' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_statusStatementItem.Is_holidayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property is_cancle() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_statusStatementItem.is_cancleColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'is_cancle' in table 'pm_con_statusStatementItem' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_statusStatementItem.is_cancleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property is_night() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_statusStatementItem.is_nightColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'is_night' in table 'pm_con_statusStatementItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_statusStatementItem.is_nightColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property is_beforeCancle() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_statusStatementItem.is_beforeCancleColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'is_beforeCancle' in table 'pm_con_statusStatementItem' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_statusStatementItem.is_beforeCancleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_contract() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_statusStatementItem.srl_contractColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_contract' in table 'pm_con_statusStatementItem' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_statusStatementItem.srl_contractColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_source() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_statusStatementItem.srl_sourceColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_source' in table 'pm_con_statusStatementItem' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_statusStatementItem.srl_sourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property قیمت_کل() As Double
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_statusStatementItem.قیمت_کلColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'قیمت کل' in table 'pm_con_statusStatementItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_statusStatementItem.قیمت_کلColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SSPM() As String
            Get
                Try 
                    Return CType(Me(Me.tablepm_con_statusStatementItem.SSPMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SSPM' in table 'pm_con_statusStatementItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepm_con_statusStatementItem.SSPMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pm_Con_ContractRow() As Pm_Con_ContractRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Pm_Con_ContractItems_Pm_Con_Contract")),Pm_Con_ContractRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Pm_Con_ContractItems_Pm_Con_Contract"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pm_Con_Contract1Row() As Pm_Con_Contract1Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Pm_Con_ContractItems_Pm_Con_Contract1")),Pm_Con_Contract1Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Pm_Con_ContractItems_Pm_Con_Contract1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsکدNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_statusStatementItem.کدColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetکدNull()
            Me(Me.tablepm_con_statusStatementItem.کدColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsعنوانNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_statusStatementItem.عنوانColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetعنوانNull()
            Me(Me.tablepm_con_statusStatementItem.عنوانColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتعدادNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_statusStatementItem.تعدادColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتعدادNull()
            Me(Me.tablepm_con_statusStatementItem.تعدادColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتائیدNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_statusStatementItem.تائیدColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتائیدNull()
            Me(Me.tablepm_con_statusStatementItem.تائیدColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsقیمتNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_statusStatementItem.قیمتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetقیمتNull()
            Me(Me.tablepm_con_statusStatementItem.قیمتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscalcpriceNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_statusStatementItem.calcpriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcalcpriceNull()
            Me(Me.tablepm_con_statusStatementItem.calcpriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConfirm_PriceNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_statusStatementItem.Confirm_PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConfirm_PriceNull()
            Me(Me.tablepm_con_statusStatementItem.Confirm_PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConfirm_AmountNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_statusStatementItem.Confirm_AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConfirm_AmountNull()
            Me(Me.tablepm_con_statusStatementItem.Confirm_AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIs_holidayNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_statusStatementItem.Is_holidayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIs_holidayNull()
            Me(Me.tablepm_con_statusStatementItem.Is_holidayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isis_cancleNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_statusStatementItem.is_cancleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setis_cancleNull()
            Me(Me.tablepm_con_statusStatementItem.is_cancleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isis_nightNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_statusStatementItem.is_nightColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setis_nightNull()
            Me(Me.tablepm_con_statusStatementItem.is_nightColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isis_beforeCancleNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_statusStatementItem.is_beforeCancleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setis_beforeCancleNull()
            Me(Me.tablepm_con_statusStatementItem.is_beforeCancleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_contractNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_statusStatementItem.srl_contractColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_contractNull()
            Me(Me.tablepm_con_statusStatementItem.srl_contractColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_sourceNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_statusStatementItem.srl_sourceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_sourceNull()
            Me(Me.tablepm_con_statusStatementItem.srl_sourceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isقیمت_کلNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_statusStatementItem.قیمت_کلColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setقیمت_کلNull()
            Me(Me.tablepm_con_statusStatementItem.قیمت_کلColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSSPMNull() As Boolean
            Return Me.IsNull(Me.tablepm_con_statusStatementItem.SSPMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSSPMNull()
            Me(Me.tablepm_con_statusStatementItem.SSPMColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Rp_Pm_MonthReport_OmoorVahedRow
        Inherits Global.System.Data.DataRow
        
        Private tableRp_Pm_MonthReport_OmoorVahed As Rp_Pm_MonthReport_OmoorVahedDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRp_Pm_MonthReport_OmoorVahed = CType(Me.Table,Rp_Pm_MonthReport_OmoorVahedDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property امور() As String
            Get
                Try 
                    Return CType(Me(Me.tableRp_Pm_MonthReport_OmoorVahed.امورColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'امور' in table 'Rp_Pm_MonthReport_OmoorVahed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_Pm_MonthReport_OmoorVahed.امورColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property واحد() As String
            Get
                Try 
                    Return CType(Me(Me.tableRp_Pm_MonthReport_OmoorVahed.واحدColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'واحد' in table 'Rp_Pm_MonthReport_OmoorVahed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_Pm_MonthReport_OmoorVahed.واحدColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property بررسی_کارمازاد() As Long
            Get
                Try 
                    Return CType(Me(Me.tableRp_Pm_MonthReport_OmoorVahed.بررسی_کارمازادColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'بررسی کارمازاد' in table 'Rp_Pm_MonthReport_OmoorVahed' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_Pm_MonthReport_OmoorVahed.بررسی_کارمازادColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property بررسی_PM() As Long
            Get
                Try 
                    Return CType(Me(Me.tableRp_Pm_MonthReport_OmoorVahed.بررسی_PMColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'بررسی PM' in table 'Rp_Pm_MonthReport_OmoorVahed' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_Pm_MonthReport_OmoorVahed.بررسی_PMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تائید_کارمازاد() As Long
            Get
                Try 
                    Return CType(Me(Me.tableRp_Pm_MonthReport_OmoorVahed.تائید_کارمازادColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تائید کارمازاد' in table 'Rp_Pm_MonthReport_OmoorVahed' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_Pm_MonthReport_OmoorVahed.تائید_کارمازادColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تائید_PM() As Long
            Get
                Try 
                    Return CType(Me(Me.tableRp_Pm_MonthReport_OmoorVahed.تائید_PMColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تائید PM' in table 'Rp_Pm_MonthReport_OmoorVahed' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_Pm_MonthReport_OmoorVahed.تائید_PMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ردشده_کارمازاد() As Long
            Get
                Try 
                    Return CType(Me(Me.tableRp_Pm_MonthReport_OmoorVahed.ردشده_کارمازادColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ردشده کارمازاد' in table 'Rp_Pm_MonthReport_OmoorVahed' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_Pm_MonthReport_OmoorVahed.ردشده_کارمازادColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ردشده_PM() As Long
            Get
                Try 
                    Return CType(Me(Me.tableRp_Pm_MonthReport_OmoorVahed.ردشده_PMColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ردشده PM' in table 'Rp_Pm_MonthReport_OmoorVahed' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_Pm_MonthReport_OmoorVahed.ردشده_PMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsامورNull() As Boolean
            Return Me.IsNull(Me.tableRp_Pm_MonthReport_OmoorVahed.امورColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetامورNull()
            Me(Me.tableRp_Pm_MonthReport_OmoorVahed.امورColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsواحدNull() As Boolean
            Return Me.IsNull(Me.tableRp_Pm_MonthReport_OmoorVahed.واحدColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetواحدNull()
            Me(Me.tableRp_Pm_MonthReport_OmoorVahed.واحدColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isبررسی_کارمازادNull() As Boolean
            Return Me.IsNull(Me.tableRp_Pm_MonthReport_OmoorVahed.بررسی_کارمازادColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setبررسی_کارمازادNull()
            Me(Me.tableRp_Pm_MonthReport_OmoorVahed.بررسی_کارمازادColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isبررسی_PMNull() As Boolean
            Return Me.IsNull(Me.tableRp_Pm_MonthReport_OmoorVahed.بررسی_PMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setبررسی_PMNull()
            Me(Me.tableRp_Pm_MonthReport_OmoorVahed.بررسی_PMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isتائید_کارمازادNull() As Boolean
            Return Me.IsNull(Me.tableRp_Pm_MonthReport_OmoorVahed.تائید_کارمازادColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setتائید_کارمازادNull()
            Me(Me.tableRp_Pm_MonthReport_OmoorVahed.تائید_کارمازادColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isتائید_PMNull() As Boolean
            Return Me.IsNull(Me.tableRp_Pm_MonthReport_OmoorVahed.تائید_PMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setتائید_PMNull()
            Me(Me.tableRp_Pm_MonthReport_OmoorVahed.تائید_PMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isردشده_کارمازادNull() As Boolean
            Return Me.IsNull(Me.tableRp_Pm_MonthReport_OmoorVahed.ردشده_کارمازادColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setردشده_کارمازادNull()
            Me(Me.tableRp_Pm_MonthReport_OmoorVahed.ردشده_کارمازادColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isردشده_PMNull() As Boolean
            Return Me.IsNull(Me.tableRp_Pm_MonthReport_OmoorVahed.ردشده_PMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setردشده_PMNull()
            Me(Me.tableRp_Pm_MonthReport_OmoorVahed.ردشده_PMColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Con_MonthReport_DetailRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Con_MonthReport_Detail As Pm_Con_MonthReport_DetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Con_MonthReport_Detail = CType(Me.Table,Pm_Con_MonthReport_DetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Con_MonthReport_Detail.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شماره() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReport_Detail.شمارهColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شماره' in table 'Pm_Con_MonthReport_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.شمارهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شماره_نامه() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReport_Detail.شماره_نامهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شماره نامه' in table 'Pm_Con_MonthReport_Detail' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.شماره_نامهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property دوره() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReport_Detail.دورهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'دوره' in table 'Pm_Con_MonthReport_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.دورهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property گروه() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReport_Detail.گروهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'گروه' in table 'Pm_Con_MonthReport_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.گروهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام_واحد() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReport_Detail.نام_واحدColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام واحد' in table 'Pm_Con_MonthReport_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.نام_واحدColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نوع() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReport_Detail.نوعColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نوع' in table 'Pm_Con_MonthReport_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.نوعColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاریخ_ارسال() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReport_Detail.تاریخ_ارسالColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تاریخ ارسال' in table 'Pm_Con_MonthReport_Detail' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.تاریخ_ارسالColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاریخ_تائید() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReport_Detail.تاریخ_تائیدColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تاریخ تائید' in table 'Pm_Con_MonthReport_Detail' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.تاریخ_تائیدColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاریخ_ERP() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReport_Detail.تاریخ_ERPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تاریخ ERP' in table 'Pm_Con_MonthReport_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.تاریخ_ERPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شماره_پیگیری() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReport_Detail.شماره_پیگیریColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شماره پیگیری' in table 'Pm_Con_MonthReport_Detail' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.شماره_پیگیریColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شماره_وضعیت() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReport_Detail.شماره_وضعیتColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شماره وضعیت' in table 'Pm_Con_MonthReport_Detail' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.شماره_وضعیتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شماره_سند() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReport_Detail.شماره_سندColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شماره سند' in table 'Pm_Con_MonthReport_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.شماره_سندColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property توضیحات() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReport_Detail.توضیحاتColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'توضیحات' in table 'Pm_Con_MonthReport_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.توضیحاتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property قرارداد() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReport_Detail.قراردادColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'قرارداد' in table 'Pm_Con_MonthReport_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.قراردادColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsCancle() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReport_Detail.IsCancleColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsCancle' in table 'Pm_Con_MonthReport_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.IsCancleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_Con_Contract() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReport_Detail.Srl_Con_ContractColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_Con_Contract' in table 'Pm_Con_MonthReport_Detail' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.Srl_Con_ContractColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_Pm_Con_source() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReport_Detail.Srl_Pm_Con_sourceColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_Pm_Con_source' in table 'Pm_Con_MonthReport_Detail' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.Srl_Pm_Con_sourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_Pm_PostType() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReport_Detail.Srl_Pm_PostTypeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_Pm_PostType' in table 'Pm_Con_MonthReport_Detail' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.Srl_Pm_PostTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_Pm_Vahed() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReport_Detail.Srl_Pm_VahedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_Pm_Vahed' in table 'Pm_Con_MonthReport_Detail' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.Srl_Pm_VahedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_SubmitUser() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReport_Detail.Srl_SubmitUserColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_SubmitUser' in table 'Pm_Con_MonthReport_Detail' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.Srl_SubmitUserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubmitDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReport_Detail.SubmitDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubmitDate' in table 'Pm_Con_MonthReport_Detail' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.SubmitDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_Statusstatementtype() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReport_Detail.srl_StatusstatementtypeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_Statusstatementtype' in table 'Pm_Con_MonthReport_Detai"& _ 
                            "l' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.srl_StatusstatementtypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property مبلغ() As Long
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReport_Detail.مبلغColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'مبلغ' in table 'Pm_Con_MonthReport_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.مبلغColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property مبلغ_تائید() As Long
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReport_Detail.مبلغ_تائیدColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'مبلغ تائید' in table 'Pm_Con_MonthReport_Detail' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.مبلغ_تائیدColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Month() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_MonthReport_Detail.MonthColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Month' in table 'Pm_Con_MonthReport_Detail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_MonthReport_Detail.MonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsشمارهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReport_Detail.شمارهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetشمارهNull()
            Me(Me.tablePm_Con_MonthReport_Detail.شمارهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isشماره_نامهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReport_Detail.شماره_نامهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setشماره_نامهNull()
            Me(Me.tablePm_Con_MonthReport_Detail.شماره_نامهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsدورهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReport_Detail.دورهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetدورهNull()
            Me(Me.tablePm_Con_MonthReport_Detail.دورهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsگروهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReport_Detail.گروهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetگروهNull()
            Me(Me.tablePm_Con_MonthReport_Detail.گروهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنام_واحدNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReport_Detail.نام_واحدColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنام_واحدNull()
            Me(Me.tablePm_Con_MonthReport_Detail.نام_واحدColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsنوعNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReport_Detail.نوعColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetنوعNull()
            Me(Me.tablePm_Con_MonthReport_Detail.نوعColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isتاریخ_ارسالNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReport_Detail.تاریخ_ارسالColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setتاریخ_ارسالNull()
            Me(Me.tablePm_Con_MonthReport_Detail.تاریخ_ارسالColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isتاریخ_تائیدNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReport_Detail.تاریخ_تائیدColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setتاریخ_تائیدNull()
            Me(Me.tablePm_Con_MonthReport_Detail.تاریخ_تائیدColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isتاریخ_ERPNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReport_Detail.تاریخ_ERPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setتاریخ_ERPNull()
            Me(Me.tablePm_Con_MonthReport_Detail.تاریخ_ERPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isشماره_پیگیریNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReport_Detail.شماره_پیگیریColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setشماره_پیگیریNull()
            Me(Me.tablePm_Con_MonthReport_Detail.شماره_پیگیریColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isشماره_وضعیتNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReport_Detail.شماره_وضعیتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setشماره_وضعیتNull()
            Me(Me.tablePm_Con_MonthReport_Detail.شماره_وضعیتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isشماره_سندNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReport_Detail.شماره_سندColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setشماره_سندNull()
            Me(Me.tablePm_Con_MonthReport_Detail.شماره_سندColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتوضیحاتNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReport_Detail.توضیحاتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتوضیحاتNull()
            Me(Me.tablePm_Con_MonthReport_Detail.توضیحاتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsقراردادNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReport_Detail.قراردادColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetقراردادNull()
            Me(Me.tablePm_Con_MonthReport_Detail.قراردادColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsCancleNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReport_Detail.IsCancleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsCancleNull()
            Me(Me.tablePm_Con_MonthReport_Detail.IsCancleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_Con_ContractNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReport_Detail.Srl_Con_ContractColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_Con_ContractNull()
            Me(Me.tablePm_Con_MonthReport_Detail.Srl_Con_ContractColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_Pm_Con_sourceNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReport_Detail.Srl_Pm_Con_sourceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_Pm_Con_sourceNull()
            Me(Me.tablePm_Con_MonthReport_Detail.Srl_Pm_Con_sourceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_Pm_PostTypeNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReport_Detail.Srl_Pm_PostTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_Pm_PostTypeNull()
            Me(Me.tablePm_Con_MonthReport_Detail.Srl_Pm_PostTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_Pm_VahedNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReport_Detail.Srl_Pm_VahedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_Pm_VahedNull()
            Me(Me.tablePm_Con_MonthReport_Detail.Srl_Pm_VahedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_SubmitUserNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReport_Detail.Srl_SubmitUserColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_SubmitUserNull()
            Me(Me.tablePm_Con_MonthReport_Detail.Srl_SubmitUserColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubmitDateNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReport_Detail.SubmitDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubmitDateNull()
            Me(Me.tablePm_Con_MonthReport_Detail.SubmitDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_StatusstatementtypeNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReport_Detail.srl_StatusstatementtypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_StatusstatementtypeNull()
            Me(Me.tablePm_Con_MonthReport_Detail.srl_StatusstatementtypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsمبلغNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReport_Detail.مبلغColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetمبلغNull()
            Me(Me.tablePm_Con_MonthReport_Detail.مبلغColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isمبلغ_تائیدNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReport_Detail.مبلغ_تائیدColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setمبلغ_تائیدNull()
            Me(Me.tablePm_Con_MonthReport_Detail.مبلغ_تائیدColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMonthNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_MonthReport_Detail.MonthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMonthNull()
            Me(Me.tablePm_Con_MonthReport_Detail.MonthColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Con_SaveEzafekarRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Con_SaveEzafekar As Pm_Con_SaveEzafekarDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Con_SaveEzafekar = CType(Me.Table,Pm_Con_SaveEzafekarDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Con_SaveEzafekar.srlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Con_SaveEzafekar.srlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام_واحد() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_SaveEzafekar.نام_واحدColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام واحد' in table 'Pm_Con_SaveEzafekar' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_SaveEzafekar.نام_واحدColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property درصد_ذخیره() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_SaveEzafekar.درصد_ذخیرهColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'درصد ذخیره' in table 'Pm_Con_SaveEzafekar' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_SaveEzafekar.درصد_ذخیرهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_vahed() As Integer
            Get
                Return CType(Me(Me.tablePm_Con_SaveEzafekar.srl_vahedColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Con_SaveEzafekar.srl_vahedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنام_واحدNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_SaveEzafekar.نام_واحدColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنام_واحدNull()
            Me(Me.tablePm_Con_SaveEzafekar.نام_واحدColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isدرصد_ذخیرهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_SaveEzafekar.درصد_ذخیرهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setدرصد_ذخیرهNull()
            Me(Me.tablePm_Con_SaveEzafekar.درصد_ذخیرهColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_con_MonthReportGrouupConfirmPriceRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_con_MonthReportGrouupConfirmPrice As Pm_con_MonthReportGrouupConfirmPriceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_con_MonthReportGrouupConfirmPrice = CType(Me.Table,Pm_con_MonthReportGrouupConfirmPriceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl() As Integer
            Get
                Return CType(Me(Me.tablePm_con_MonthReportGrouupConfirmPrice.srlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_con_MonthReportGrouupConfirmPrice.srlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام_گروه() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_con_MonthReportGrouupConfirmPrice.نام_گروهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام گروه' in table 'Pm_con_MonthReportGrouupConfirmPrice' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_con_MonthReportGrouupConfirmPrice.نام_گروهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property مبلغ_ارسالی() As Long
            Get
                Try 
                    Return CType(Me(Me.tablePm_con_MonthReportGrouupConfirmPrice.مبلغ_ارسالیColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'مبلغ ارسالی' in table 'Pm_con_MonthReportGrouupConfirmPrice"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_con_MonthReportGrouupConfirmPrice.مبلغ_ارسالیColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property مبلغ_تائید_شده() As Long
            Get
                Try 
                    Return CType(Me(Me.tablePm_con_MonthReportGrouupConfirmPrice.مبلغ_تائید_شدهColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'مبلغ تائید شده' in table 'Pm_con_MonthReportGrouupConfirmPr"& _ 
                            "ice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_con_MonthReportGrouupConfirmPrice.مبلغ_تائید_شدهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنام_گروهNull() As Boolean
            Return Me.IsNull(Me.tablePm_con_MonthReportGrouupConfirmPrice.نام_گروهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنام_گروهNull()
            Me(Me.tablePm_con_MonthReportGrouupConfirmPrice.نام_گروهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isمبلغ_ارسالیNull() As Boolean
            Return Me.IsNull(Me.tablePm_con_MonthReportGrouupConfirmPrice.مبلغ_ارسالیColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setمبلغ_ارسالیNull()
            Me(Me.tablePm_con_MonthReportGrouupConfirmPrice.مبلغ_ارسالیColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isمبلغ_تائید_شدهNull() As Boolean
            Return Me.IsNull(Me.tablePm_con_MonthReportGrouupConfirmPrice.مبلغ_تائید_شدهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setمبلغ_تائید_شدهNull()
            Me(Me.tablePm_con_MonthReportGrouupConfirmPrice.مبلغ_تائید_شدهColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_MonthReportRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_MonthReport As Pm_MonthReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_MonthReport = CType(Me.Table,Pm_MonthReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_MonthReport.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_MonthReport.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شماره() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_MonthReport.شمارهColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شماره' in table 'Pm_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_MonthReport.شمارهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شماره_نامه() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_MonthReport.شماره_نامهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شماره نامه' in table 'Pm_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_MonthReport.شماره_نامهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property دوره() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_MonthReport.دورهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'دوره' in table 'Pm_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_MonthReport.دورهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property گروه() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_MonthReport.گروهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'گروه' in table 'Pm_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_MonthReport.گروهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام_واحد() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_MonthReport.نام_واحدColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام واحد' in table 'Pm_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_MonthReport.نام_واحدColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نوع() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_MonthReport.نوعColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نوع' in table 'Pm_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_MonthReport.نوعColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاریخ_ارسال() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_MonthReport.تاریخ_ارسالColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تاریخ ارسال' in table 'Pm_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_MonthReport.تاریخ_ارسالColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاریخ_تائید() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_MonthReport.تاریخ_تائیدColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تاریخ تائید' in table 'Pm_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_MonthReport.تاریخ_تائیدColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاریخ_ERP() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_MonthReport.تاریخ_ERPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تاریخ ERP' in table 'Pm_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_MonthReport.تاریخ_ERPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شماره_پیگیری() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_MonthReport.شماره_پیگیریColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شماره پیگیری' in table 'Pm_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_MonthReport.شماره_پیگیریColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شماره_وضعیت() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_MonthReport.شماره_وضعیتColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شماره وضعیت' in table 'Pm_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_MonthReport.شماره_وضعیتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شماره_سند() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_MonthReport.شماره_سندColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شماره سند' in table 'Pm_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_MonthReport.شماره_سندColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property توضیحات() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_MonthReport.توضیحاتColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'توضیحات' in table 'Pm_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_MonthReport.توضیحاتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsCancle() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePm_MonthReport.IsCancleColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsCancle' in table 'Pm_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_MonthReport.IsCancleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_Con_Contract() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_MonthReport.Srl_Con_ContractColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_Con_Contract' in table 'Pm_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_MonthReport.Srl_Con_ContractColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_Pm_Con_source() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_MonthReport.Srl_Pm_Con_sourceColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_Pm_Con_source' in table 'Pm_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_MonthReport.Srl_Pm_Con_sourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_Pm_PostType() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_MonthReport.Srl_Pm_PostTypeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_Pm_PostType' in table 'Pm_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_MonthReport.Srl_Pm_PostTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_Pm_Vahed() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_MonthReport.Srl_Pm_VahedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_Pm_Vahed' in table 'Pm_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_MonthReport.Srl_Pm_VahedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_SubmitUser() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_MonthReport.Srl_SubmitUserColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_SubmitUser' in table 'Pm_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_MonthReport.Srl_SubmitUserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubmitDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePm_MonthReport.SubmitDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubmitDate' in table 'Pm_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_MonthReport.SubmitDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_Statusstatementtype() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_MonthReport.srl_StatusstatementtypeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_Statusstatementtype' in table 'Pm_MonthReport' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_MonthReport.srl_StatusstatementtypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تائیدی() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_MonthReport.تائیدیColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تائیدی' in table 'Pm_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_MonthReport.تائیدیColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تفاوت() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_MonthReport.تفاوتColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تفاوت' in table 'Pm_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_MonthReport.تفاوتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property مبلغ() As Long
            Get
                Try 
                    Return CType(Me(Me.tablePm_MonthReport.مبلغColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'مبلغ' in table 'Pm_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_MonthReport.مبلغColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property مبلغ_تائید() As Long
            Get
                Try 
                    Return CType(Me(Me.tablePm_MonthReport.مبلغ_تائیدColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'مبلغ تائید' in table 'Pm_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_MonthReport.مبلغ_تائیدColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsشمارهNull() As Boolean
            Return Me.IsNull(Me.tablePm_MonthReport.شمارهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetشمارهNull()
            Me(Me.tablePm_MonthReport.شمارهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isشماره_نامهNull() As Boolean
            Return Me.IsNull(Me.tablePm_MonthReport.شماره_نامهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setشماره_نامهNull()
            Me(Me.tablePm_MonthReport.شماره_نامهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsدورهNull() As Boolean
            Return Me.IsNull(Me.tablePm_MonthReport.دورهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetدورهNull()
            Me(Me.tablePm_MonthReport.دورهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsگروهNull() As Boolean
            Return Me.IsNull(Me.tablePm_MonthReport.گروهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetگروهNull()
            Me(Me.tablePm_MonthReport.گروهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنام_واحدNull() As Boolean
            Return Me.IsNull(Me.tablePm_MonthReport.نام_واحدColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنام_واحدNull()
            Me(Me.tablePm_MonthReport.نام_واحدColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsنوعNull() As Boolean
            Return Me.IsNull(Me.tablePm_MonthReport.نوعColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetنوعNull()
            Me(Me.tablePm_MonthReport.نوعColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isتاریخ_ارسالNull() As Boolean
            Return Me.IsNull(Me.tablePm_MonthReport.تاریخ_ارسالColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setتاریخ_ارسالNull()
            Me(Me.tablePm_MonthReport.تاریخ_ارسالColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isتاریخ_تائیدNull() As Boolean
            Return Me.IsNull(Me.tablePm_MonthReport.تاریخ_تائیدColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setتاریخ_تائیدNull()
            Me(Me.tablePm_MonthReport.تاریخ_تائیدColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isتاریخ_ERPNull() As Boolean
            Return Me.IsNull(Me.tablePm_MonthReport.تاریخ_ERPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setتاریخ_ERPNull()
            Me(Me.tablePm_MonthReport.تاریخ_ERPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isشماره_پیگیریNull() As Boolean
            Return Me.IsNull(Me.tablePm_MonthReport.شماره_پیگیریColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setشماره_پیگیریNull()
            Me(Me.tablePm_MonthReport.شماره_پیگیریColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isشماره_وضعیتNull() As Boolean
            Return Me.IsNull(Me.tablePm_MonthReport.شماره_وضعیتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setشماره_وضعیتNull()
            Me(Me.tablePm_MonthReport.شماره_وضعیتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isشماره_سندNull() As Boolean
            Return Me.IsNull(Me.tablePm_MonthReport.شماره_سندColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setشماره_سندNull()
            Me(Me.tablePm_MonthReport.شماره_سندColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتوضیحاتNull() As Boolean
            Return Me.IsNull(Me.tablePm_MonthReport.توضیحاتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتوضیحاتNull()
            Me(Me.tablePm_MonthReport.توضیحاتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsCancleNull() As Boolean
            Return Me.IsNull(Me.tablePm_MonthReport.IsCancleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsCancleNull()
            Me(Me.tablePm_MonthReport.IsCancleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_Con_ContractNull() As Boolean
            Return Me.IsNull(Me.tablePm_MonthReport.Srl_Con_ContractColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_Con_ContractNull()
            Me(Me.tablePm_MonthReport.Srl_Con_ContractColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_Pm_Con_sourceNull() As Boolean
            Return Me.IsNull(Me.tablePm_MonthReport.Srl_Pm_Con_sourceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_Pm_Con_sourceNull()
            Me(Me.tablePm_MonthReport.Srl_Pm_Con_sourceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_Pm_PostTypeNull() As Boolean
            Return Me.IsNull(Me.tablePm_MonthReport.Srl_Pm_PostTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_Pm_PostTypeNull()
            Me(Me.tablePm_MonthReport.Srl_Pm_PostTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_Pm_VahedNull() As Boolean
            Return Me.IsNull(Me.tablePm_MonthReport.Srl_Pm_VahedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_Pm_VahedNull()
            Me(Me.tablePm_MonthReport.Srl_Pm_VahedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_SubmitUserNull() As Boolean
            Return Me.IsNull(Me.tablePm_MonthReport.Srl_SubmitUserColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_SubmitUserNull()
            Me(Me.tablePm_MonthReport.Srl_SubmitUserColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubmitDateNull() As Boolean
            Return Me.IsNull(Me.tablePm_MonthReport.SubmitDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubmitDateNull()
            Me(Me.tablePm_MonthReport.SubmitDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_StatusstatementtypeNull() As Boolean
            Return Me.IsNull(Me.tablePm_MonthReport.srl_StatusstatementtypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_StatusstatementtypeNull()
            Me(Me.tablePm_MonthReport.srl_StatusstatementtypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتائیدیNull() As Boolean
            Return Me.IsNull(Me.tablePm_MonthReport.تائیدیColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتائیدیNull()
            Me(Me.tablePm_MonthReport.تائیدیColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتفاوتNull() As Boolean
            Return Me.IsNull(Me.tablePm_MonthReport.تفاوتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتفاوتNull()
            Me(Me.tablePm_MonthReport.تفاوتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsمبلغNull() As Boolean
            Return Me.IsNull(Me.tablePm_MonthReport.مبلغColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetمبلغNull()
            Me(Me.tablePm_MonthReport.مبلغColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isمبلغ_تائیدNull() As Boolean
            Return Me.IsNull(Me.tablePm_MonthReport.مبلغ_تائیدColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setمبلغ_تائیدNull()
            Me(Me.tablePm_MonthReport.مبلغ_تائیدColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Con_Non_MonthReportRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Con_Non_MonthReport As Pm_Con_Non_MonthReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Con_Non_MonthReport = CType(Me.Table,Pm_Con_Non_MonthReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property عنوان_آیتم() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_Non_MonthReport.عنوان_آیتمColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'عنوان آیتم' in table 'Pm_Con_Non_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_Non_MonthReport.عنوان_آیتمColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تعداد() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_Non_MonthReport.تعدادColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تعداد' in table 'Pm_Con_Non_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_Non_MonthReport.تعدادColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property قیمت() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_Non_MonthReport.قیمتColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'قیمت' in table 'Pm_Con_Non_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_Non_MonthReport.قیمتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property واحد() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_Non_MonthReport.واحدColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'واحد' in table 'Pm_Con_Non_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_Non_MonthReport.واحدColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ماه() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_Non_MonthReport.ماهColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ماه' in table 'Pm_Con_Non_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_Non_MonthReport.ماهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property سال() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_Non_MonthReport.سالColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'سال' in table 'Pm_Con_Non_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_Non_MonthReport.سالColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نوع() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_Non_MonthReport.نوعColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نوع' in table 'Pm_Con_Non_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_Non_MonthReport.نوعColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property منبع() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_Non_MonthReport.منبعColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'منبع' in table 'Pm_Con_Non_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_Non_MonthReport.منبعColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property امور() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Con_Non_MonthReport.امورColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'امور' in table 'Pm_Con_Non_MonthReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Con_Non_MonthReport.امورColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isعنوان_آیتمNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_Non_MonthReport.عنوان_آیتمColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setعنوان_آیتمNull()
            Me(Me.tablePm_Con_Non_MonthReport.عنوان_آیتمColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتعدادNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_Non_MonthReport.تعدادColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتعدادNull()
            Me(Me.tablePm_Con_Non_MonthReport.تعدادColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsقیمتNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_Non_MonthReport.قیمتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetقیمتNull()
            Me(Me.tablePm_Con_Non_MonthReport.قیمتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsواحدNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_Non_MonthReport.واحدColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetواحدNull()
            Me(Me.tablePm_Con_Non_MonthReport.واحدColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsماهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_Non_MonthReport.ماهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetماهNull()
            Me(Me.tablePm_Con_Non_MonthReport.ماهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsسالNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_Non_MonthReport.سالColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetسالNull()
            Me(Me.tablePm_Con_Non_MonthReport.سالColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsنوعNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_Non_MonthReport.نوعColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetنوعNull()
            Me(Me.tablePm_Con_Non_MonthReport.نوعColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsمنبعNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_Non_MonthReport.منبعColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetمنبعNull()
            Me(Me.tablePm_Con_Non_MonthReport.منبعColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsامورNull() As Boolean
            Return Me.IsNull(Me.tablePm_Con_Non_MonthReport.امورColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetامورNull()
            Me(Me.tablePm_Con_Non_MonthReport.امورColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Con_UnitRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Con_UnitRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Con_UnitRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Con_UnitRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Con_ItemRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Con_ItemRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Con_ItemRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Con_ItemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Con_ContractRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Con_ContractRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Con_ContractRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Con_ContractRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Con_VahedRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Con_VahedRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Con_VahedRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Con_VahedRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Con_ContractItemsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Con_ContractItemsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Con_ContractItemsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Con_ContractItemsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class pm_con_ContractItemsTarikhRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As pm_con_ContractItemsTarikhRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As pm_con_ContractItemsTarikhRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As pm_con_ContractItemsTarikhRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class pm_con_WorkformRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As pm_con_WorkformRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As pm_con_WorkformRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As pm_con_WorkformRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Con_StatusStatementRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Con_StatusStatementRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Con_StatusStatementRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Con_StatusStatementRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Con_UsedItemRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Con_UsedItemRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Con_UsedItemRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Con_UsedItemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Con_StatusStatementVwRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Con_StatusStatementVwRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Con_StatusStatementVwRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Con_StatusStatementVwRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Con_SourceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Con_SourceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Con_SourceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Con_SourceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class pm_con_AllItemRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As pm_con_AllItemRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As pm_con_AllItemRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As pm_con_AllItemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_MonthRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_MonthRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_MonthRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_MonthRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Con_StatusStatementTypeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Con_StatusStatementTypeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Con_StatusStatementTypeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Con_StatusStatementTypeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Con_Contract1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Con_Contract1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Con_Contract1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Con_Contract1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_con_ContratZaribRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_con_ContratZaribRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_con_ContratZaribRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_con_ContratZaribRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Con_MonthReportAmountRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Con_MonthReportAmountRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Con_MonthReportAmountRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Con_MonthReportAmountRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class pm_Con_Rp_RemainedItemRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As pm_Con_Rp_RemainedItemRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As pm_Con_Rp_RemainedItemRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As pm_Con_Rp_RemainedItemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_con_vahedWeightRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_con_vahedWeightRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_con_vahedWeightRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_con_vahedWeightRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_con_StatusStatementDetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_con_StatusStatementDetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_con_StatusStatementDetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_con_StatusStatementDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Con_ExcelMonthReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Con_ExcelMonthReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Con_ExcelMonthReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Con_ExcelMonthReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Con_StatusstatementItemVwRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Con_StatusstatementItemVwRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Con_StatusstatementItemVwRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Con_StatusstatementItemVwRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Con_GroupWeightRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Con_GroupWeightRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Con_GroupWeightRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Con_GroupWeightRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Con_NavahiWeightRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Con_NavahiWeightRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Con_NavahiWeightRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Con_NavahiWeightRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Rp_Pm_MonthReport_OmoorRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Rp_Pm_MonthReport_OmoorRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Rp_Pm_MonthReport_OmoorRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Rp_Pm_MonthReport_OmoorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class pm_con_statusStatementItemRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As pm_con_statusStatementItemRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As pm_con_statusStatementItemRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As pm_con_statusStatementItemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Rp_Pm_MonthReport_OmoorVahedRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Rp_Pm_MonthReport_OmoorVahedRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Rp_Pm_MonthReport_OmoorVahedRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Rp_Pm_MonthReport_OmoorVahedRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Con_MonthReport_DetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Con_MonthReport_DetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Con_MonthReport_DetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Con_MonthReport_DetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Con_SaveEzafekarRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Con_SaveEzafekarRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Con_SaveEzafekarRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Con_SaveEzafekarRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_con_MonthReportGrouupConfirmPriceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_con_MonthReportGrouupConfirmPriceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_con_MonthReportGrouupConfirmPriceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_con_MonthReportGrouupConfirmPriceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_MonthReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_MonthReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_MonthReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_MonthReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Con_Non_MonthReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Con_Non_MonthReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Con_Non_MonthReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Con_Non_MonthReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace Ds_ConTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Con_UnitTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Con_Unit"
            tableMapping.ColumnMappings.Add("srl", "srl")
            tableMapping.ColumnMappings.Add("name", "name")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "Select srl,name from pm_con_unit"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Pm_Con_UnitDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Con.Pm_Con_UnitDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Con.Pm_Con_UnitDataTable = New Ds_Con.Pm_Con_UnitDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Con_ItemTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Con_Item"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("کد", "کد")
            tableMapping.ColumnMappings.Add("عنوان", "عنوان")
            tableMapping.ColumnMappings.Add("توضیحات", "توضیحات")
            tableMapping.ColumnMappings.Add("واحد شمارش", "واحد شمارش")
            tableMapping.ColumnMappings.Add("واحد کاری", "واحد کاری")
            tableMapping.ColumnMappings.Add("ولتاژ", "ولتاژ")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "Select pm_con_item. Srl,pm_con_item.Code as کد, title as عنوان,description as توض"& _ 
                "یحات,voltage as ولتاژ,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"pm_con_unit.name as [واحد شمارش],Pm_Vahed.Name as [واحد "& _ 
                "کاری]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from pm_con_unit join pm_con_item on pm_con_item.srl_unit = pm_con_unit.s"& _ 
                "rl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"join Pm_Vahed on pm_vahed.Srl = srl_vahed"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where (Pm_Vahed.Srl = @Srl_Vahed "& _ 
                " or @Srl_Vahed=-1) and "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(sstype=@Type or @Type =-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Vahed", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "sstype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Pm_Con_ItemDataTable, ByVal Srl_Vahed As Integer, ByVal Type As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_Vahed,Integer)
            If (Type.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Type.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Srl_Vahed As Integer, ByVal Type As Global.System.Nullable(Of Boolean)) As Ds_Con.Pm_Con_ItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_Vahed,Integer)
            If (Type.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Type.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Ds_Con.Pm_Con_ItemDataTable = New Ds_Con.Pm_Con_ItemDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Con_ContractTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Con_Contract"
            tableMapping.ColumnMappings.Add("srl", "srl")
            tableMapping.ColumnMappings.Add("عنوان", "عنوان")
            tableMapping.ColumnMappings.Add("توضیحات", "توضیحات")
            tableMapping.ColumnMappings.Add("تاریخ شروع", "تاریخ شروع")
            tableMapping.ColumnMappings.Add("تاریخ خاتمه", "تاریخ خاتمه")
            tableMapping.ColumnMappings.Add("کد", "کد")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "Select srl,code as [کد],title as عنوان ,description as توضیحات,startDate as [تاری"& _ 
                "خ شروع], endDate as[تاریخ خاتمه]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from pm_con_contract"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"order by  pm_con_contrac"& _ 
                "t.srl DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Pm_Con_ContractDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Con.Pm_Con_ContractDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Con.Pm_Con_ContractDataTable = New Ds_Con.Pm_Con_ContractDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Con_VahedTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Con_Vahed"
            tableMapping.ColumnMappings.Add("srl_vahed", "srl_vahed")
            tableMapping.ColumnMappings.Add("نام", "نام")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select distinct srl_vahed,pm_vahed.Name as نام from pm_con_item join"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Pm_Vahed on"& _ 
                " srl_vahed = pm_vahed.srl"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Pm_Con_VahedDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Con.Pm_Con_VahedDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Con.Pm_Con_VahedDataTable = New Ds_Con.Pm_Con_VahedDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Con_ContractItemsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Con_ContractItems"
            tableMapping.ColumnMappings.Add("srl", "srl")
            tableMapping.ColumnMappings.Add("کد", "کد")
            tableMapping.ColumnMappings.Add("عنوان", "عنوان")
            tableMapping.ColumnMappings.Add("مقدار", "مقدار")
            tableMapping.ColumnMappings.Add("قیمت", "قیمت")
            tableMapping.ColumnMappings.Add("دوره زمانی", "دوره زمانی")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select pm_con_contractitems.srl, pm_con_item.code as کد "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&",pm_con_item.title as ع"& _ 
                "نوان, pm_con_contractitems.amount as مقدار,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"pm_con_contractitems.price as قیمت "& _ 
                ", pm_con_contractitems.period as [دوره زمانی]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from  pm_con_contract join pm_con"& _ 
                "_contractitems on "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"srl_contract = pm_con_contract.srl join pm_con_item on"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"srl_"& _ 
                "item = pm_con_item.srl "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where ( srl_vahed = @srl_vahed or @srl_vahed =-1) and ("& _ 
                "srl_contract = @Srl_contract or @Srl_contract=-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(sstype=@sstype or @ssty"& _ 
                "pe=-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_vahed", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Vahed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_contract", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Contract", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sstype", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sstype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Pm_Con_ContractItemsDataTable, ByVal srl_vahed As Global.System.Nullable(Of Integer), ByVal Srl_contract As Global.System.Nullable(Of Integer), ByVal sstype As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (srl_vahed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(srl_vahed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Srl_contract.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Srl_contract.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (sstype.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(sstype.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal srl_vahed As Global.System.Nullable(Of Integer), ByVal Srl_contract As Global.System.Nullable(Of Integer), ByVal sstype As Global.System.Nullable(Of Integer)) As Ds_Con.Pm_Con_ContractItemsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (srl_vahed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(srl_vahed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Srl_contract.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Srl_contract.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (sstype.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(sstype.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Ds_Con.Pm_Con_ContractItemsDataTable = New Ds_Con.Pm_Con_ContractItemsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class pm_con_ContractItemsTarikhTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "pm_con_ContractItemsTarikh"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("کد", "کد")
            tableMapping.ColumnMappings.Add("عنوان", "عنوان")
            tableMapping.ColumnMappings.Add("تعداد", "تعداد")
            tableMapping.ColumnMappings.Add("قیمت", "قیمت")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select Pm_Con_ContractItems.Srl ,Pm_Con_Item .Code کد"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&",Pm_Con_Item .Title عنوان,"& _ 
                " Amount تعداد,Price قیمت from Pm_Con_ContractItems join Pm_Con_Item on Pm_Con_It"& _ 
                "em .Srl=Srl_Item"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"join Pm_Con_Contract on Pm_Con_Contract .Srl = Srl_Contract "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "where StartDate<=@Tarikh and EndDate >=@Tarikh and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(srl_vahed = @srl_vahed or @"& _ 
                "srl_vahed=-1) and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(sstype=@sstype or @sstype=-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tarikh", Global.System.Data.SqlDbType.NVarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_vahed", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Vahed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sstype", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "sstype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.pm_con_ContractItemsTarikhDataTable, ByVal Tarikh As String, ByVal srl_vahed As Global.System.Nullable(Of Integer), ByVal sstype As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Tarikh Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Tarikh,String)
            End If
            If (srl_vahed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(srl_vahed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (sstype.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(sstype.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Tarikh As String, ByVal srl_vahed As Global.System.Nullable(Of Integer), ByVal sstype As Global.System.Nullable(Of Boolean)) As Ds_Con.pm_con_ContractItemsTarikhDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Tarikh Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Tarikh,String)
            End If
            If (srl_vahed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(srl_vahed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (sstype.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(sstype.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Ds_Con.pm_con_ContractItemsTarikhDataTable = New Ds_Con.pm_con_ContractItemsTarikhDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class pm_con_WorkformTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "pm_con_Workform"
            tableMapping.ColumnMappings.Add("نام پست", "نام پست")
            tableMapping.ColumnMappings.Add("نام واحد", "نام واحد")
            tableMapping.ColumnMappings.Add("نام گروه", "نام گروه")
            tableMapping.ColumnMappings.Add("تاریخ", "تاریخ")
            tableMapping.ColumnMappings.Add("شماره", "شماره")
            tableMapping.ColumnMappings.Add("srl", "srl")
            tableMapping.ColumnMappings.Add("Srl_Pm_Vahed", "Srl_Pm_Vahed")
            tableMapping.ColumnMappings.Add("srl_pm_post", "srl_pm_post")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select  Pm_WorkForm_Master .srl,isnull(pm_post.Name,'') as [نام پست],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"isnull(Pm_"& _ 
                "Vahed .Name,'') as [نام واحد],Pm_WorkForm_Master.Srl_Pm_Vahed  ,pm_post.srl as s"& _ 
                "rl_pm_post,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"isnull(Pm_Group .Name,'')as   [نام گروه],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"workformTarikh تاریخ,Pm_"& _ 
                "WorkForm_Master.No شماره"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" from Pm_WorkForm_Master left  join Pm_Post on pm_post"& _ 
                ".Srl = Srl_Pm_Post_From "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm_Group on Pm_Group.Srl = Srl_Pm_Group "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"le"& _ 
                "ft join Pm_Vahed on Pm_Vahed.Srl =Pm_WorkForm_Master.Srl_Pm_Vahed "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where (Pm_Wo"& _ 
                "rkForm_Master.No = @Number or @Number=-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (Pm_WorkForm_Master.srl=@Srl_Work"& _ 
                "Form or @Srl_WorkForm=-1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Number", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "شماره", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_WorkForm", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.pm_con_WorkformDataTable, ByVal Number As Global.System.Nullable(Of Integer), ByVal Srl_WorkForm As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Number.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Number.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Srl_WorkForm,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Number As Global.System.Nullable(Of Integer), ByVal Srl_WorkForm As Integer) As Ds_Con.pm_con_WorkformDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Number.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Number.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Srl_WorkForm,Integer)
            Dim dataTable As Ds_Con.pm_con_WorkformDataTable = New Ds_Con.pm_con_WorkformDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Con_StatusStatementTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Con_StatusStatement"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("Srl_vahed", "Srl_vahed")
            tableMapping.ColumnMappings.Add("Srl_group", "Srl_group")
            tableMapping.ColumnMappings.Add("Srl_post", "Srl_post")
            tableMapping.ColumnMappings.Add("Srl_Line", "Srl_Line")
            tableMapping.ColumnMappings.Add("نام پست", "نام پست")
            tableMapping.ColumnMappings.Add("نام واحد", "نام واحد")
            tableMapping.ColumnMappings.Add("نام گروه", "نام گروه")
            tableMapping.ColumnMappings.Add("تاریخ", "تاریخ")
            tableMapping.ColumnMappings.Add("نام خط", "نام خط")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("شماره", "شماره")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Pm_Con_StatusStatement.Srl, Pm_Con_StatusStatement.Number شماره"&Global.Microsoft.VisualBasic.ChrW(9)&", P"& _ 
                "m_Con_StatusStatement.Tarikh تاریخ, Pm_Con_StatusStatement.Srl_vahed, Pm_Con_Sta"& _ 
                "tusStatement.Srl_group, Pm_Con_StatusStatement.Srl_post, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "    Pm_Con_StatusStatement.Srl_Line"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&",pm_post.Name [نام پست],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Pm_Vahed .Name [ن"& _ 
                "ام واحد],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Pm_Group .Name as [نام گروه],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"pm_line.name as [نام خط],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Description"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Pm_Con_StatusStatement INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         "& _ 
                "Pm_Vahed ON Pm_Con_StatusStatement.Srl_vahed = Pm_Vahed.Srl INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "                 Pm_Group ON Pm_Con_StatusStatement.Srl_group = Pm_Group.Srl lef"& _ 
                "t JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Post ON Pm_Con_StatusStatement.Srl_post = Pm"& _ 
                "_Post.Srl left JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Line ON Pm_Con_StatusStatement."& _ 
                "Srl_Line = Pm_Line.Srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where (@Number=-1 or Number=@Number  ) and (Pm_Con_Statu"& _ 
                "sStatement.Srl=@Srl or @Srl=-1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Number", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "شماره", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Pm_Con_StatusStatementDataTable, ByVal Number As Global.System.Nullable(Of Integer), ByVal Srl As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Number.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Number.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Srl,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Number As Global.System.Nullable(Of Integer), ByVal Srl As Integer) As Ds_Con.Pm_Con_StatusStatementDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Number.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Number.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Srl,Integer)
            Dim dataTable As Ds_Con.Pm_Con_StatusStatementDataTable = New Ds_Con.Pm_Con_StatusStatementDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Con_UsedItemTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Con_UsedItem"
            tableMapping.ColumnMappings.Add("Amount", "Amount")
            tableMapping.ColumnMappings.Add("used", "used")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select isnull(t1.Amount,1) as Amount ,isnull(t2.amount,0)as used    from "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(selec"& _ 
                "t amount from Pm_Con_ContractItems where Srl=@srl)as t1,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"( select SUM(confirm_a"& _ 
                "mount)as amount from Pm_Con_StatusStatementItem "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where srl_contractItem =@srl)a"& _ 
                "s t2"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Pm_Con_UsedItemDataTable, ByVal srl As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(srl,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal srl As Integer) As Ds_Con.Pm_Con_UsedItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(srl,Integer)
            Dim dataTable As Ds_Con.Pm_Con_UsedItemDataTable = New Ds_Con.Pm_Con_UsedItemDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Con_StatusStatementVwTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Con_StatusStatementVw"
            tableMapping.ColumnMappings.Add("شماره", "شماره")
            tableMapping.ColumnMappings.Add("تاریخ", "تاریخ")
            tableMapping.ColumnMappings.Add("نام واحد", "نام واحد")
            tableMapping.ColumnMappings.Add("نام گروه", "نام گروه")
            tableMapping.ColumnMappings.Add("نام پست", "نام پست")
            tableMapping.ColumnMappings.Add("نام خط", "نام خط")
            tableMapping.ColumnMappings.Add("نوع", "نوع")
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("Srl_vahed", "Srl_vahed")
            tableMapping.ColumnMappings.Add("Srl_group", "Srl_group")
            tableMapping.ColumnMappings.Add("srl_post", "srl_post")
            tableMapping.ColumnMappings.Add("srl_line", "srl_line")
            tableMapping.ColumnMappings.Add("is_cancle", "is_cancle")
            tableMapping.ColumnMappings.Add("is_night", "is_night")
            tableMapping.ColumnMappings.Add("is_holiday", "is_holiday")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select شماره,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"تاریخ ,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"[نام واحد],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" [نام گروه],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"[نام پست],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" [نام خط],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"t3.نوع"& _ 
                ","&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"t3.Srl,Srl_vahed,Srl_group,srl_post,  srl_line,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ISNULL(is_cancle,0)as is_can"& _ 
                "cle,ISNULL(is_night,0)as is_night,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"isnull(is_holiday,0)as is_holiday from ("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT        Pm_Con_StatusStatement.Number شماره"&Global.Microsoft.VisualBasic.ChrW(9)&", Pm_Con_StatusStatement.Tarikh "& _ 
                "تاریخ,isnull(Pm_Vahed .Name,'') [نام واحد],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Pm_Group .Name as [نام گروه],isnull"& _ 
                "(pm_post.Name,'') [نام پست],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"isnull(Pm_Line  .Name,'') as [نام خط],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'غیر فرم ک"& _ 
                "ار' as نوع,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" Pm_Con_StatusStatement.Srl,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" Pm_Con_StatusStatement.Srl_vahed,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "Pm_Con_StatusStatement.Srl_group,ISNULL( Pm_Con_StatusStatement.Srl_post,0) srl_"& _ 
                "post, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                        ISNULL( Pm_Con_StatusStatement.Srl_Line,0) srl_l"& _ 
                "ine"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Pm_Con_StatusStatement INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "   Pm_Vahed ON Pm_Con_StatusStatement.Srl_vahed = Pm_Vahed.Srl INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                    Pm_Group ON Pm_Con_StatusStatement.Srl_group = Pm_Group.Srl "& _ 
                "left JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Post ON Pm_Con_StatusStatement.Srl_post ="& _ 
                " Pm_Post.Srl left JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Line ON Pm_Con_StatusStateme"& _ 
                "nt.Srl_Line = Pm_Line.Srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"union                  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT        Pm_WorkForm_Ma"& _ 
                "ster.No شماره"&Global.Microsoft.VisualBasic.ChrW(9)&", Pm_WorkForm_Master.WorkFormTarikh تاریخ, Pm_Vahed .Name [نام واح"& _ 
                "د],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Pm_Group .Name as [نام گروه],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"pm_post.Name [نام پست],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'' as [نام خط],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'ف"& _ 
                "رم کار' as نوع,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" Pm_WorkForm_Master.Srl,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Pm_WorkForm_Master.Srl_pm_vahed as sr"& _ 
                "l_vahed, Pm_WorkForm_Master.Srl_pm_group as srl_group,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" Pm_WorkForm_Master.Srl_"& _ 
                "Pm_Post_From as srl_post, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         0 as srl_line"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM        "& _ 
                "    Pm_WorkForm_Master  INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Vahed ON Pm_Work"& _ 
                "Form_Master.Srl_Pm_Vahed = Pm_Vahed.Srl INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_"& _ 
                "Group ON Pm_WorkForm_Master.Srl_Pm_Group = Pm_Group.Srl left JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "            Pm_Post ON Pm_WorkForm_Master.Srl_Pm_Post_From = Pm_Post.Srl "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where"& _ 
                " Pm_WorkForm_Master .srl in (select Srl_workform_master from Pm_Con_StatusStatem"& _ 
                "entItem )"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&")as t3 left join ("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"select distinct is_holiday, is_night, is_cancle,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"case when Srl_StatusStatement IS null then Srl_workform_master "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"else Srl_Statu"& _ 
                "sStatement end as srl,case when Srl_StatusStatement IS null then 'فرم کار'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"else"& _ 
                " 'غیر فرم کار' end as نوع from Pm_Con_StatusStatementItem ) as t2 "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"on (t2.srl ="& _ 
                " t3.Srl and t2.[نوع] = t3.[نوع] )"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where (Srl_vahed = @Srl_Vahed or @Srl_Vahed ="& _ 
                "-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (Srl_group = @srl_group or @srl_group= -1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (srl_line =@srl_line or"& _ 
                " @srl_line =  -1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (srl_post = @srl_post or @srl_post =-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and ([تاریخ] >= "& _ 
                "@StartDate or @StartDate='-1')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and ([تاریخ] <= @EndDate or @EndDate='-1')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Vahed", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_vahed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_group", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_group", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_line", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "srl_line", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_post", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "srl_post", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.NVarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "تاریخ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EndDate", Global.System.Data.SqlDbType.NVarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "تاریخ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Pm_Con_StatusStatementVwDataTable, ByVal Srl_Vahed As Global.System.Nullable(Of Integer), ByVal srl_group As Global.System.Nullable(Of Integer), ByVal srl_line As Integer, ByVal srl_post As Integer, ByVal StartDate As String, ByVal EndDate As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_Vahed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_Vahed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (srl_group.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(srl_group.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(srl_line,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(srl_post,Integer)
            If (StartDate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(StartDate,String)
            End If
            If (EndDate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(EndDate,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Srl_Vahed As Global.System.Nullable(Of Integer), ByVal srl_group As Global.System.Nullable(Of Integer), ByVal srl_line As Integer, ByVal srl_post As Integer, ByVal StartDate As String, ByVal EndDate As String) As Ds_Con.Pm_Con_StatusStatementVwDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_Vahed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_Vahed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (srl_group.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(srl_group.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(srl_line,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(srl_post,Integer)
            If (StartDate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(StartDate,String)
            End If
            If (EndDate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(EndDate,String)
            End If
            Dim dataTable As Ds_Con.Pm_Con_StatusStatementVwDataTable = New Ds_Con.Pm_Con_StatusStatementVwDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Con_SourceTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Con_Source"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("عنوان", "عنوان")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [pm_con_source] WHERE (([Srl] = @Original_Srl) AND ((@IsNull_عنوان = "& _ 
                "1 AND [Name] IS NULL) OR ([Name] = @Original_عنوان)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_عنوان", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عنوان", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_عنوان", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عنوان", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [pm_con_source] ([Name]) VALUES (@عنوان);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Srl, Name AS عنوان "& _ 
                "FROM Pm_Con_Source WHERE (Srl = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@عنوان", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عنوان", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [pm_con_source] SET [Name] = @عنوان WHERE (([Srl] = @Original_Srl) AND ((@"& _ 
                "IsNull_عنوان = 1 AND [Name] IS NULL) OR ([Name] = @Original_عنوان)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Sr"& _ 
                "l, Name AS عنوان FROM Pm_Con_Source WHERE (Srl = @Srl)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@عنوان", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عنوان", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_عنوان", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عنوان", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_عنوان", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عنوان", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "Select  Srl,name عنوان"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from pm_con_source"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Pm_Con_SourceDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Con.Pm_Con_SourceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Con.Pm_Con_SourceDataTable = New Ds_Con.Pm_Con_SourceDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds_Con.Pm_Con_SourceDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds_Con) As Integer
            Return Me.Adapter.Update(dataSet, "Pm_Con_Source")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Srl As Integer, ByVal Original_عنوان As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Srl,Integer)
            If (Original_عنوان Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_عنوان")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_عنوان,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal عنوان As String) As Integer
            If (عنوان Is Nothing) Then
                Throw New Global.System.ArgumentNullException("عنوان")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(عنوان,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal عنوان As String, ByVal Original_Srl As Integer, ByVal Original_عنوان As String, ByVal Srl As Integer) As Integer
            If (عنوان Is Nothing) Then
                Throw New Global.System.ArgumentNullException("عنوان")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(عنوان,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_Srl,Integer)
            If (Original_عنوان Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_عنوان")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_عنوان,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Srl,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal عنوان As String, ByVal Original_Srl As Integer, ByVal Original_عنوان As String) As Integer
            Return Me.Update(عنوان, Original_Srl, Original_عنوان, Original_Srl)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class pm_con_AllItemTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "pm_con_AllItem"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("کد", "کد")
            tableMapping.ColumnMappings.Add("عنوان", "عنوان")
            tableMapping.ColumnMappings.Add("توضیحات", "توضیحات")
            tableMapping.ColumnMappings.Add("ولتاژ", "ولتاژ")
            tableMapping.ColumnMappings.Add("واحد شمارش", "واحد شمارش")
            tableMapping.ColumnMappings.Add("واحد کاری", "واحد کاری")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "Select pm_con_item. Srl,pm_con_item.Code as کد, title as عنوان,description as توض"& _ 
                "یحات,voltage as ولتاژ,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"pm_con_unit.name as [واحد شمارش],Pm_Vahed.Name as [واحد "& _ 
                "کاری]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from pm_con_unit join pm_con_item on pm_con_item.srl_unit = pm_con_unit.s"& _ 
                "rl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"join Pm_Vahed on pm_vahed.Srl = srl_vahed"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where (Pm_Vahed.Srl = @Srl_Vahed "& _ 
                " or @Srl_Vahed=-1) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Vahed", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.pm_con_AllItemDataTable, ByVal Srl_Vahed As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_Vahed,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Srl_Vahed As Integer) As Ds_Con.pm_con_AllItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_Vahed,Integer)
            Dim dataTable As Ds_Con.pm_con_AllItemDataTable = New Ds_Con.pm_con_AllItemDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_MonthTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Month"
            tableMapping.ColumnMappings.Add("srl", "srl")
            tableMapping.ColumnMappings.Add("name", "name")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [pm_month] ([name]) VALUES (@name)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select cast (M as int) as srl , name  from pm_month "
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Pm_MonthDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Con.Pm_MonthDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Con.Pm_MonthDataTable = New Ds_Con.Pm_MonthDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds_Con.Pm_MonthDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds_Con) As Integer
            Return Me.Adapter.Update(dataSet, "Pm_Month")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal name As String) As Integer
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Con_StatusStatementTypeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Con_StatusStatementType"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("name", "name")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [pm_con_statusStatementtype] WHERE (([Srl] = @Original_Srl) AND ((@Is"& _ 
                "Null_name = 1 AND [name] IS NULL) OR ([name] = @Original_name)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_name", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "name", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [pm_con_statusStatementtype] ([Srl], [name]) VALUES (@Srl, @name);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"S"& _ 
                "ELECT Srl, Name FROM Pm_Con_StatusStatementType WHERE (Srl = @Srl)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [pm_con_statusStatementtype] SET [Srl] = @Srl, [name] = @name WHERE (([Srl"& _ 
                "] = @Original_Srl) AND ((@IsNull_name = 1 AND [name] IS NULL) OR ([name] = @Orig"& _ 
                "inal_name)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Srl, Name FROM Pm_Con_StatusStatementType WHERE (Srl = @Sr"& _ 
                "l)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_name", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "name", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select Srl , name from pm_con_statusStatementtype"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Pm_Con_StatusStatementTypeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Con.Pm_Con_StatusStatementTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Con.Pm_Con_StatusStatementTypeDataTable = New Ds_Con.Pm_Con_StatusStatementTypeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds_Con.Pm_Con_StatusStatementTypeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds_Con) As Integer
            Return Me.Adapter.Update(dataSet, "Pm_Con_StatusStatementType")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Srl As Integer, ByVal Original_name As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Srl,Integer)
            If (Original_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Srl As Integer, ByVal name As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Srl,Integer)
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Srl As Integer, ByVal name As String, ByVal Original_Srl As Integer, ByVal Original_name As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Srl,Integer)
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_Srl,Integer)
            If (Original_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal name As String, ByVal Original_Srl As Integer, ByVal Original_name As String) As Integer
            Return Me.Update(Original_Srl, name, Original_Srl, Original_name)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Con_Contract1TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Con_Contract1"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("name", "name")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Pm_Con_Contract] WHERE (([Srl] = @Original_Srl))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Pm_Con_Contract] DEFAULT VALUES;"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Srl, Title + ' از تاریخ ' +"& _ 
                " StartDate + ' تا تاریخ ' + EndDate AS name FROM Pm_Con_Contract WHERE (Srl = SC"& _ 
                "OPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select Srl,Title +' از تاریخ '+StartDate +' تا تاریخ '+EndDate  as name from Pm_C"& _ 
                "on_Contract "
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Pm_Con_Contract1DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Con.Pm_Con_Contract1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Con.Pm_Con_Contract1DataTable = New Ds_Con.Pm_Con_Contract1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds_Con.Pm_Con_Contract1DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds_Con) As Integer
            Return Me.Adapter.Update(dataSet, "Pm_Con_Contract1")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Srl As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Srl,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert() As Integer
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_con_ContratZaribTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_con_ContratZarib"
            tableMapping.ColumnMappings.Add("srl", "srl")
            tableMapping.ColumnMappings.Add("قرارداد", "قرارداد")
            tableMapping.ColumnMappings.Add("تعطیل", "تعطیل")
            tableMapping.ColumnMappings.Add("شبانه", "شبانه")
            tableMapping.ColumnMappings.Add("کنسلی فرم", "کنسلی فرم")
            tableMapping.ColumnMappings.Add("روزقبل فرم", "روزقبل فرم")
            tableMapping.ColumnMappings.Add("کنسلی غیر فرم", "کنسلی غیر فرم")
            tableMapping.ColumnMappings.Add("روز قبل غیر فرم", "روز قبل غیر فرم")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select  pm_con_contractzarib .srl ,title as قرارداد ,holiday as تعطیل , nightwork"& _ 
                " as شبانه , WorkForm_Cancle as [کنسلی فرم], WorkForm_Cancle_BeforDay as [روزقبل "& _ 
                "فرم]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&",NonWorkForm_Cancle [کنسلی غیر فرم], NonWorkForm_Cancle_BeforeDay as [روز "& _ 
                "قبل غیر فرم]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from pm_con_contractzarib join pm_con_contract on pm_con_contract."& _ 
                "srl = srl_contract"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Pm_con_ContratZaribDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Con.Pm_con_ContratZaribDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Con.Pm_con_ContratZaribDataTable = New Ds_Con.Pm_con_ContratZaribDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Con_MonthReportAmount
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Con_MonthReportAmount"
            tableMapping.ColumnMappings.Add("Price", "Price")
            tableMapping.ColumnMappings.Add("srl_group", "srl_group")
            tableMapping.ColumnMappings.Add("name", "name")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select m.*,name from ("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"select isnull(SUM(p),0)as Price,srl_group  from (  select"& _ 
                " Pm_Con_StatusStatementItem.*,Pm_Con_ContractItems .srl_contract,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" floor(Pm_Con"& _ 
                "_StatusStatementItem.CalcPrice * Pm_Con_StatusStatementItem.Amount)  as p,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"case"& _ 
                " when Pm_Con_StatusStatementItem.Srl_workform_master  is null then Pm_Con_Status"& _ 
                "Statement.Srl_vahed "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"else Pm_WorkForm_Master.Srl_Pm_Vahed End as srl_vahed,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ca"& _ 
                "se when Pm_Con_StatusStatementItem.Srl_workform_master  is null then "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"case when"& _ 
                " Pm_Con_StatusStatement .Srl_post IS null then Pm_Con_StatusStatement.Srl_Line "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"else Pm_Con_StatusStatement.Srl_post End else  Pm_WorkForm_Master.Srl_Pm_Post_F"& _ 
                "rom End as srl_Post,case when Pm_Con_StatusStatementItem.Srl_workform_master  is"& _ 
                " null then Pm_Con_StatusStatement.Srl_group "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"else Pm_WorkForm_Master.Srl_Pm_Gro"& _ 
                "up End as srl_group,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"case"&Global.Microsoft.VisualBasic.ChrW(9)&"when not PDStatus .srl is null then PDStatus.Srl_Pm_P"& _ 
                "ostType "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when not  PDWorkForm.srl is null then PDWorkForm.srl_pm_posttype"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"else"& _ 
                " Pm_Line.Srl_Pm_PostType End as srl_Omoor, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"case when not Pm_Con_StatusStatemen"& _ 
                "t .Tarikh IS null then"&Global.Microsoft.VisualBasic.ChrW(9)&"CAST(SUBSTRING(Pm_Con_StatusStatement.Tarikh,6,2)As int )"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"else CAST(SUBSTRING(Pm_WorkForm_Master.WorkFormTarikh ,6,2)as int )end as _Mon"& _ 
                "th ,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"case when not Pm_Con_StatusStatement .Tarikh IS null then"&Global.Microsoft.VisualBasic.ChrW(9)&"CAST(SUBSTRING(P"& _ 
                "m_Con_StatusStatement.Tarikh,1,4)As int )"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"else CAST(SUBSTRING(Pm_WorkForm_Maste"& _ 
                "r.WorkFormTarikh,1,4)as int )"&Global.Microsoft.VisualBasic.ChrW(9)&"end as _Year , sstype"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from Pm_Con_StatusStatement"& _ 
                "Item left join Pm_Con_StatusStatement on Pm_Con_StatusStatement .Srl = Srl_Statu"& _ 
                "sStatement "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm_WorkForm_Master on Pm_WorkForm_Master .srl =Srl_workfo"& _ 
                "rm_master  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm_Post as PStatus on Pm_Con_StatusStatement  .Srl_post  "& _ 
                "=PStatus.Srl "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm_PostDetails PDStatus on PStatus.Srl  = PDStatus.Srl_"& _ 
                "Pm_Post"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm_Con_ContractItems  on Pm_Con_ContractItems.Srl = srl_contr"& _ 
                "actItem  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm_Con_Item on pm_con_item.Srl = Pm_Con_ContractItems.Srl_I"& _ 
                "tem  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm_Post as pWorkForm on Pm_WorkForm_Master .Srl_Pm_Post_From =p"& _ 
                "WorkForm.Srl  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm_PostDetails PDWorkForm on pWorkForm.Srl  = PDWorkFo"& _ 
                "rm.Srl_Pm_Post "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm_Line on Srl_Line = Pm_Line .Srl "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" ) t where  (t.s"& _ 
                "rl_Omoor=@Srl_Omoor Or  @Srl_Omoor =-1)and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           ( t.srl_vahed = @Srl_vahe"& _ 
                "d or @Srl_vahed=-1)  and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           (Srl_Source =@srl_Source or @srl_Source=-1)"& _ 
                " and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           (_Year = @Year or @Year=-1) and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           (_Month = @Month or"& _ 
                " @Month=-1)   and "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            (sstype = @PMorNOT or @PMorNOT=-1)and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "  (t.Srl_contract = @Srl_Contract or @Srl_Contract=-1)and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(t.Srl_contract = @Sr"& _ 
                "l_Contract or @Srl_Contract=-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"group by srl_group )as m join Pm_Group on srl_g"& _ 
                "roup = Pm_Group .srl"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Omoor", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_vahed", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_Source", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Year", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Month", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PMorNOT", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Contract", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Pm_Con_MonthReportAmountDataTable, ByVal Srl_Omoor As String, ByVal Srl_vahed As String, ByVal srl_Source As Global.System.Nullable(Of Integer), ByVal Year As String, ByVal Month As String, ByVal PMorNOT As Global.System.Nullable(Of Integer), ByVal Srl_Contract As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_Omoor Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Srl_Omoor")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_Omoor,String)
            End If
            If (Srl_vahed Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Srl_vahed")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Srl_vahed,String)
            End If
            If (srl_Source.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(srl_Source.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Year Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Year")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Year,String)
            End If
            If (Month Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Month")
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Month,String)
            End If
            If (PMorNOT.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(PMorNOT.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Srl_Contract.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(Srl_Contract.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Srl_Omoor As String, ByVal Srl_vahed As String, ByVal srl_Source As Global.System.Nullable(Of Integer), ByVal Year As String, ByVal Month As String, ByVal PMorNOT As Global.System.Nullable(Of Integer), ByVal Srl_Contract As Global.System.Nullable(Of Integer)) As Ds_Con.Pm_Con_MonthReportAmountDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_Omoor Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Srl_Omoor")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_Omoor,String)
            End If
            If (Srl_vahed Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Srl_vahed")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Srl_vahed,String)
            End If
            If (srl_Source.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(srl_Source.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Year Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Year")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Year,String)
            End If
            If (Month Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Month")
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Month,String)
            End If
            If (PMorNOT.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(PMorNOT.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Srl_Contract.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(Srl_Contract.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Ds_Con.Pm_Con_MonthReportAmountDataTable = New Ds_Con.Pm_Con_MonthReportAmountDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class pm_Con_Rp_RemainedItemTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "pm_Con_Rp_RemainedItem"
            tableMapping.ColumnMappings.Add("itemcode", "itemcode")
            tableMapping.ColumnMappings.Add("ItemTitle", "ItemTitle")
            tableMapping.ColumnMappings.Add("allamount", "allamount")
            tableMapping.ColumnMappings.Add("DoAmount", "DoAmount")
            tableMapping.ColumnMappings.Add("diff", "diff")
            tableMapping.ColumnMappings.Add("price", "price")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select itemcode ,ItemTitle ,SUM(distinct Amount )as allamount,SUM(DoAmount)as DoA"& _ 
                "mount , SUM(distinct Amount )-SUM(DoAmount) as diff,price   from ("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"select case "& _ 
                "when Pm_Con_StatusStatement.Tarikh IS null then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"Pm_WorkForm_Master.WorkFormTar"& _ 
                "ikh "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"else"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"Pm_Con_StatusStatement .Tarikh end as tarikh,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"  case when Srl_wo"& _ 
                "rkform_master  is null then "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"case when Pm_Con_StatusStatement .Srl_post IS nul"& _ 
                "l then Pm_Con_StatusStatement.Srl_Line "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"else Pm_Con_StatusStatement.Srl_post E"& _ 
                "nd else  Pm_WorkForm_Master.Srl_Pm_Post_From End as srl_Post,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"pm_vahed.Srl as "& _ 
                "srlvahed,Pm_Vahed .Name ,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" Pm_Con_Item .sstype ,case when Srl_workform_master  "& _ 
                "is null then 0 else 1 end as isworkform,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" Pm_Con_Item .Code ,Pm_Con_Item .Is_st"& _ 
                "arred,pm_con_item.Title ,Pm_Con_ContractItems .Amount , Pm_Con_ContractItems .Pr"& _ 
                "ice ,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"case when Pm_WorkForm_Master.Srl   IS null and Pm_Con_StatusStatement .Sr"& _ 
                "l IS null then 0 else"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  Pm_Con_StatusStatementItem .Amount end as DoAmount, Pm_"& _ 
                "Con_Item .Srl as SrlItem"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  ,Pm_Con_Item.Code as ItemCode,Pm_Con_Item.Title  as "& _ 
                "ItemTitle"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from  (select * from  Pm_Con_ContractItems where  Pm_Con_ContractItem"& _ 
                "s .Srl_Contract =@Contract )Pm_Con_ContractItems  left  join Pm_Con_StatusStatem"& _ 
                "entItem on Pm_Con_ContractItems .srl=srl_contractItem "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"join Pm_Con_Item on Pm_C"& _ 
                "on_Item .Srl = Srl_Item and Pm_Con_Item .Srl_Vahed = @vahed and (Pm_Con_Item .ss"& _ 
                "type = @sstype or @sstype=-1) and (Pm_Con_Item .Is_starred = @star or @star=-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm_WorkForm_Master on Pm_Con_StatusStatementItem .Srl_workform_master"& _ 
                " = Pm_WorkForm_Master .srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"and not Srl_workform_master is null and (Pm_WorkFor"& _ 
                "m_Master.Srl_Pm_Post_From=@post or @post=-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"and (not Srl_workform_master is"& _ 
                " null and (Pm_WorkForm_Master .WorkFormTarikh  >=@StartDate or @StartDate='-1'))"& _ 
                " "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"and (not Srl_workform_master is null and (Pm_WorkForm_Master .WorkFormTarik"& _ 
                "h <=@EndDate or @EndDate='-1')) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"and (@isWorkform=1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm_Con_Status"& _ 
                "Statement on Pm_Con_StatusStatementItem.Srl_StatusStatement = Pm_Con_StatusState"& _ 
                "ment .Srl "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"and ((Srl_workform_master is null and Pm_Con_StatusStatement .Srl_"& _ 
                "Line is null and (Pm_Con_StatusStatement .Srl_post  =@post or @post=-1) )"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"or("& _ 
                "Srl_workform_master is null and Pm_Con_StatusStatement .Srl_post  is null and (P"& _ 
                "m_Con_StatusStatement .Srl_Line  =@post or @post=-1)))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"and (Srl_workform_mast"& _ 
                "er is null and (Pm_Con_StatusStatement .Tarikh >=@StartDate or @StartDate='-1'))"& _ 
                " "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"and (Srl_workform_master is null and (Pm_Con_StatusStatement .Tarikh <=@End"& _ 
                "Date or @EndDate='-1')) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"and (@isStatusStatement=1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" left join  Pm_Vahed on "& _ 
                "(Pm_Vahed.Srl = Pm_Con_StatusStatement .Srl_vahed or Pm_Vahed.Srl= Pm_WorkForm_M"& _ 
                "aster.Srl_Pm_Vahed ) and "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"pm_vahed.Srl = @vahed"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&")as t"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"group by itemc"& _ 
                "ode ,ItemTitle ,price"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"order by itemcode "
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vahed", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sstype", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sstype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@star", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Is_starred", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@post", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.NVarChar, 11, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EndDate", Global.System.Data.SqlDbType.NVarChar, 11, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isWorkform", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isStatusStatement", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contract", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.pm_Con_Rp_RemainedItemDataTable, ByVal vahed As Global.System.Nullable(Of Integer), ByVal sstype As Global.System.Nullable(Of Integer), ByVal star As Global.System.Nullable(Of Integer), ByVal post As Global.System.Nullable(Of Integer), ByVal StartDate As String, ByVal EndDate As String, ByVal isWorkform As String, ByVal isStatusStatement As String, ByVal Contract As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (vahed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(vahed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (sstype.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(sstype.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (star.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(star.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (post.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(post.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (StartDate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(StartDate,String)
            End If
            If (EndDate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(EndDate,String)
            End If
            If (isWorkform Is Nothing) Then
                Throw New Global.System.ArgumentNullException("isWorkform")
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(isWorkform,String)
            End If
            If (isStatusStatement Is Nothing) Then
                Throw New Global.System.ArgumentNullException("isStatusStatement")
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(isStatusStatement,String)
            End If
            If (Contract.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(Contract.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal vahed As Global.System.Nullable(Of Integer), ByVal sstype As Global.System.Nullable(Of Integer), ByVal star As Global.System.Nullable(Of Integer), ByVal post As Global.System.Nullable(Of Integer), ByVal StartDate As String, ByVal EndDate As String, ByVal isWorkform As String, ByVal isStatusStatement As String, ByVal Contract As Global.System.Nullable(Of Integer)) As Ds_Con.pm_Con_Rp_RemainedItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (vahed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(vahed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (sstype.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(sstype.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (star.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(star.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (post.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(post.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (StartDate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(StartDate,String)
            End If
            If (EndDate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(EndDate,String)
            End If
            If (isWorkform Is Nothing) Then
                Throw New Global.System.ArgumentNullException("isWorkform")
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(isWorkform,String)
            End If
            If (isStatusStatement Is Nothing) Then
                Throw New Global.System.ArgumentNullException("isStatusStatement")
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(isStatusStatement,String)
            End If
            If (Contract.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(Contract.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Ds_Con.pm_Con_Rp_RemainedItemDataTable = New Ds_Con.pm_Con_Rp_RemainedItemDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_con_vahedWeightTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_con_vahedWeight"
            tableMapping.ColumnMappings.Add("srl", "srl")
            tableMapping.ColumnMappings.Add("srl_vahed", "srl_vahed")
            tableMapping.ColumnMappings.Add("srl_contract", "srl_contract")
            tableMapping.ColumnMappings.Add("نام واحد", "نام واحد")
            tableMapping.ColumnMappings.Add("شاخص وزنی", "شاخص وزنی")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select pm_con_vahedweight.srl,srl_vahed,srl_contract, pm_vahed.Name [نام واحد] ,p"& _ 
                "m_con_vahedweight.weight  [شاخص وزنی]from "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"pm_con_vahedweight join Pm_Vahed on "& _ 
                "srl_vahed = pm_vahed.Srl "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"join Pm_Con_Contract on Pm_Con_Contract .Srl = srl_co"& _ 
                "ntract"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where (srl_vahed=@srl_vahed or @srl_vahed=-1) and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(srl_contract=@srl_co"& _ 
                "ntract or @srl_contract=-1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_vahed", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "srl_Vahed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_contract", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Contract", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Pm_con_vahedWeightDataTable, ByVal srl_vahed As Global.System.Nullable(Of Integer), ByVal srl_contract As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (srl_vahed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(srl_vahed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (srl_contract.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(srl_contract.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal srl_vahed As Global.System.Nullable(Of Integer), ByVal srl_contract As Global.System.Nullable(Of Integer)) As Ds_Con.Pm_con_vahedWeightDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (srl_vahed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(srl_vahed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (srl_contract.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(srl_contract.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Ds_Con.Pm_con_vahedWeightDataTable = New Ds_Con.Pm_con_vahedWeightDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_con_StatusStatementDetailTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_con_StatusStatementDetail"
            tableMapping.ColumnMappings.Add("srl_ashkhas", "srl_ashkhas")
            tableMapping.ColumnMappings.Add("نام و نام خانوادگی", "نام و نام خانوادگی")
            tableMapping.ColumnMappings.Add("weight", "weight")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select srl_ashkhas, family+'-'+family as [نام و نام خانوادگی],Pm_con_StatusStatem"& _ 
                "entDetail .weight  from Pm_con_StatusStatementDetail join pm_ashkhas"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"on srl_ash"& _ 
                "khas = pm_ashkhas.srl "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where srl_statusstatement=@Srl_StatusStatement"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_StatusStatement", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "srl_StatusStatement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Pm_con_StatusStatementDetailDataTable, ByVal Srl_StatusStatement As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_StatusStatement.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_StatusStatement.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Srl_StatusStatement As Global.System.Nullable(Of Integer)) As Ds_Con.Pm_con_StatusStatementDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_StatusStatement.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_StatusStatement.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Ds_Con.Pm_con_StatusStatementDetailDataTable = New Ds_Con.Pm_con_StatusStatementDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Con_ExcelMonthReportTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Con_ExcelMonthReport"
            tableMapping.ColumnMappings.Add("شماره", "شماره")
            tableMapping.ColumnMappings.Add("شرح", "شرح")
            tableMapping.ColumnMappings.Add("مبلغ ارسال", "مبلغ ارسال")
            tableMapping.ColumnMappings.Add("ارزش افزوده 9%", "ارزش افزوده 9%")
            tableMapping.ColumnMappings.Add("شماره نامه", "شماره نامه")
            tableMapping.ColumnMappings.Add("تاریخ ارسال", "تاریخ ارسال")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Pm_Con_MonthReport.Number as شماره, Pm_Month.Name + '-' + CONVERT (nvarcha"& _ 
                "r, Pm_Con_MonthReport.Year) + '-' + Pm_Con_StatusStatementType.Name + '-' + Pm_V"& _ 
                "ahed.Name + '-' + Pm_PostType.Name + '-' + Pm_Con_MonthReport.LetterNumber AS شر"& _ 
                "ح, Pm_Con_MonthReport.Price AS [مبلغ ارسال], CONVERT (bigint, Pm_Con_MonthReport"& _ 
                ".Price) / 100 * 9 AS [ارزش افزوده 9%], Pm_Con_MonthReport.LetterNumber AS [شماره"& _ 
                " نامه], Pm_Con_MonthReport.SendDate AS [تاریخ ارسال]  FROM Pm_Con_MonthReport IN"& _ 
                "NER JOIN Pm_Month ON Pm_Month.M = Pm_Con_MonthReport.Month INNER JOIN Pm_Con_Sou"& _ 
                "rce ON Pm_Con_MonthReport.Srl_Pm_Con_source = Pm_Con_Source.Srl INNER JOIN Pm_Po"& _ 
                "stType ON Pm_Con_MonthReport.Srl_Pm_PostType = Pm_PostType.Srl INNER JOIN Pm_Vah"& _ 
                "ed ON Pm_Con_MonthReport.Srl_Pm_Vahed = Pm_Vahed.Srl INNER JOIN Pm_Con_StatusSta"& _ 
                "tementType ON Pm_Con_MonthReport.srl_Statusstatementtype = Pm_Con_StatusStatemen"& _ 
                "tType.Srl WHERE (Pm_Con_MonthReport.Month = @Month) AND (Pm_Con_MonthReport.Year"& _ 
                " = @year) OR (Pm_Con_MonthReport.Month = @Month) AND (@year = - 1) OR (Pm_Con_Mo"& _ 
                "nthReport.Year = @year) AND (@Month = - 1) OR (@year = - 1) AND (@Month = - 1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Month", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Month", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@year", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Year", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Pm_Con_ExcelMonthReportDataTable, ByVal Month As Global.System.Nullable(Of Integer), ByVal year As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Month.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Month.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (year.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(year.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Month As Global.System.Nullable(Of Integer), ByVal year As Global.System.Nullable(Of Integer)) As Ds_Con.Pm_Con_ExcelMonthReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Month.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Month.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (year.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(year.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Ds_Con.Pm_Con_ExcelMonthReportDataTable = New Ds_Con.Pm_Con_ExcelMonthReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Con_StatusstatementItemVwTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Con_StatusstatementItemVw"
            tableMapping.ColumnMappings.Add("کد", "کد")
            tableMapping.ColumnMappings.Add("عنوان", "عنوان")
            tableMapping.ColumnMappings.Add("تعداد", "تعداد")
            tableMapping.ColumnMappings.Add("قیمت", "قیمت")
            tableMapping.ColumnMappings.Add("کل", "کل")
            tableMapping.ColumnMappings.Add("تاریخ", "تاریخ")
            tableMapping.ColumnMappings.Add("پست", "پست")
            tableMapping.ColumnMappings.Add("srl_Post", "srl_Post")
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("Srl_workform_master", "Srl_workform_master")
            tableMapping.ColumnMappings.Add("srl_contractItem", "srl_contractItem")
            tableMapping.ColumnMappings.Add("Amount", "Amount")
            tableMapping.ColumnMappings.Add("Is_Confirme", "Is_Confirme")
            tableMapping.ColumnMappings.Add("Price", "Price")
            tableMapping.ColumnMappings.Add("srl_source", "srl_source")
            tableMapping.ColumnMappings.Add("Srl_SubmitUser", "Srl_SubmitUser")
            tableMapping.ColumnMappings.Add("Is_holiday", "Is_holiday")
            tableMapping.ColumnMappings.Add("Is_Night", "Is_Night")
            tableMapping.ColumnMappings.Add("Is_Cancle", "Is_Cancle")
            tableMapping.ColumnMappings.Add("SubmitDate", "SubmitDate")
            tableMapping.ColumnMappings.Add("srl_StatusStatement", "srl_StatusStatement")
            tableMapping.ColumnMappings.Add("Is_Beforecancle", "Is_Beforecancle")
            tableMapping.ColumnMappings.Add("Srl_MonthReport", "Srl_MonthReport")
            tableMapping.ColumnMappings.Add("title", "title")
            tableMapping.ColumnMappings.Add("code", "code")
            tableMapping.ColumnMappings.Add("srl_item", "srl_item")
            tableMapping.ColumnMappings.Add("Srl_Contract", "Srl_Contract")
            tableMapping.ColumnMappings.Add("postname", "postname")
            tableMapping.ColumnMappings.Add("tarikh", "tarikh")
            tableMapping.ColumnMappings.Add("p", "p")
            tableMapping.ColumnMappings.Add("srl_vahed", "srl_vahed")
            tableMapping.ColumnMappings.Add("srl_Post1", "srl_Post1")
            tableMapping.ColumnMappings.Add("srl_group", "srl_group")
            tableMapping.ColumnMappings.Add("srl_Omoor", "srl_Omoor")
            tableMapping.ColumnMappings.Add("_Month", "_Month")
            tableMapping.ColumnMappings.Add("_Year", "_Year")
            tableMapping.ColumnMappings.Add("sstype", "sstype")
            tableMapping.ColumnMappings.Add("description", "description")
            tableMapping.ColumnMappings.Add("Confirm_Amount", "Confirm_Amount")
            tableMapping.ColumnMappings.Add("Confirm_Price", "Confirm_Price")
            tableMapping.ColumnMappings.Add("CalcPrice", "CalcPrice")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select t.code as کد,t.title as عنوان,t.amount as تعداد, t.price as قیمت,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"t.p as "& _ 
                "کل , t.tarikh as تاریخ, t.postname as پست ,srl_Post,t.* from "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(  select i.*,Pm_"& _ 
                "Con_Item.title,Pm_Con_Item.code,pm_con_item.srl as srl_item,Pm_Con_ContractItems"& _ 
                " . Srl_Contract ,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"case when not srl_line is null then  pm_line.name"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"when  not"& _ 
                " Srl_workform_master is null then  pworkform.name "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"else pstatus.name end  as p"& _ 
                "ostname,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"case when  Srl_workform_master is null then pm_con_statusstatement.tar"& _ 
                "ikh"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&" else"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&" pm_workform_master.workformtarikh end as tarikh , "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" round(i.Calc"& _ 
                "Price  * i.Amount, 0) as p,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" case when i.Srl_workform_master  is null then Pm_C"& _ 
                "on_StatusStatement.Srl_vahed "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" else Pm_WorkForm_Master.Srl_Pm_Vahed End as srl_"& _ 
                "vahed,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  case when i.Srl_workform_master  is null then "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"case when Pm_Con_Stat"& _ 
                "usStatement .Srl_post IS null then Pm_Con_StatusStatement.Srl_Line "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"else Pm_Co"& _ 
                "n_StatusStatement.Srl_post End else  Pm_WorkForm_Master.Srl_Pm_Post_From End as "& _ 
                "srl_Post,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"case when i.Srl_workform_master  is null then Pm_Con_StatusStatement"& _ 
                ".Srl_group "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"else Pm_WorkForm_Master.Srl_Pm_Group End as srl_group,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&" case"&Global.Microsoft.VisualBasic.ChrW(9)&"whe"& _ 
                "n not PDStatus .srl is null then PDStatus.Srl_Pm_PostType "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"when not  PDWorkF"& _ 
                "orm.srl is null then PDWorkForm.srl_pm_posttype"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"else Pm_Line.Srl_Pm_PostType"& _ 
                " End as srl_Omoor, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"case when not Pm_Con_StatusStatement .Tarikh IS null then"&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                "CAST(SUBSTRING(Pm_Con_StatusStatement.Tarikh,6,2)As int )"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"else CAST(SUBSTRING"& _ 
                "(Pm_WorkForm_Master.workformtarikh,6,2)as int )end as _Month ,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"case when not"& _ 
                " Pm_Con_StatusStatement .Tarikh IS null then"&Global.Microsoft.VisualBasic.ChrW(9)&"CAST(SUBSTRING(Pm_Con_StatusStateme"& _ 
                "nt.Tarikh,1,4)As int )"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"else CAST(SUBSTRING(Pm_WorkForm_Master.workformtarikh"& _ 
                ",1,4)as int )"&Global.Microsoft.VisualBasic.ChrW(9)&"end as _Year , sstype"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from Pm_Con_StatusStatementItem as i left j"& _ 
                "oin Pm_Con_StatusStatement on Pm_Con_StatusStatement .Srl = Srl_StatusStatement "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" left join Pm_WorkForm_Master on Pm_WorkForm_Master .srl =Srl_workform_master "& _ 
                " "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" left join Pm_Post as PStatus on Pm_Con_StatusStatement  .Srl_post  =PStatus."& _ 
                "Srl "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  left join Pm_PostDetails PDStatus on PStatus.Srl  = PDStatus.Srl_Pm_Post"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   left join Pm_Con_ContractItems  on Pm_Con_ContractItems.Srl = srl_contractI"& _ 
                "tem  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   left join Pm_Con_Item on pm_con_item.Srl = Pm_Con_ContractItems.Srl_It"& _ 
                "em  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   left join Pm_Post as pWorkForm on Pm_WorkForm_Master .Srl_Pm_Post_From "& _ 
                "=pWorkForm.Srl  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   left join Pm_PostDetails PDWorkForm on pWorkForm.Srl  = PDW"& _ 
                "orkForm.Srl_Pm_Post "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    left join Pm_Line on Srl_Line = Pm_Line .Srl "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    lef"& _ 
                "t join (select * from Pm_Con_Contractzarib)as m on m.Srl_Contract = Pm_Con_Contr"& _ 
                "actItems.Srl_Contract ) t"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where (t.srl_vahed = @Srl_vahed or @Srl_vahed=-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                "   and (Srl_source = @srl_Source or @srl_Source =-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (srl_omoor = @srl_omoo"& _ 
                "r or  @srl_omoor=-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"   and (_Year = @Year or @Year=-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"   and (_Month = @"& _ 
                "Month or @Month=-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"   and (sstype = @PMorNOT or @PMorNOT=-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"   and (t.ta"& _ 
                "rikh>= @StartDate or @StartDate='-1')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"   and (t.tarikh<= @EndDate or @EndDate"& _ 
                "='-1')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&" and (t.srl_post = @Srl_Post or @Srl_Post=-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&" and (t.srl_group = @"& _ 
                "Srl_Group or @Srl_Group =-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&" and (t.srl_contractitem =@srl_item or @srl_item"& _ 
                "=-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"    and (srl_contract =@srl_contract or @srl_contract=-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_vahed", Global.System.Data.SqlDbType.[Variant], 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "srl_vahed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_Source", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "srl_source", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_omoor", Global.System.Data.SqlDbType.[Variant], 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "srl_Omoor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Year", Global.System.Data.SqlDbType.[Variant], 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "_Year", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Month", Global.System.Data.SqlDbType.[Variant], 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "_Month", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PMorNOT", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sstype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.[Variant], 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "تاریخ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EndDate", Global.System.Data.SqlDbType.[Variant], 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "تاریخ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Post", Global.System.Data.SqlDbType.[Variant], 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "srl_Post", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Group", Global.System.Data.SqlDbType.[Variant], 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "srl_group", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_item", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "srl_contractItem", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_contract", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Contract", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Pm_Con_StatusstatementItemVwDataTable, ByVal Srl_vahed As Object, ByVal srl_Source As Global.System.Nullable(Of Integer), ByVal srl_omoor As Object, ByVal Year As Object, ByVal Month As Object, ByVal PMorNOT As Global.System.Nullable(Of Integer), ByVal StartDate As Object, ByVal EndDate As Object, ByVal Srl_Post As Object, ByVal Srl_Group As Object, ByVal srl_item As Global.System.Nullable(Of Integer), ByVal srl_contract As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_vahed Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Srl_vahed")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_vahed,Object)
            End If
            If (srl_Source.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(srl_Source.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (srl_omoor Is Nothing) Then
                Throw New Global.System.ArgumentNullException("srl_omoor")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(srl_omoor,Object)
            End If
            If (Year Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Year")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Year,Object)
            End If
            If (Month Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Month")
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Month,Object)
            End If
            If (PMorNOT.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(PMorNOT.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (StartDate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StartDate")
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(StartDate,Object)
            End If
            If (EndDate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("EndDate")
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(EndDate,Object)
            End If
            If (Srl_Post Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Srl_Post")
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(Srl_Post,Object)
            End If
            If (Srl_Group Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Srl_Group")
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(Srl_Group,Object)
            End If
            If (srl_item.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(srl_item.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (srl_contract.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(srl_contract.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Srl_vahed As Object, ByVal srl_Source As Global.System.Nullable(Of Integer), ByVal srl_omoor As Object, ByVal Year As Object, ByVal Month As Object, ByVal PMorNOT As Global.System.Nullable(Of Integer), ByVal StartDate As Object, ByVal EndDate As Object, ByVal Srl_Post As Object, ByVal Srl_Group As Object, ByVal srl_item As Global.System.Nullable(Of Integer), ByVal srl_contract As Global.System.Nullable(Of Integer)) As Ds_Con.Pm_Con_StatusstatementItemVwDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_vahed Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Srl_vahed")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_vahed,Object)
            End If
            If (srl_Source.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(srl_Source.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (srl_omoor Is Nothing) Then
                Throw New Global.System.ArgumentNullException("srl_omoor")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(srl_omoor,Object)
            End If
            If (Year Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Year")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Year,Object)
            End If
            If (Month Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Month")
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Month,Object)
            End If
            If (PMorNOT.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(PMorNOT.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (StartDate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StartDate")
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(StartDate,Object)
            End If
            If (EndDate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("EndDate")
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(EndDate,Object)
            End If
            If (Srl_Post Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Srl_Post")
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(Srl_Post,Object)
            End If
            If (Srl_Group Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Srl_Group")
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(Srl_Group,Object)
            End If
            If (srl_item.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(srl_item.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (srl_contract.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(srl_contract.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Ds_Con.Pm_Con_StatusstatementItemVwDataTable = New Ds_Con.Pm_Con_StatusstatementItemVwDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Con_GroupWeightTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Con_GroupWeight"
            tableMapping.ColumnMappings.Add("srl", "srl")
            tableMapping.ColumnMappings.Add("srl_Group", "srl_Group")
            tableMapping.ColumnMappings.Add("srl_contract", "srl_contract")
            tableMapping.ColumnMappings.Add("نام گروه", "نام گروه")
            tableMapping.ColumnMappings.Add("شاخص وزنی", "شاخص وزنی")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select pm_con_Groupweight.srl,srl_Group,srl_contract, pm_group.Name [نام گروه] ,p"& _ 
                "m_con_Groupweight.weight  [شاخص وزنی]from "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"pm_con_Groupweight join Pm_group on "& _ 
                "srl_group = Pm_group.Srl "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where (srl_Group=@srl_group or @srl_group=-1) and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(s"& _ 
                "rl_contract=@srl_contract or @srl_contract=-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (srl_pm_vahed = @srl_vahed o"& _ 
                "r @srl_vahed =-1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_group", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Group", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_contract", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Contract", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_vahed", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Vahed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Pm_Con_GroupWeightDataTable, ByVal srl_group As Global.System.Nullable(Of Integer), ByVal srl_contract As Global.System.Nullable(Of Integer), ByVal srl_vahed As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (srl_group.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(srl_group.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (srl_contract.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(srl_contract.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (srl_vahed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(srl_vahed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal srl_group As Global.System.Nullable(Of Integer), ByVal srl_contract As Global.System.Nullable(Of Integer), ByVal srl_vahed As Global.System.Nullable(Of Integer)) As Ds_Con.Pm_Con_GroupWeightDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (srl_group.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(srl_group.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (srl_contract.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(srl_contract.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (srl_vahed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(srl_vahed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Ds_Con.Pm_Con_GroupWeightDataTable = New Ds_Con.Pm_Con_GroupWeightDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Con_NavahiWeightTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Con_NavahiWeight"
            tableMapping.ColumnMappings.Add("srl", "srl")
            tableMapping.ColumnMappings.Add("srl_Post_type", "srl_Post_type")
            tableMapping.ColumnMappings.Add("srl_contract", "srl_contract")
            tableMapping.ColumnMappings.Add("ناحیه", "ناحیه")
            tableMapping.ColumnMappings.Add("ضریب", "ضریب")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select pm_con_navahiweight.srl,srl_Post_type,srl_contract, pm_Posttype.Name [ناحی"& _ 
                "ه] ,pm_con_navahiweight.weight  [ضریب]from "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"pm_con_navahiweight join Pm_Posttyp"& _ 
                "e on srl_post_type = Pm_Posttype .Srl "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"join Pm_Con_Contract on Pm_Con_Contract "& _ 
                ".Srl = srl_contract"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where (srl_contract=@srl_contract or @srl_contract=-1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_contract", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Contract", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Pm_Con_NavahiWeightDataTable, ByVal srl_contract As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (srl_contract.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(srl_contract.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal srl_contract As Global.System.Nullable(Of Integer)) As Ds_Con.Pm_Con_NavahiWeightDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (srl_contract.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(srl_contract.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Ds_Con.Pm_Con_NavahiWeightDataTable = New Ds_Con.Pm_Con_NavahiWeightDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Rp_Pm_MonthReport_OmoorTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Rp_Pm_MonthReport_Omoor"
            tableMapping.ColumnMappings.Add("امور", "امور")
            tableMapping.ColumnMappings.Add("بررسی کارمازاد", "بررسی کارمازاد")
            tableMapping.ColumnMappings.Add("بررسی PM", "بررسی PM")
            tableMapping.ColumnMappings.Add("تائید کارمازاد", "تائید کارمازاد")
            tableMapping.ColumnMappings.Add("تائید PM", "تائید PM")
            tableMapping.ColumnMappings.Add("ردشده کارمازاد", "ردشده کارمازاد")
            tableMapping.ColumnMappings.Add("ردشده PM", "ردشده PM")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.Rp_Pm_MonthReport_Omoor"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Contract", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@year", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_SSType", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_Month", Global.System.Data.SqlDbType.NVarChar, 200, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Omoor", Global.System.Data.SqlDbType.NVarChar, 200, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_vahed", Global.System.Data.SqlDbType.NVarChar, 200, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_source", Global.System.Data.SqlDbType.NVarChar, 200, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Rp_Pm_MonthReport_OmoorDataTable, ByVal Srl_Contract As Global.System.Nullable(Of Integer), ByVal year As Global.System.Nullable(Of Integer), ByVal Srl_SSType As Global.System.Nullable(Of Integer), ByVal srl_Month As String, ByVal Srl_Omoor As String, ByVal srl_vahed As String, ByVal srl_source As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_Contract.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Srl_Contract.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (year.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(year.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Srl_SSType.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Srl_SSType.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (srl_Month Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(srl_Month,String)
            End If
            If (Srl_Omoor Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(Srl_Omoor,String)
            End If
            If (srl_vahed Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(srl_vahed,String)
            End If
            If (srl_source Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(srl_source,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Srl_Contract As Global.System.Nullable(Of Integer), ByVal year As Global.System.Nullable(Of Integer), ByVal Srl_SSType As Global.System.Nullable(Of Integer), ByVal srl_Month As String, ByVal Srl_Omoor As String, ByVal srl_vahed As String, ByVal srl_source As String) As Ds_Con.Rp_Pm_MonthReport_OmoorDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_Contract.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Srl_Contract.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (year.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(year.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Srl_SSType.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Srl_SSType.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (srl_Month Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(srl_Month,String)
            End If
            If (Srl_Omoor Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(Srl_Omoor,String)
            End If
            If (srl_vahed Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(srl_vahed,String)
            End If
            If (srl_source Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(srl_source,String)
            End If
            Dim dataTable As Ds_Con.Rp_Pm_MonthReport_OmoorDataTable = New Ds_Con.Rp_Pm_MonthReport_OmoorDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class pm_con_statusStatementItemTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "pm_con_statusStatementItem"
            tableMapping.ColumnMappings.Add("srl", "srl")
            tableMapping.ColumnMappings.Add("کد", "کد")
            tableMapping.ColumnMappings.Add("عنوان", "عنوان")
            tableMapping.ColumnMappings.Add("تعداد", "تعداد")
            tableMapping.ColumnMappings.Add("تائید", "تائید")
            tableMapping.ColumnMappings.Add("قیمت", "قیمت")
            tableMapping.ColumnMappings.Add("calcprice", "calcprice")
            tableMapping.ColumnMappings.Add("Confirm_Price", "Confirm_Price")
            tableMapping.ColumnMappings.Add("Confirm_Amount", "Confirm_Amount")
            tableMapping.ColumnMappings.Add("Is_holiday", "Is_holiday")
            tableMapping.ColumnMappings.Add("is_cancle", "is_cancle")
            tableMapping.ColumnMappings.Add("is_night", "is_night")
            tableMapping.ColumnMappings.Add("is_beforeCancle", "is_beforeCancle")
            tableMapping.ColumnMappings.Add("srl_contract", "srl_contract")
            tableMapping.ColumnMappings.Add("srl_source", "srl_source")
            tableMapping.ColumnMappings.Add("قیمت کل", "قیمت کل")
            tableMapping.ColumnMappings.Add("SSPM", "SSPM")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select pm_con_statusstatementitem.srl,code کد,title عنوان,pm_con_statusstatementi"& _ 
                "tem .Amount تعداد"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&",is_confirme [تائید],pm_con_statusstatementitem .Price قیمت,c"& _ 
                "alcprice,isnull(SSPM,'') as SSPM,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Confirm_Price,Confirm_Amount ,Is_holiday , is"& _ 
                "_cancle,is_night,is_beforeCancle,srl_contract,srl_source,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"pm_con_statusstatemen"& _ 
                "titem.price*pm_con_statusstatementitem .Amount  as [قیمت کل]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" from pm_con_statu"& _ 
                "sstatementitem join "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Pm_Con_ContractItems on Pm_Con_ContractItems.srl=srl_contr"& _ 
                "actitem"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"join Pm_Con_Item on Pm_Con_Item .Srl = Srl_Item "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where (Srl_workform_m"& _ 
                "aster =@Srl_WorkForm or  -1=@Srl_WorkForm )"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (Srl_StatusStatement =@Srl_Stat"& _ 
                "usStatement or  -1=@Srl_StatusStatement )"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (sstype=@type or @type=-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_WorkForm", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_workform_master", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_StatusStatement", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "srl_StatusStatement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@type", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sstype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.pm_con_statusStatementItemDataTable, ByVal Srl_WorkForm As Global.System.Nullable(Of Integer), ByVal Srl_StatusStatement As Global.System.Nullable(Of Integer), ByVal type As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_WorkForm.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_WorkForm.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Srl_StatusStatement.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Srl_StatusStatement.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (type.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(type.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Srl_WorkForm As Global.System.Nullable(Of Integer), ByVal Srl_StatusStatement As Global.System.Nullable(Of Integer), ByVal type As Global.System.Nullable(Of Integer)) As Ds_Con.pm_con_statusStatementItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_WorkForm.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_WorkForm.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Srl_StatusStatement.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Srl_StatusStatement.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (type.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(type.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Ds_Con.pm_con_statusStatementItemDataTable = New Ds_Con.pm_con_statusStatementItemDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Rp_Pm_MonthReport_OmoorVahedTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Rp_Pm_MonthReport_OmoorVahed"
            tableMapping.ColumnMappings.Add("امور", "امور")
            tableMapping.ColumnMappings.Add("واحد", "واحد")
            tableMapping.ColumnMappings.Add("بررسی کارمازاد", "بررسی کارمازاد")
            tableMapping.ColumnMappings.Add("بررسی PM", "بررسی PM")
            tableMapping.ColumnMappings.Add("تائید کارمازاد", "تائید کارمازاد")
            tableMapping.ColumnMappings.Add("تائید PM", "تائید PM")
            tableMapping.ColumnMappings.Add("ردشده کارمازاد", "ردشده کارمازاد")
            tableMapping.ColumnMappings.Add("ردشده PM", "ردشده PM")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.Rp_Pm_MonthReport_OmoorVahed"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Contract", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@year", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_SSType", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_Month", Global.System.Data.SqlDbType.NVarChar, 200, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Omoor", Global.System.Data.SqlDbType.NVarChar, 200, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_vahed", Global.System.Data.SqlDbType.NVarChar, 200, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_source", Global.System.Data.SqlDbType.NVarChar, 200, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Rp_Pm_MonthReport_OmoorVahedDataTable, ByVal Srl_Contract As Global.System.Nullable(Of Integer), ByVal year As Global.System.Nullable(Of Integer), ByVal Srl_SSType As Global.System.Nullable(Of Integer), ByVal srl_Month As String, ByVal Srl_Omoor As String, ByVal srl_vahed As String, ByVal srl_source As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_Contract.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Srl_Contract.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (year.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(year.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Srl_SSType.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Srl_SSType.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (srl_Month Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(srl_Month,String)
            End If
            If (Srl_Omoor Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(Srl_Omoor,String)
            End If
            If (srl_vahed Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(srl_vahed,String)
            End If
            If (srl_source Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(srl_source,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Srl_Contract As Global.System.Nullable(Of Integer), ByVal year As Global.System.Nullable(Of Integer), ByVal Srl_SSType As Global.System.Nullable(Of Integer), ByVal srl_Month As String, ByVal Srl_Omoor As String, ByVal srl_vahed As String, ByVal srl_source As String) As Ds_Con.Rp_Pm_MonthReport_OmoorVahedDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_Contract.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Srl_Contract.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (year.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(year.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Srl_SSType.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Srl_SSType.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (srl_Month Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(srl_Month,String)
            End If
            If (Srl_Omoor Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(Srl_Omoor,String)
            End If
            If (srl_vahed Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(srl_vahed,String)
            End If
            If (srl_source Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(srl_source,String)
            End If
            Dim dataTable As Ds_Con.Rp_Pm_MonthReport_OmoorVahedDataTable = New Ds_Con.Rp_Pm_MonthReport_OmoorVahedDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Con_MonthReport_DetailTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Con_MonthReport_Detail"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("شماره", "شماره")
            tableMapping.ColumnMappings.Add("شماره نامه", "شماره نامه")
            tableMapping.ColumnMappings.Add("دوره", "دوره")
            tableMapping.ColumnMappings.Add("گروه", "گروه")
            tableMapping.ColumnMappings.Add("نام واحد", "نام واحد")
            tableMapping.ColumnMappings.Add("نوع", "نوع")
            tableMapping.ColumnMappings.Add("تاریخ ارسال", "تاریخ ارسال")
            tableMapping.ColumnMappings.Add("تاریخ تائید", "تاریخ تائید")
            tableMapping.ColumnMappings.Add("تاریخ ERP", "تاریخ ERP")
            tableMapping.ColumnMappings.Add("شماره پیگیری", "شماره پیگیری")
            tableMapping.ColumnMappings.Add("شماره وضعیت", "شماره وضعیت")
            tableMapping.ColumnMappings.Add("شماره سند", "شماره سند")
            tableMapping.ColumnMappings.Add("توضیحات", "توضیحات")
            tableMapping.ColumnMappings.Add("قرارداد", "قرارداد")
            tableMapping.ColumnMappings.Add("IsCancle", "IsCancle")
            tableMapping.ColumnMappings.Add("Srl_Con_Contract", "Srl_Con_Contract")
            tableMapping.ColumnMappings.Add("Srl_Pm_Con_source", "Srl_Pm_Con_source")
            tableMapping.ColumnMappings.Add("Srl_Pm_PostType", "Srl_Pm_PostType")
            tableMapping.ColumnMappings.Add("Srl_Pm_Vahed", "Srl_Pm_Vahed")
            tableMapping.ColumnMappings.Add("Srl_SubmitUser", "Srl_SubmitUser")
            tableMapping.ColumnMappings.Add("SubmitDate", "SubmitDate")
            tableMapping.ColumnMappings.Add("srl_Statusstatementtype", "srl_Statusstatementtype")
            tableMapping.ColumnMappings.Add("مبلغ", "مبلغ")
            tableMapping.ColumnMappings.Add("مبلغ تائید", "مبلغ تائید")
            tableMapping.ColumnMappings.Add("Month", "Month")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "--exec pm_con_Excelrp 97,1,3,1400,1,1,'-1','-1',-1,215,-1,9,1,30"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT [Pm_Con_"& _ 
                "MonthReport].[Srl]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[Number] شماره,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"[letternumber] as [شماره نامه]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  "& _ 
                "    ,convert(nvarchar,[Month])+'_'+cast([Year]as nvarchar(10))+'_'+Pm_Month.Name"& _ 
                "  دوره"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,case when pm_postType.name IS null then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"pm_con_source.name"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                "else "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"pm_con_source.name+'_'+pm_postType.name"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"end as گروه"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&",pm_vahed.name "& _ 
                "[نام واحد]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,Pm_con_statusStatementtype .name نوع"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[SendDate] [تاری"& _ 
                "خ ارسال]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,convert(bigint,[Price]) مبلغ"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[ConfirmDate] [تاریخ تائید"& _ 
                "]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,convert(bigint,[ConfirmPrice]) [مبلغ تائید]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[ERPDate] [تاریخ E"& _ 
                "RP]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[DeliveryNumber] [شماره پیگیری]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[StatusNumber] [شماره وضعیت]"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[DocumentNumber] [شماره سند]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[Pm_Con_MonthReport].[Description]"& _ 
                " توضیحات"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,pm_con_contract.Description as قرارداد"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[IsCancle] "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "   ,[Srl_Con_Contract]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[Srl_Pm_Con_source]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[Srl_Pm_PostType]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  "& _ 
                "    ,[Srl_Pm_Vahed]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[Pm_Con_MonthReport].[Srl_SubmitUser]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[Pm_Co"& _ 
                "n_MonthReport].[SubmitDate]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&",srl_Statusstatementtype, [Month]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  FROM [Nama_MIS"& _ 
                "].[dbo].[Pm_Con_MonthReport]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"join pm_vahed on pm_vahed.srl = [Pm_Con_MonthRepor"& _ 
                "t].srl_pm_vahed"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"join pm_con_source on  pm_con_source.srl = srl_pm_con_source"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"l"& _ 
                "eft join pm_con_contract on pm_con_contract.srl = srl_con_contract"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm"& _ 
                "_con_statusStatementtype on Pm_con_statusStatementtype .srl = srl_Statusstatemen"& _ 
                "ttype"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left join pm_posttype on pm_posttype.srl = Srl_Pm_PostType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"join Pm_Month"& _ 
                " on cast(Pm_Month.M as int ) = [Pm_Con_MonthReport].[MONTH] "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Pm_Con_Mo"& _ 
                "nthReport.Month in(SELECT *  FROM SPLIT(@Month , ',') )  or @Month='-1')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (P"& _ 
                "m_Con_MonthReport .Year = @year or @year =-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (pm_con_contract.srl = @Srl_C"& _ 
                "ontract or @Srl_Contract =-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (Pm_Con_MonthReport .Srl_Pm_Vahed in(SELECT *"& _ 
                "  FROM SPLIT(@Srl_vahed, ',') ) or @srl_vahed='-1')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (Pm_Con_MonthReport .sr"& _ 
                "l_Statusstatementtype = @sstype or @sstype =-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (Pm_Con_MonthReport .Srl_Pm"& _ 
                "_Con_source  in(SELECT *  FROM SPLIT(@srl_source , ',') ) or @srl_source='-1')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "and (Pm_Con_MonthReport .Srl_Pm_PostType in(SELECT *  FROM SPLIT(@Srl_Omoor , ',"& _ 
                "') ) or @Srl_Omoor='-1')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (@Status=1 or(@Status=2 and (ConfirmDate='' or Con"& _ 
                "firmDate is null) and  (ConfirmPrice='' or ConfirmPrice  is null))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"   or(@St"& _ 
                "atus=3 and ConfirmDate <>'' and ConfirmPrice<> '' and not ConfirmDate is null an"& _ 
                "d not ConfirmPrice is null and (ERPDate is null or ERPDate ='' ))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"   or (@St"& _ 
                "atus=4 and ConfirmDate <>'' and ConfirmPrice<> '' and not ConfirmDate is null an"& _ 
                "d not ConfirmPrice is null and not ERPDate is null and  ERPDate <>'' )"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"   )"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Month", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@year", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Year", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Contract", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_vahed", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sstype", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "srl_Statusstatementtype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_source", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Omoor", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Pm_Con_MonthReport_DetailDataTable, ByVal Month As String, ByVal year As Global.System.Nullable(Of Integer), ByVal Srl_Contract As Integer, ByVal srl_vahed As String, ByVal sstype As Global.System.Nullable(Of Integer), ByVal srl_source As String, ByVal Srl_Omoor As String, ByVal Status As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Month Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Month")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Month,String)
            End If
            If (year.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(year.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(Srl_Contract,Integer)
            If (srl_vahed Is Nothing) Then
                Throw New Global.System.ArgumentNullException("srl_vahed")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(srl_vahed,String)
            End If
            If (sstype.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(sstype.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (srl_source Is Nothing) Then
                Throw New Global.System.ArgumentNullException("srl_source")
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(srl_source,String)
            End If
            If (Srl_Omoor Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Srl_Omoor")
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(Srl_Omoor,String)
            End If
            If (Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Status")
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(Status,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Month As String, ByVal year As Global.System.Nullable(Of Integer), ByVal Srl_Contract As Integer, ByVal srl_vahed As String, ByVal sstype As Global.System.Nullable(Of Integer), ByVal srl_source As String, ByVal Srl_Omoor As String, ByVal Status As String) As Ds_Con.Pm_Con_MonthReport_DetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Month Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Month")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Month,String)
            End If
            If (year.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(year.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(Srl_Contract,Integer)
            If (srl_vahed Is Nothing) Then
                Throw New Global.System.ArgumentNullException("srl_vahed")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(srl_vahed,String)
            End If
            If (sstype.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(sstype.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (srl_source Is Nothing) Then
                Throw New Global.System.ArgumentNullException("srl_source")
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(srl_source,String)
            End If
            If (Srl_Omoor Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Srl_Omoor")
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(Srl_Omoor,String)
            End If
            If (Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Status")
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(Status,String)
            End If
            Dim dataTable As Ds_Con.Pm_Con_MonthReport_DetailDataTable = New Ds_Con.Pm_Con_MonthReport_DetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Con_SaveEzafekarTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Con_SaveEzafekar"
            tableMapping.ColumnMappings.Add("srl", "srl")
            tableMapping.ColumnMappings.Add("نام واحد", "نام واحد")
            tableMapping.ColumnMappings.Add("درصد ذخیره", "درصد ذخیره")
            tableMapping.ColumnMappings.Add("srl_vahed", "srl_vahed")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select pm_con_Saveezafekar.srl,Pm_Vahed.Name as [نام واحد],percentage as [درصد ذخ"& _ 
                "یره],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"pm_vahed.Srl  as  srl_vahed from pm_con_Saveezafekar join Pm_Vahed "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"on s"& _ 
                "rl_vahed = Pm_Vahed .Srl "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where srl_contract= @srl_contract"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_contract", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Contract", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Pm_Con_SaveEzafekarDataTable, ByVal srl_contract As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (srl_contract.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(srl_contract.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal srl_contract As Global.System.Nullable(Of Integer)) As Ds_Con.Pm_Con_SaveEzafekarDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (srl_contract.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(srl_contract.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Ds_Con.Pm_Con_SaveEzafekarDataTable = New Ds_Con.Pm_Con_SaveEzafekarDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_con_MonthReportGrouupConfirmPriceTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_con_MonthReportGrouupConfirmPrice"
            tableMapping.ColumnMappings.Add("srl", "srl")
            tableMapping.ColumnMappings.Add("نام گروه", "نام گروه")
            tableMapping.ColumnMappings.Add("مبلغ ارسالی", "مبلغ ارسالی")
            tableMapping.ColumnMappings.Add("مبلغ تائید شده", "مبلغ تائید شده")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select pm_con_monthreportgroupconfirmprice.srl,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Name as [نام گروه],price [مبلغ ا"& _ 
                "رسالی], confirm_price as [مبلغ تائید شده] from pm_con_monthreportgroupconfirmpri"& _ 
                "ce"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"join Pm_Group on srl_group = pm_group.Srl "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where srl_Monthreport= @Srl_Mont"& _ 
                "hReport"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_MonthReport", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_MonthReport", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Pm_con_MonthReportGrouupConfirmPriceDataTable, ByVal Srl_MonthReport As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_MonthReport.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_MonthReport.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Srl_MonthReport As Global.System.Nullable(Of Integer)) As Ds_Con.Pm_con_MonthReportGrouupConfirmPriceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_MonthReport.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_MonthReport.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Ds_Con.Pm_con_MonthReportGrouupConfirmPriceDataTable = New Ds_Con.Pm_con_MonthReportGrouupConfirmPriceDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_MonthReportTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_MonthReport"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("شماره", "شماره")
            tableMapping.ColumnMappings.Add("شماره نامه", "شماره نامه")
            tableMapping.ColumnMappings.Add("دوره", "دوره")
            tableMapping.ColumnMappings.Add("گروه", "گروه")
            tableMapping.ColumnMappings.Add("نام واحد", "نام واحد")
            tableMapping.ColumnMappings.Add("نوع", "نوع")
            tableMapping.ColumnMappings.Add("تاریخ ارسال", "تاریخ ارسال")
            tableMapping.ColumnMappings.Add("تاریخ تائید", "تاریخ تائید")
            tableMapping.ColumnMappings.Add("تاریخ ERP", "تاریخ ERP")
            tableMapping.ColumnMappings.Add("شماره پیگیری", "شماره پیگیری")
            tableMapping.ColumnMappings.Add("شماره وضعیت", "شماره وضعیت")
            tableMapping.ColumnMappings.Add("شماره سند", "شماره سند")
            tableMapping.ColumnMappings.Add("توضیحات", "توضیحات")
            tableMapping.ColumnMappings.Add("IsCancle", "IsCancle")
            tableMapping.ColumnMappings.Add("Srl_Con_Contract", "Srl_Con_Contract")
            tableMapping.ColumnMappings.Add("Srl_Pm_Con_source", "Srl_Pm_Con_source")
            tableMapping.ColumnMappings.Add("Srl_Pm_PostType", "Srl_Pm_PostType")
            tableMapping.ColumnMappings.Add("Srl_Pm_Vahed", "Srl_Pm_Vahed")
            tableMapping.ColumnMappings.Add("Srl_SubmitUser", "Srl_SubmitUser")
            tableMapping.ColumnMappings.Add("SubmitDate", "SubmitDate")
            tableMapping.ColumnMappings.Add("srl_Statusstatementtype", "srl_Statusstatementtype")
            tableMapping.ColumnMappings.Add("تائیدی", "تائیدی")
            tableMapping.ColumnMappings.Add("تفاوت", "تفاوت")
            tableMapping.ColumnMappings.Add("مبلغ", "مبلغ")
            tableMapping.ColumnMappings.Add("مبلغ تائید", "مبلغ تائید")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select t.*,ISNULL(m.confirm_Price,0)as [تائیدی],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ISNULL(isnull(t.[مبلغ تائید],0)"& _ 
                "-ISNULL(m.confirm_Price,0),0)as تفاوت"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" from ("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT [Pm_Con_MonthReport].[Srl"& _ 
                "]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[Number] شماره,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"[letternumber] as [شماره نامه]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,cast([Year]a"& _ 
                "s nvarchar(10))+'_'+Pm_Month.Name  دوره"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,case when pm_postType.name IS nu"& _ 
                "ll then"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"pm_con_source.name"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"else "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"pm_con_source.name+'_'+pm_postType.nam"& _ 
                "e"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"end as گروه"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&",pm_vahed.name [نام واحد]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,Pm_con_statusStatementtype ."& _ 
                "name نوع"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[SendDate] [تاریخ ارسال]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,convert(bigint,[Price])  مبلغ"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[ConfirmDate] [تاریخ تائید]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,convert(bigint,[ConfirmPrice]) [مبلغ"& _ 
                " تائید]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[ERPDate] [تاریخ ERP]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[DeliveryNumber] [شماره پیگیری]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "     ,[StatusNumber] [شماره وضعیت]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[DocumentNumber] [شماره سند]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,"& _ 
                "[Pm_Con_MonthReport].[Description] توضیحات"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[IsCancle] "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[Srl_Con_"& _ 
                "Contract]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[Srl_Pm_Con_source]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[Srl_Pm_PostType]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[Srl_Pm_"& _ 
                "Vahed]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[Pm_Con_MonthReport].[Srl_SubmitUser]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[Pm_Con_MonthReport"& _ 
                "].[SubmitDate]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&",srl_Statusstatementtype"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  FROM [Nama_MIS].[dbo].[Pm_Con_MonthR"& _ 
                "eport]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"join pm_vahed on pm_vahed.srl = [Pm_Con_MonthReport].srl_pm_vahed"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"join "& _ 
                "pm_con_source on  pm_con_source.srl = srl_pm_con_source"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left join pm_con_contra"& _ 
                "ct on pm_con_contract.srl = srl_con_contract"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm_con_statusStatementty"& _ 
                "pe on Pm_con_statusStatementtype .srl = srl_Statusstatementtype"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left join pm_po"& _ 
                "sttype on pm_posttype.srl = Srl_Pm_PostType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"join Pm_Month on cast(Pm_Month.M as"& _ 
                " int ) = [Pm_Con_MonthReport].[MONTH] "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Pm_Con_MonthReport.Month = @Mon"& _ 
                "th or @Month =-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (Pm_Con_MonthReport .Year = @year or @year =-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (pm_"& _ 
                "con_contract.srl = @Srl_Contract or @Srl_Contract =-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (Pm_Con_MonthReport "& _ 
                ".Srl_Pm_Vahed = @srl_vahed or @srl_vahed =-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (Pm_Con_MonthReport .SendDate"& _ 
                " >= @StartDate or @StartDate ='-1')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (Pm_Con_MonthReport .SendDate <= @EndDa"& _ 
                "te or @EndDate ='-1')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (Pm_Con_MonthReport .srl_Statusstatementtype = @sstyp"& _ 
                "e or @sstype =-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (Pm_Con_MonthReport .Srl_Pm_Con_source  = @srl_source or "& _ 
                "@srl_source =-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (Pm_Con_MonthReport .Srl_Pm_PostType  = @PostType or @Post"& _ 
                "Type =-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&")as t left join "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(select isnull(SUM(floor(price*amount)),0) as pri"& _ 
                "ce,isnull(SUM(floor(price*confirm_amount)),0) as Confirm_price,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SUM(floor(price"& _ 
                "*(amount-confirm_amount))) as dif,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"isnull(Srl_MonthReport,-1)as Srl_MonthReport"& _ 
                "  from Pm_Con_StatusStatementitem "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"group by Srl_MonthReport )as m"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"on m.Srl_Mon"& _ 
                "thReport  = t.Srl "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Month", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@year", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Contract", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_vahed", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.NVarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EndDate", Global.System.Data.SqlDbType.NVarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sstype", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_source", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PostType", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Pm_MonthReportDataTable, ByVal Month As Global.System.Nullable(Of Integer), ByVal year As Global.System.Nullable(Of Integer), ByVal Srl_Contract As Integer, ByVal srl_vahed As Global.System.Nullable(Of Integer), ByVal StartDate As String, ByVal EndDate As String, ByVal sstype As Global.System.Nullable(Of Integer), ByVal srl_source As Global.System.Nullable(Of Integer), ByVal PostType As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Month.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Month.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (year.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(year.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(Srl_Contract,Integer)
            If (srl_vahed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(srl_vahed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (StartDate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(StartDate,String)
            End If
            If (EndDate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(EndDate,String)
            End If
            If (sstype.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(sstype.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (srl_source.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(srl_source.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PostType.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(PostType.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Month As Global.System.Nullable(Of Integer), ByVal year As Global.System.Nullable(Of Integer), ByVal Srl_Contract As Integer, ByVal srl_vahed As Global.System.Nullable(Of Integer), ByVal StartDate As String, ByVal EndDate As String, ByVal sstype As Global.System.Nullable(Of Integer), ByVal srl_source As Global.System.Nullable(Of Integer), ByVal PostType As Global.System.Nullable(Of Integer)) As Ds_Con.Pm_MonthReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Month.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Month.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (year.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(year.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(Srl_Contract,Integer)
            If (srl_vahed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(srl_vahed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (StartDate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(StartDate,String)
            End If
            If (EndDate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(EndDate,String)
            End If
            If (sstype.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(sstype.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (srl_source.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(srl_source.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PostType.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(PostType.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Ds_Con.Pm_MonthReportDataTable = New Ds_Con.Pm_MonthReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Con_Non_MonthReportTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Con_Non_MonthReport"
            tableMapping.ColumnMappings.Add("عنوان آیتم", "عنوان آیتم")
            tableMapping.ColumnMappings.Add("تعداد", "تعداد")
            tableMapping.ColumnMappings.Add("قیمت", "قیمت")
            tableMapping.ColumnMappings.Add("واحد", "واحد")
            tableMapping.ColumnMappings.Add("ماه", "ماه")
            tableMapping.ColumnMappings.Add("سال", "سال")
            tableMapping.ColumnMappings.Add("نوع", "نوع")
            tableMapping.ColumnMappings.Add("منبع", "منبع")
            tableMapping.ColumnMappings.Add("امور", "امور")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = ""&Global.Microsoft.VisualBasic.ChrW(9)&"select Title as [عنوان آیتم] , Amount تعداد , CalcPrice  قیمت,Pm_Vahed.Name واحد"& _ 
                ","&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"_Month ماه, _Year سال ,Pm_Con_StatusStatementType.Name  نوع ,Pm_Con_Source.N"& _ 
                "ame  منبع ,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"Pm_PostType.Name  امور from ("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"select "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"case"&Global.Microsoft.VisualBasic.ChrW(9)&"when not PDStatus .s"& _ 
                "rl is null then PDStatus.Srl_Pm_PostType "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"when not  PDWorkForm.srl is null then"& _ 
                " PDWorkForm.srl_pm_posttype"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"else Pm_Line.Srl_Pm_PostType End as srl_Omoor, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ca"& _ 
                "se when Pm_Con_StatusStatementItem.Srl_workform_master  is null then Pm_Con_Stat"& _ 
                "usStatement.Srl_vahed "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"else Pm_WorkForm_Master.Srl_Pm_Vahed End as srl_vahed,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "case when not Pm_Con_StatusStatement .Tarikh IS null then"&Global.Microsoft.VisualBasic.ChrW(9)&"CAST(SUBSTRING(Pm_Con_"& _ 
                "StatusStatement.Tarikh,6,2)As int )"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"else CAST(SUBSTRING(Pm_WorkForm_Master.Work"& _ 
                "FormTarikh ,6,2)as int )end as _Month ,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"case when not Pm_Con_StatusStatement .T"& _ 
                "arikh IS null then"&Global.Microsoft.VisualBasic.ChrW(9)&"CAST(SUBSTRING(Pm_Con_StatusStatement.Tarikh,1,4)As int )"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"el"& _ 
                "se CAST(SUBSTRING(Pm_WorkForm_Master.WorkFormTarikh,1,4)as int )"&Global.Microsoft.VisualBasic.ChrW(9)&"end as _Year , "& _ 
                "sstype"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&", Pm_Con_Item.Title , Pm_Con_StatusStatementitem .Amount , Pm_Con_Status"& _ 
                "Statementitem .CalcPrice ,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Pm_Con_StatusStatementitem.srl_source ,pm_con_contra"& _ 
                "ct.title as قرارداد"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" from "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(select * from Pm_Con_StatusStatementitem where S"& _ 
                "rl_MonthReport is null "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and (srl_source  in(SELECT *  FROM SPLIT(@srl_source , "& _ 
                "',') ) or @srl_source='-1')) Pm_Con_StatusStatementitem"&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm_Con_StatusS"& _ 
                "tatement on Pm_Con_StatusStatement .Srl = Srl_StatusStatement "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm_Wor"& _ 
                "kForm_Master on Pm_WorkForm_Master .srl =Srl_workform_master  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm_Pos"& _ 
                "t as PStatus on Pm_Con_StatusStatement  .Srl_post  =PStatus.Srl "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm_P"& _ 
                "ostDetails PDStatus on PStatus.Srl  = PDStatus.Srl_Pm_Post"&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm_Post as "& _ 
                "pWorkForm on Pm_WorkForm_Master .Srl_Pm_Post_From =pWorkForm.Srl  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm"& _ 
                "_PostDetails PDWorkForm on pWorkForm.Srl  = PDWorkForm.Srl_Pm_Post "&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm"& _ 
                "_Line on Srl_Line = Pm_Line .Srl "&Global.Microsoft.VisualBasic.ChrW(10)&"join (select * from Pm_Con_ContractItems   whe"& _ 
                "re "&Global.Microsoft.VisualBasic.ChrW(10)&"     srl_contract in (SELECT *  FROM SPLIT(@srl_contract , ',') )  or @srl_c"& _ 
                "ontract='-1'  ) as pm_con_contractitem"&Global.Microsoft.VisualBasic.ChrW(10)&"     on pm_con_contractitem.Srl = srl_con"& _ 
                "tractItem "&Global.Microsoft.VisualBasic.ChrW(10)&"join pm_con_contract on pm_con_contractitem.srl_contract = pm_con_con"& _ 
                "tract.srl"&Global.Microsoft.VisualBasic.ChrW(10)&"join Pm_Con_Item on pm_con_item.Srl = pm_con_contractitem.Srl_Item "&Global.Microsoft.VisualBasic.ChrW(10)&") "& _ 
                "as x left join Pm_Vahed  on Srl_vahed  = Pm_Vahed .Srl"&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm_Con_StatusSt"& _ 
                "atementType on Pm_Con_StatusStatementType.Srl = sstype "&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm_Con_Source "& _ 
                "on Pm_Con_Source.Srl = srl_source"&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm_PostType on Pm_PostType.Srl = srl"& _ 
                "_Omoor "&Global.Microsoft.VisualBasic.ChrW(10)&"where "&Global.Microsoft.VisualBasic.ChrW(10)&"(_Month in(SELECT *  FROM SPLIT(@srl_Month , ',') )  or @srl_Mont"& _ 
                "h='-1')"&Global.Microsoft.VisualBasic.ChrW(10)&"and (srl_Omoor in(SELECT *  FROM SPLIT(@Srl_Omoor , ',') ) or @Srl_Omoor"& _ 
                "='-1')"&Global.Microsoft.VisualBasic.ChrW(10)&"and (srl_vahed in(SELECT *  FROM SPLIT(@Srl_vahed, ',') ) or @srl_vahed='"& _ 
                "-1')"&Global.Microsoft.VisualBasic.ChrW(10)&"and (sstype  =@Srl_SSType or @Srl_SSType=-1)"&Global.Microsoft.VisualBasic.ChrW(10)&"and (_Year=@year or @year=-1)"&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_Month", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Omoor", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_vahed", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_SSType", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sstype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@year", Global.System.Data.SqlDbType.[Variant], 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "سال", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_source", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srl_contract", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Con.Pm_Con_Non_MonthReportDataTable, ByVal srl_Month As String, ByVal Srl_Omoor As String, ByVal srl_vahed As String, ByVal Srl_SSType As Global.System.Nullable(Of Integer), ByVal year As Object, ByVal srl_source As String, ByVal srl_contract As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (srl_Month Is Nothing) Then
                Throw New Global.System.ArgumentNullException("srl_Month")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(srl_Month,String)
            End If
            If (Srl_Omoor Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Srl_Omoor")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Srl_Omoor,String)
            End If
            If (srl_vahed Is Nothing) Then
                Throw New Global.System.ArgumentNullException("srl_vahed")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(srl_vahed,String)
            End If
            If (Srl_SSType.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Srl_SSType.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (year Is Nothing) Then
                Throw New Global.System.ArgumentNullException("year")
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(year,Object)
            End If
            If (srl_source Is Nothing) Then
                Throw New Global.System.ArgumentNullException("srl_source")
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(srl_source,String)
            End If
            If (srl_contract Is Nothing) Then
                Throw New Global.System.ArgumentNullException("srl_contract")
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(srl_contract,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal srl_Month As String, ByVal Srl_Omoor As String, ByVal srl_vahed As String, ByVal Srl_SSType As Global.System.Nullable(Of Integer), ByVal year As Object, ByVal srl_source As String, ByVal srl_contract As String) As Ds_Con.Pm_Con_Non_MonthReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (srl_Month Is Nothing) Then
                Throw New Global.System.ArgumentNullException("srl_Month")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(srl_Month,String)
            End If
            If (Srl_Omoor Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Srl_Omoor")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Srl_Omoor,String)
            End If
            If (srl_vahed Is Nothing) Then
                Throw New Global.System.ArgumentNullException("srl_vahed")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(srl_vahed,String)
            End If
            If (Srl_SSType.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Srl_SSType.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (year Is Nothing) Then
                Throw New Global.System.ArgumentNullException("year")
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(year,Object)
            End If
            If (srl_source Is Nothing) Then
                Throw New Global.System.ArgumentNullException("srl_source")
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(srl_source,String)
            End If
            If (srl_contract Is Nothing) Then
                Throw New Global.System.ArgumentNullException("srl_contract")
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(srl_contract,String)
            End If
            Dim dataTable As Ds_Con.Pm_Con_Non_MonthReportDataTable = New Ds_Con.Pm_Con_Non_MonthReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _pm_Con_SourceTableAdapter As Pm_Con_SourceTableAdapter
        
        Private _pm_MonthTableAdapter As Pm_MonthTableAdapter
        
        Private _pm_Con_StatusStatementTypeTableAdapter As Pm_Con_StatusStatementTypeTableAdapter
        
        Private _pm_Con_Contract1TableAdapter As Pm_Con_Contract1TableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Pm_Con_SourceTableAdapter() As Pm_Con_SourceTableAdapter
            Get
                Return Me._pm_Con_SourceTableAdapter
            End Get
            Set
                Me._pm_Con_SourceTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Pm_MonthTableAdapter() As Pm_MonthTableAdapter
            Get
                Return Me._pm_MonthTableAdapter
            End Get
            Set
                Me._pm_MonthTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Pm_Con_StatusStatementTypeTableAdapter() As Pm_Con_StatusStatementTypeTableAdapter
            Get
                Return Me._pm_Con_StatusStatementTypeTableAdapter
            End Get
            Set
                Me._pm_Con_StatusStatementTypeTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Pm_Con_Contract1TableAdapter() As Pm_Con_Contract1TableAdapter
            Get
                Return Me._pm_Con_Contract1TableAdapter
            End Get
            Set
                Me._pm_Con_Contract1TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._pm_Con_SourceTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pm_Con_SourceTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pm_Con_SourceTableAdapter.Connection
                End If
                If ((Not (Me._pm_MonthTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pm_MonthTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pm_MonthTableAdapter.Connection
                End If
                If ((Not (Me._pm_Con_StatusStatementTypeTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pm_Con_StatusStatementTypeTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pm_Con_StatusStatementTypeTableAdapter.Connection
                End If
                If ((Not (Me._pm_Con_Contract1TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pm_Con_Contract1TableAdapter.Connection) Is Nothing)) Then
                    Return Me._pm_Con_Contract1TableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._pm_Con_SourceTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pm_MonthTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pm_Con_StatusStatementTypeTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pm_Con_Contract1TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As Ds_Con, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._pm_Con_Contract1TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Pm_Con_Contract1.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pm_Con_Contract1TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pm_Con_StatusStatementTypeTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Pm_Con_StatusStatementType.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pm_Con_StatusStatementTypeTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pm_Con_SourceTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Pm_Con_Source.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pm_Con_SourceTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pm_MonthTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Pm_Month.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pm_MonthTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As Ds_Con, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._pm_Con_Contract1TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Pm_Con_Contract1.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pm_Con_Contract1TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pm_Con_StatusStatementTypeTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Pm_Con_StatusStatementType.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pm_Con_StatusStatementTypeTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pm_Con_SourceTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Pm_Con_Source.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pm_Con_SourceTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pm_MonthTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Pm_Month.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pm_MonthTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As Ds_Con, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._pm_MonthTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Pm_Month.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pm_MonthTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pm_Con_SourceTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Pm_Con_Source.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pm_Con_SourceTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pm_Con_StatusStatementTypeTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Pm_Con_StatusStatementType.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pm_Con_StatusStatementTypeTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pm_Con_Contract1TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Pm_Con_Contract1.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pm_Con_Contract1TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As Ds_Con) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._pm_Con_SourceTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pm_Con_SourceTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pm_MonthTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pm_MonthTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pm_Con_StatusStatementTypeTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pm_Con_StatusStatementTypeTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pm_Con_Contract1TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pm_Con_Contract1TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._pm_Con_SourceTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pm_Con_SourceTableAdapter, Me._pm_Con_SourceTableAdapter.Connection)
                    Me._pm_Con_SourceTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Con_SourceTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._pm_Con_SourceTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pm_Con_SourceTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pm_Con_SourceTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pm_MonthTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pm_MonthTableAdapter, Me._pm_MonthTableAdapter.Connection)
                    Me._pm_MonthTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_MonthTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._pm_MonthTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pm_MonthTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pm_MonthTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pm_Con_StatusStatementTypeTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pm_Con_StatusStatementTypeTableAdapter, Me._pm_Con_StatusStatementTypeTableAdapter.Connection)
                    Me._pm_Con_StatusStatementTypeTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Con_StatusStatementTypeTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._pm_Con_StatusStatementTypeTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pm_Con_StatusStatementTypeTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pm_Con_StatusStatementTypeTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pm_Con_Contract1TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pm_Con_Contract1TableAdapter, Me._pm_Con_Contract1TableAdapter.Connection)
                    Me._pm_Con_Contract1TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Con_Contract1TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._pm_Con_Contract1TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pm_Con_Contract1TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pm_Con_Contract1TableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._pm_Con_SourceTableAdapter) Is Nothing) Then
                    Me._pm_Con_SourceTableAdapter.Connection = CType(revertConnections(Me._pm_Con_SourceTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Con_SourceTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pm_MonthTableAdapter) Is Nothing) Then
                    Me._pm_MonthTableAdapter.Connection = CType(revertConnections(Me._pm_MonthTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_MonthTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pm_Con_StatusStatementTypeTableAdapter) Is Nothing) Then
                    Me._pm_Con_StatusStatementTypeTableAdapter.Connection = CType(revertConnections(Me._pm_Con_StatusStatementTypeTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Con_StatusStatementTypeTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pm_Con_Contract1TableAdapter) Is Nothing) Then
                    Me._pm_Con_Contract1TableAdapter.Connection = CType(revertConnections(Me._pm_Con_Contract1TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Con_Contract1TableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
