'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.9171
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Ds_Edu"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Ds_Edu
    Inherits Global.System.Data.DataSet
    
    Private tablePm_Edu_JobTitle As Pm_Edu_JobTitleDataTable
    
    Private tablePm_Edu_DoreType As Pm_Edu_DoreTypeDataTable
    
    Private tablePm_Edu_Dore As Pm_Edu_DoreDataTable
    
    Private tablePm_Edu_DoreJob As Pm_Edu_DoreJobDataTable
    
    Private tablePm_Edu_DorePlace As Pm_Edu_DorePlaceDataTable
    
    Private tablePm_Edu_DorePresenter As Pm_Edu_DorePresenterDataTable
    
    Private tablePm_Edu_Teacher As Pm_Edu_TeacherDataTable
    
    Private tablePm_Edu_EvaluationItem As Pm_Edu_EvaluationItemDataTable
    
    Private tablePm_Edu_Evaluation As Pm_Edu_EvaluationDataTable
    
    Private tablePm_Edu_JobDore As Pm_Edu_JobDoreDataTable
    
    Private tablePm_Edu_ِDoreReport As Pm_Edu_ِDoreReportDataTable
    
    Private tableRp_DoreEvaluation As Rp_DoreEvaluationDataTable
    
    Private tablePm_Edu_DoreParticipatePresent As Pm_Edu_DoreParticipatePresentDataTable
    
    Private tablePm_Edu_DoreHoldingtitle As Pm_Edu_DoreHoldingtitleDataTable
    
    Private tablePm_Edu_PresenterReport As Pm_Edu_PresenterReportDataTable
    
    Private tablePm_Edu_DoreHolding As Pm_Edu_DoreHoldingDataTable
    
    Private tablePm_Edu_DoreParticipation As Pm_Edu_DoreParticipationDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Pm_Edu_JobTitle")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_JobTitleDataTable(ds.Tables("Pm_Edu_JobTitle")))
            End If
            If (Not (ds.Tables("Pm_Edu_DoreType")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_DoreTypeDataTable(ds.Tables("Pm_Edu_DoreType")))
            End If
            If (Not (ds.Tables("Pm_Edu_Dore")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_DoreDataTable(ds.Tables("Pm_Edu_Dore")))
            End If
            If (Not (ds.Tables("Pm_Edu_DoreJob")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_DoreJobDataTable(ds.Tables("Pm_Edu_DoreJob")))
            End If
            If (Not (ds.Tables("Pm_Edu_DorePlace")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_DorePlaceDataTable(ds.Tables("Pm_Edu_DorePlace")))
            End If
            If (Not (ds.Tables("Pm_Edu_DorePresenter")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_DorePresenterDataTable(ds.Tables("Pm_Edu_DorePresenter")))
            End If
            If (Not (ds.Tables("Pm_Edu_Teacher")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_TeacherDataTable(ds.Tables("Pm_Edu_Teacher")))
            End If
            If (Not (ds.Tables("Pm_Edu_EvaluationItem")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_EvaluationItemDataTable(ds.Tables("Pm_Edu_EvaluationItem")))
            End If
            If (Not (ds.Tables("Pm_Edu_Evaluation")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_EvaluationDataTable(ds.Tables("Pm_Edu_Evaluation")))
            End If
            If (Not (ds.Tables("Pm_Edu_JobDore")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_JobDoreDataTable(ds.Tables("Pm_Edu_JobDore")))
            End If
            If (Not (ds.Tables("Pm_Edu_ِDoreReport")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_ِDoreReportDataTable(ds.Tables("Pm_Edu_ِDoreReport")))
            End If
            If (Not (ds.Tables("Rp_DoreEvaluation")) Is Nothing) Then
                MyBase.Tables.Add(New Rp_DoreEvaluationDataTable(ds.Tables("Rp_DoreEvaluation")))
            End If
            If (Not (ds.Tables("Pm_Edu_DoreParticipatePresent")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_DoreParticipatePresentDataTable(ds.Tables("Pm_Edu_DoreParticipatePresent")))
            End If
            If (Not (ds.Tables("Pm_Edu_DoreHoldingtitle")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_DoreHoldingtitleDataTable(ds.Tables("Pm_Edu_DoreHoldingtitle")))
            End If
            If (Not (ds.Tables("Pm_Edu_PresenterReport")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_PresenterReportDataTable(ds.Tables("Pm_Edu_PresenterReport")))
            End If
            If (Not (ds.Tables("Pm_Edu_DoreHolding")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_DoreHoldingDataTable(ds.Tables("Pm_Edu_DoreHolding")))
            End If
            If (Not (ds.Tables("Pm_Edu_DoreParticipation")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_DoreParticipationDataTable(ds.Tables("Pm_Edu_DoreParticipation")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Edu_JobTitle() As Pm_Edu_JobTitleDataTable
        Get
            Return Me.tablePm_Edu_JobTitle
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Edu_DoreType() As Pm_Edu_DoreTypeDataTable
        Get
            Return Me.tablePm_Edu_DoreType
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Edu_Dore() As Pm_Edu_DoreDataTable
        Get
            Return Me.tablePm_Edu_Dore
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Edu_DoreJob() As Pm_Edu_DoreJobDataTable
        Get
            Return Me.tablePm_Edu_DoreJob
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Edu_DorePlace() As Pm_Edu_DorePlaceDataTable
        Get
            Return Me.tablePm_Edu_DorePlace
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Edu_DorePresenter() As Pm_Edu_DorePresenterDataTable
        Get
            Return Me.tablePm_Edu_DorePresenter
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Edu_Teacher() As Pm_Edu_TeacherDataTable
        Get
            Return Me.tablePm_Edu_Teacher
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Edu_EvaluationItem() As Pm_Edu_EvaluationItemDataTable
        Get
            Return Me.tablePm_Edu_EvaluationItem
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Edu_Evaluation() As Pm_Edu_EvaluationDataTable
        Get
            Return Me.tablePm_Edu_Evaluation
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Edu_JobDore() As Pm_Edu_JobDoreDataTable
        Get
            Return Me.tablePm_Edu_JobDore
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Edu_ِDoreReport() As Pm_Edu_ِDoreReportDataTable
        Get
            Return Me.tablePm_Edu_ِDoreReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Rp_DoreEvaluation() As Rp_DoreEvaluationDataTable
        Get
            Return Me.tableRp_DoreEvaluation
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Edu_DoreParticipatePresent() As Pm_Edu_DoreParticipatePresentDataTable
        Get
            Return Me.tablePm_Edu_DoreParticipatePresent
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Edu_DoreHoldingtitle() As Pm_Edu_DoreHoldingtitleDataTable
        Get
            Return Me.tablePm_Edu_DoreHoldingtitle
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Edu_PresenterReport() As Pm_Edu_PresenterReportDataTable
        Get
            Return Me.tablePm_Edu_PresenterReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Edu_DoreHolding() As Pm_Edu_DoreHoldingDataTable
        Get
            Return Me.tablePm_Edu_DoreHolding
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Edu_DoreParticipation() As Pm_Edu_DoreParticipationDataTable
        Get
            Return Me.tablePm_Edu_DoreParticipation
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Ds_Edu = CType(MyBase.Clone,Ds_Edu)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Pm_Edu_JobTitle")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_JobTitleDataTable(ds.Tables("Pm_Edu_JobTitle")))
            End If
            If (Not (ds.Tables("Pm_Edu_DoreType")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_DoreTypeDataTable(ds.Tables("Pm_Edu_DoreType")))
            End If
            If (Not (ds.Tables("Pm_Edu_Dore")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_DoreDataTable(ds.Tables("Pm_Edu_Dore")))
            End If
            If (Not (ds.Tables("Pm_Edu_DoreJob")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_DoreJobDataTable(ds.Tables("Pm_Edu_DoreJob")))
            End If
            If (Not (ds.Tables("Pm_Edu_DorePlace")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_DorePlaceDataTable(ds.Tables("Pm_Edu_DorePlace")))
            End If
            If (Not (ds.Tables("Pm_Edu_DorePresenter")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_DorePresenterDataTable(ds.Tables("Pm_Edu_DorePresenter")))
            End If
            If (Not (ds.Tables("Pm_Edu_Teacher")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_TeacherDataTable(ds.Tables("Pm_Edu_Teacher")))
            End If
            If (Not (ds.Tables("Pm_Edu_EvaluationItem")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_EvaluationItemDataTable(ds.Tables("Pm_Edu_EvaluationItem")))
            End If
            If (Not (ds.Tables("Pm_Edu_Evaluation")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_EvaluationDataTable(ds.Tables("Pm_Edu_Evaluation")))
            End If
            If (Not (ds.Tables("Pm_Edu_JobDore")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_JobDoreDataTable(ds.Tables("Pm_Edu_JobDore")))
            End If
            If (Not (ds.Tables("Pm_Edu_ِDoreReport")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_ِDoreReportDataTable(ds.Tables("Pm_Edu_ِDoreReport")))
            End If
            If (Not (ds.Tables("Rp_DoreEvaluation")) Is Nothing) Then
                MyBase.Tables.Add(New Rp_DoreEvaluationDataTable(ds.Tables("Rp_DoreEvaluation")))
            End If
            If (Not (ds.Tables("Pm_Edu_DoreParticipatePresent")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_DoreParticipatePresentDataTable(ds.Tables("Pm_Edu_DoreParticipatePresent")))
            End If
            If (Not (ds.Tables("Pm_Edu_DoreHoldingtitle")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_DoreHoldingtitleDataTable(ds.Tables("Pm_Edu_DoreHoldingtitle")))
            End If
            If (Not (ds.Tables("Pm_Edu_PresenterReport")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_PresenterReportDataTable(ds.Tables("Pm_Edu_PresenterReport")))
            End If
            If (Not (ds.Tables("Pm_Edu_DoreHolding")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_DoreHoldingDataTable(ds.Tables("Pm_Edu_DoreHolding")))
            End If
            If (Not (ds.Tables("Pm_Edu_DoreParticipation")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Edu_DoreParticipationDataTable(ds.Tables("Pm_Edu_DoreParticipation")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePm_Edu_JobTitle = CType(MyBase.Tables("Pm_Edu_JobTitle"),Pm_Edu_JobTitleDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Edu_JobTitle) Is Nothing) Then
                Me.tablePm_Edu_JobTitle.InitVars
            End If
        End If
        Me.tablePm_Edu_DoreType = CType(MyBase.Tables("Pm_Edu_DoreType"),Pm_Edu_DoreTypeDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Edu_DoreType) Is Nothing) Then
                Me.tablePm_Edu_DoreType.InitVars
            End If
        End If
        Me.tablePm_Edu_Dore = CType(MyBase.Tables("Pm_Edu_Dore"),Pm_Edu_DoreDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Edu_Dore) Is Nothing) Then
                Me.tablePm_Edu_Dore.InitVars
            End If
        End If
        Me.tablePm_Edu_DoreJob = CType(MyBase.Tables("Pm_Edu_DoreJob"),Pm_Edu_DoreJobDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Edu_DoreJob) Is Nothing) Then
                Me.tablePm_Edu_DoreJob.InitVars
            End If
        End If
        Me.tablePm_Edu_DorePlace = CType(MyBase.Tables("Pm_Edu_DorePlace"),Pm_Edu_DorePlaceDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Edu_DorePlace) Is Nothing) Then
                Me.tablePm_Edu_DorePlace.InitVars
            End If
        End If
        Me.tablePm_Edu_DorePresenter = CType(MyBase.Tables("Pm_Edu_DorePresenter"),Pm_Edu_DorePresenterDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Edu_DorePresenter) Is Nothing) Then
                Me.tablePm_Edu_DorePresenter.InitVars
            End If
        End If
        Me.tablePm_Edu_Teacher = CType(MyBase.Tables("Pm_Edu_Teacher"),Pm_Edu_TeacherDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Edu_Teacher) Is Nothing) Then
                Me.tablePm_Edu_Teacher.InitVars
            End If
        End If
        Me.tablePm_Edu_EvaluationItem = CType(MyBase.Tables("Pm_Edu_EvaluationItem"),Pm_Edu_EvaluationItemDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Edu_EvaluationItem) Is Nothing) Then
                Me.tablePm_Edu_EvaluationItem.InitVars
            End If
        End If
        Me.tablePm_Edu_Evaluation = CType(MyBase.Tables("Pm_Edu_Evaluation"),Pm_Edu_EvaluationDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Edu_Evaluation) Is Nothing) Then
                Me.tablePm_Edu_Evaluation.InitVars
            End If
        End If
        Me.tablePm_Edu_JobDore = CType(MyBase.Tables("Pm_Edu_JobDore"),Pm_Edu_JobDoreDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Edu_JobDore) Is Nothing) Then
                Me.tablePm_Edu_JobDore.InitVars
            End If
        End If
        Me.tablePm_Edu_ِDoreReport = CType(MyBase.Tables("Pm_Edu_ِDoreReport"),Pm_Edu_ِDoreReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Edu_ِDoreReport) Is Nothing) Then
                Me.tablePm_Edu_ِDoreReport.InitVars
            End If
        End If
        Me.tableRp_DoreEvaluation = CType(MyBase.Tables("Rp_DoreEvaluation"),Rp_DoreEvaluationDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRp_DoreEvaluation) Is Nothing) Then
                Me.tableRp_DoreEvaluation.InitVars
            End If
        End If
        Me.tablePm_Edu_DoreParticipatePresent = CType(MyBase.Tables("Pm_Edu_DoreParticipatePresent"),Pm_Edu_DoreParticipatePresentDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Edu_DoreParticipatePresent) Is Nothing) Then
                Me.tablePm_Edu_DoreParticipatePresent.InitVars
            End If
        End If
        Me.tablePm_Edu_DoreHoldingtitle = CType(MyBase.Tables("Pm_Edu_DoreHoldingtitle"),Pm_Edu_DoreHoldingtitleDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Edu_DoreHoldingtitle) Is Nothing) Then
                Me.tablePm_Edu_DoreHoldingtitle.InitVars
            End If
        End If
        Me.tablePm_Edu_PresenterReport = CType(MyBase.Tables("Pm_Edu_PresenterReport"),Pm_Edu_PresenterReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Edu_PresenterReport) Is Nothing) Then
                Me.tablePm_Edu_PresenterReport.InitVars
            End If
        End If
        Me.tablePm_Edu_DoreHolding = CType(MyBase.Tables("Pm_Edu_DoreHolding"),Pm_Edu_DoreHoldingDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Edu_DoreHolding) Is Nothing) Then
                Me.tablePm_Edu_DoreHolding.InitVars
            End If
        End If
        Me.tablePm_Edu_DoreParticipation = CType(MyBase.Tables("Pm_Edu_DoreParticipation"),Pm_Edu_DoreParticipationDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Edu_DoreParticipation) Is Nothing) Then
                Me.tablePm_Edu_DoreParticipation.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Ds_Edu"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Ds_Edu.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePm_Edu_JobTitle = New Pm_Edu_JobTitleDataTable
        MyBase.Tables.Add(Me.tablePm_Edu_JobTitle)
        Me.tablePm_Edu_DoreType = New Pm_Edu_DoreTypeDataTable
        MyBase.Tables.Add(Me.tablePm_Edu_DoreType)
        Me.tablePm_Edu_Dore = New Pm_Edu_DoreDataTable
        MyBase.Tables.Add(Me.tablePm_Edu_Dore)
        Me.tablePm_Edu_DoreJob = New Pm_Edu_DoreJobDataTable
        MyBase.Tables.Add(Me.tablePm_Edu_DoreJob)
        Me.tablePm_Edu_DorePlace = New Pm_Edu_DorePlaceDataTable
        MyBase.Tables.Add(Me.tablePm_Edu_DorePlace)
        Me.tablePm_Edu_DorePresenter = New Pm_Edu_DorePresenterDataTable
        MyBase.Tables.Add(Me.tablePm_Edu_DorePresenter)
        Me.tablePm_Edu_Teacher = New Pm_Edu_TeacherDataTable
        MyBase.Tables.Add(Me.tablePm_Edu_Teacher)
        Me.tablePm_Edu_EvaluationItem = New Pm_Edu_EvaluationItemDataTable
        MyBase.Tables.Add(Me.tablePm_Edu_EvaluationItem)
        Me.tablePm_Edu_Evaluation = New Pm_Edu_EvaluationDataTable
        MyBase.Tables.Add(Me.tablePm_Edu_Evaluation)
        Me.tablePm_Edu_JobDore = New Pm_Edu_JobDoreDataTable
        MyBase.Tables.Add(Me.tablePm_Edu_JobDore)
        Me.tablePm_Edu_ِDoreReport = New Pm_Edu_ِDoreReportDataTable
        MyBase.Tables.Add(Me.tablePm_Edu_ِDoreReport)
        Me.tableRp_DoreEvaluation = New Rp_DoreEvaluationDataTable
        MyBase.Tables.Add(Me.tableRp_DoreEvaluation)
        Me.tablePm_Edu_DoreParticipatePresent = New Pm_Edu_DoreParticipatePresentDataTable
        MyBase.Tables.Add(Me.tablePm_Edu_DoreParticipatePresent)
        Me.tablePm_Edu_DoreHoldingtitle = New Pm_Edu_DoreHoldingtitleDataTable
        MyBase.Tables.Add(Me.tablePm_Edu_DoreHoldingtitle)
        Me.tablePm_Edu_PresenterReport = New Pm_Edu_PresenterReportDataTable
        MyBase.Tables.Add(Me.tablePm_Edu_PresenterReport)
        Me.tablePm_Edu_DoreHolding = New Pm_Edu_DoreHoldingDataTable
        MyBase.Tables.Add(Me.tablePm_Edu_DoreHolding)
        Me.tablePm_Edu_DoreParticipation = New Pm_Edu_DoreParticipationDataTable
        MyBase.Tables.Add(Me.tablePm_Edu_DoreParticipation)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Edu_JobTitle() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Edu_DoreType() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Edu_Dore() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Edu_DoreJob() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Edu_DorePlace() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Edu_DorePresenter() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Edu_Teacher() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Edu_EvaluationItem() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Edu_Evaluation() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Edu_JobDore() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Edu_ِDoreReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRp_DoreEvaluation() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Edu_DoreParticipatePresent() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Edu_DoreHoldingtitle() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Edu_PresenterReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Edu_DoreHolding() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Edu_DoreParticipation() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Ds_Edu = New Ds_Edu
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub Pm_Edu_JobTitleRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Edu_JobTitleRowChangeEvent)
    
    Public Delegate Sub Pm_Edu_DoreTypeRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Edu_DoreTypeRowChangeEvent)
    
    Public Delegate Sub Pm_Edu_DoreRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Edu_DoreRowChangeEvent)
    
    Public Delegate Sub Pm_Edu_DoreJobRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Edu_DoreJobRowChangeEvent)
    
    Public Delegate Sub Pm_Edu_DorePlaceRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Edu_DorePlaceRowChangeEvent)
    
    Public Delegate Sub Pm_Edu_DorePresenterRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Edu_DorePresenterRowChangeEvent)
    
    Public Delegate Sub Pm_Edu_TeacherRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Edu_TeacherRowChangeEvent)
    
    Public Delegate Sub Pm_Edu_EvaluationItemRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Edu_EvaluationItemRowChangeEvent)
    
    Public Delegate Sub Pm_Edu_EvaluationRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Edu_EvaluationRowChangeEvent)
    
    Public Delegate Sub Pm_Edu_JobDoreRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Edu_JobDoreRowChangeEvent)
    
    Public Delegate Sub Pm_Edu_ِDoreReportRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Edu_ِDoreReportRowChangeEvent)
    
    Public Delegate Sub Rp_DoreEvaluationRowChangeEventHandler(ByVal sender As Object, ByVal e As Rp_DoreEvaluationRowChangeEvent)
    
    Public Delegate Sub Pm_Edu_DoreParticipatePresentRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Edu_DoreParticipatePresentRowChangeEvent)
    
    Public Delegate Sub Pm_Edu_DoreHoldingtitleRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Edu_DoreHoldingtitleRowChangeEvent)
    
    Public Delegate Sub Pm_Edu_PresenterReportRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Edu_PresenterReportRowChangeEvent)
    
    Public Delegate Sub Pm_Edu_DoreHoldingRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Edu_DoreHoldingRowChangeEvent)
    
    Public Delegate Sub Pm_Edu_DoreParticipationRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Edu_DoreParticipationRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Edu_JobTitleDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Edu_JobTitleRow)
        
        Private columnsrl As Global.System.Data.DataColumn
        
        Private columnعنوان As Global.System.Data.DataColumn
        
        Private columnکد As Global.System.Data.DataColumn
        
        Private columnعضو_توانیر As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Edu_JobTitle"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property عنوانColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnعنوان
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property کدColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnکد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property عضو_توانیرColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnعضو_توانیر
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Edu_JobTitleRow
            Get
                Return CType(Me.Rows(index),Pm_Edu_JobTitleRow)
            End Get
        End Property
        
        Public Event Pm_Edu_JobTitleRowChanging As Pm_Edu_JobTitleRowChangeEventHandler
        
        Public Event Pm_Edu_JobTitleRowChanged As Pm_Edu_JobTitleRowChangeEventHandler
        
        Public Event Pm_Edu_JobTitleRowDeleting As Pm_Edu_JobTitleRowChangeEventHandler
        
        Public Event Pm_Edu_JobTitleRowDeleted As Pm_Edu_JobTitleRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Edu_JobTitleRow(ByVal row As Pm_Edu_JobTitleRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Edu_JobTitleRow(ByVal عنوان As String, ByVal کد As String, ByVal عضو_توانیر As Boolean) As Pm_Edu_JobTitleRow
            Dim rowPm_Edu_JobTitleRow As Pm_Edu_JobTitleRow = CType(Me.NewRow,Pm_Edu_JobTitleRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, عنوان, کد, عضو_توانیر}
            rowPm_Edu_JobTitleRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Edu_JobTitleRow)
            Return rowPm_Edu_JobTitleRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysrl(ByVal srl As Integer) As Pm_Edu_JobTitleRow
            Return CType(Me.Rows.Find(New Object() {srl}),Pm_Edu_JobTitleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Edu_JobTitleDataTable = CType(MyBase.Clone,Pm_Edu_JobTitleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Edu_JobTitleDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsrl = MyBase.Columns("srl")
            Me.columnعنوان = MyBase.Columns("عنوان")
            Me.columnکد = MyBase.Columns("کد")
            Me.columnعضو_توانیر = MyBase.Columns("عضو توانیر")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsrl = New Global.System.Data.DataColumn("srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl)
            Me.columnعنوان = New Global.System.Data.DataColumn("عنوان", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnعنوان)
            Me.columnکد = New Global.System.Data.DataColumn("کد", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnکد)
            Me.columnعضو_توانیر = New Global.System.Data.DataColumn("عضو توانیر", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnعضو_توانیر)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsrl}, true))
            Me.columnsrl.AutoIncrement = true
            Me.columnsrl.AutoIncrementSeed = -1
            Me.columnsrl.AutoIncrementStep = -1
            Me.columnsrl.AllowDBNull = false
            Me.columnsrl.ReadOnly = true
            Me.columnsrl.Unique = true
            Me.columnعنوان.MaxLength = 500
            Me.columnکد.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Edu_JobTitleRow() As Pm_Edu_JobTitleRow
            Return CType(Me.NewRow,Pm_Edu_JobTitleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Edu_JobTitleRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Edu_JobTitleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Edu_JobTitleRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_JobTitleRowChanged(Me, New Pm_Edu_JobTitleRowChangeEvent(CType(e.Row,Pm_Edu_JobTitleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Edu_JobTitleRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_JobTitleRowChanging(Me, New Pm_Edu_JobTitleRowChangeEvent(CType(e.Row,Pm_Edu_JobTitleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Edu_JobTitleRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_JobTitleRowDeleted(Me, New Pm_Edu_JobTitleRowChangeEvent(CType(e.Row,Pm_Edu_JobTitleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Edu_JobTitleRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_JobTitleRowDeleting(Me, New Pm_Edu_JobTitleRowChangeEvent(CType(e.Row,Pm_Edu_JobTitleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Edu_JobTitleRow(ByVal row As Pm_Edu_JobTitleRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Edu = New Ds_Edu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Edu_JobTitleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Edu_DoreTypeDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Edu_DoreTypeRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnعنوان As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Edu_DoreType"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property عنوانColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnعنوان
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Edu_DoreTypeRow
            Get
                Return CType(Me.Rows(index),Pm_Edu_DoreTypeRow)
            End Get
        End Property
        
        Public Event Pm_Edu_DoreTypeRowChanging As Pm_Edu_DoreTypeRowChangeEventHandler
        
        Public Event Pm_Edu_DoreTypeRowChanged As Pm_Edu_DoreTypeRowChangeEventHandler
        
        Public Event Pm_Edu_DoreTypeRowDeleting As Pm_Edu_DoreTypeRowChangeEventHandler
        
        Public Event Pm_Edu_DoreTypeRowDeleted As Pm_Edu_DoreTypeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Edu_DoreTypeRow(ByVal row As Pm_Edu_DoreTypeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Edu_DoreTypeRow(ByVal عنوان As String) As Pm_Edu_DoreTypeRow
            Dim rowPm_Edu_DoreTypeRow As Pm_Edu_DoreTypeRow = CType(Me.NewRow,Pm_Edu_DoreTypeRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, عنوان}
            rowPm_Edu_DoreTypeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Edu_DoreTypeRow)
            Return rowPm_Edu_DoreTypeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As Pm_Edu_DoreTypeRow
            Return CType(Me.Rows.Find(New Object() {Srl}),Pm_Edu_DoreTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Edu_DoreTypeDataTable = CType(MyBase.Clone,Pm_Edu_DoreTypeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Edu_DoreTypeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnعنوان = MyBase.Columns("عنوان")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnعنوان = New Global.System.Data.DataColumn("عنوان", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnعنوان)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnSrl.AutoIncrement = true
            Me.columnSrl.AutoIncrementSeed = -1
            Me.columnSrl.AutoIncrementStep = -1
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.ReadOnly = true
            Me.columnSrl.Unique = true
            Me.columnعنوان.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Edu_DoreTypeRow() As Pm_Edu_DoreTypeRow
            Return CType(Me.NewRow,Pm_Edu_DoreTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Edu_DoreTypeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Edu_DoreTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Edu_DoreTypeRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreTypeRowChanged(Me, New Pm_Edu_DoreTypeRowChangeEvent(CType(e.Row,Pm_Edu_DoreTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Edu_DoreTypeRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreTypeRowChanging(Me, New Pm_Edu_DoreTypeRowChangeEvent(CType(e.Row,Pm_Edu_DoreTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Edu_DoreTypeRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreTypeRowDeleted(Me, New Pm_Edu_DoreTypeRowChangeEvent(CType(e.Row,Pm_Edu_DoreTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Edu_DoreTypeRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreTypeRowDeleting(Me, New Pm_Edu_DoreTypeRowChangeEvent(CType(e.Row,Pm_Edu_DoreTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Edu_DoreTypeRow(ByVal row As Pm_Edu_DoreTypeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Edu = New Ds_Edu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Edu_DoreTypeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Edu_DoreDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Edu_DoreRow)
        
        Private columnsrl As Global.System.Data.DataColumn
        
        Private columnکد As Global.System.Data.DataColumn
        
        Private columnعنوان As Global.System.Data.DataColumn
        
        Private columnنوع_دوره As Global.System.Data.DataColumn
        
        Private columnطول_دوره As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Edu_Dore"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property کدColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnکد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property عنوانColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnعنوان
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نوع_دورهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنوع_دوره
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property طول_دورهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnطول_دوره
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Edu_DoreRow
            Get
                Return CType(Me.Rows(index),Pm_Edu_DoreRow)
            End Get
        End Property
        
        Public Event Pm_Edu_DoreRowChanging As Pm_Edu_DoreRowChangeEventHandler
        
        Public Event Pm_Edu_DoreRowChanged As Pm_Edu_DoreRowChangeEventHandler
        
        Public Event Pm_Edu_DoreRowDeleting As Pm_Edu_DoreRowChangeEventHandler
        
        Public Event Pm_Edu_DoreRowDeleted As Pm_Edu_DoreRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Edu_DoreRow(ByVal row As Pm_Edu_DoreRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Edu_DoreRow(ByVal کد As String, ByVal عنوان As String, ByVal نوع_دوره As String, ByVal طول_دوره As Integer) As Pm_Edu_DoreRow
            Dim rowPm_Edu_DoreRow As Pm_Edu_DoreRow = CType(Me.NewRow,Pm_Edu_DoreRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, کد, عنوان, نوع_دوره, طول_دوره}
            rowPm_Edu_DoreRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Edu_DoreRow)
            Return rowPm_Edu_DoreRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysrl(ByVal srl As Integer) As Pm_Edu_DoreRow
            Return CType(Me.Rows.Find(New Object() {srl}),Pm_Edu_DoreRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Edu_DoreDataTable = CType(MyBase.Clone,Pm_Edu_DoreDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Edu_DoreDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsrl = MyBase.Columns("srl")
            Me.columnکد = MyBase.Columns("کد")
            Me.columnعنوان = MyBase.Columns("عنوان")
            Me.columnنوع_دوره = MyBase.Columns("نوع دوره")
            Me.columnطول_دوره = MyBase.Columns("طول دوره")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsrl = New Global.System.Data.DataColumn("srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl)
            Me.columnکد = New Global.System.Data.DataColumn("کد", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnکد)
            Me.columnعنوان = New Global.System.Data.DataColumn("عنوان", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnعنوان)
            Me.columnنوع_دوره = New Global.System.Data.DataColumn("نوع دوره", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنوع_دوره)
            Me.columnطول_دوره = New Global.System.Data.DataColumn("طول دوره", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnطول_دوره)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsrl}, true))
            Me.columnsrl.AutoIncrement = true
            Me.columnsrl.AutoIncrementSeed = -1
            Me.columnsrl.AutoIncrementStep = -1
            Me.columnsrl.AllowDBNull = false
            Me.columnsrl.ReadOnly = true
            Me.columnsrl.Unique = true
            Me.columnکد.MaxLength = 50
            Me.columnعنوان.MaxLength = 500
            Me.columnنوع_دوره.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Edu_DoreRow() As Pm_Edu_DoreRow
            Return CType(Me.NewRow,Pm_Edu_DoreRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Edu_DoreRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Edu_DoreRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Edu_DoreRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreRowChanged(Me, New Pm_Edu_DoreRowChangeEvent(CType(e.Row,Pm_Edu_DoreRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Edu_DoreRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreRowChanging(Me, New Pm_Edu_DoreRowChangeEvent(CType(e.Row,Pm_Edu_DoreRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Edu_DoreRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreRowDeleted(Me, New Pm_Edu_DoreRowChangeEvent(CType(e.Row,Pm_Edu_DoreRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Edu_DoreRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreRowDeleting(Me, New Pm_Edu_DoreRowChangeEvent(CType(e.Row,Pm_Edu_DoreRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Edu_DoreRow(ByVal row As Pm_Edu_DoreRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Edu = New Ds_Edu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Edu_DoreDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Edu_DoreJobDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Edu_DoreJobRow)
        
        Private columnsrl As Global.System.Data.DataColumn
        
        Private columnعنوان As Global.System.Data.DataColumn
        
        Private columnsrl_job As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Edu_DoreJob"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property عنوانColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnعنوان
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_jobColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_job
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Edu_DoreJobRow
            Get
                Return CType(Me.Rows(index),Pm_Edu_DoreJobRow)
            End Get
        End Property
        
        Public Event Pm_Edu_DoreJobRowChanging As Pm_Edu_DoreJobRowChangeEventHandler
        
        Public Event Pm_Edu_DoreJobRowChanged As Pm_Edu_DoreJobRowChangeEventHandler
        
        Public Event Pm_Edu_DoreJobRowDeleting As Pm_Edu_DoreJobRowChangeEventHandler
        
        Public Event Pm_Edu_DoreJobRowDeleted As Pm_Edu_DoreJobRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Edu_DoreJobRow(ByVal row As Pm_Edu_DoreJobRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Edu_DoreJobRow(ByVal عنوان As String, ByVal srl_job As Integer) As Pm_Edu_DoreJobRow
            Dim rowPm_Edu_DoreJobRow As Pm_Edu_DoreJobRow = CType(Me.NewRow,Pm_Edu_DoreJobRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, عنوان, srl_job}
            rowPm_Edu_DoreJobRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Edu_DoreJobRow)
            Return rowPm_Edu_DoreJobRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysrl(ByVal srl As Integer) As Pm_Edu_DoreJobRow
            Return CType(Me.Rows.Find(New Object() {srl}),Pm_Edu_DoreJobRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Edu_DoreJobDataTable = CType(MyBase.Clone,Pm_Edu_DoreJobDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Edu_DoreJobDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsrl = MyBase.Columns("srl")
            Me.columnعنوان = MyBase.Columns("عنوان")
            Me.columnsrl_job = MyBase.Columns("srl_job")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsrl = New Global.System.Data.DataColumn("srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl)
            Me.columnعنوان = New Global.System.Data.DataColumn("عنوان", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnعنوان)
            Me.columnsrl_job = New Global.System.Data.DataColumn("srl_job", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_job)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsrl}, true))
            Me.columnsrl.AutoIncrement = true
            Me.columnsrl.AutoIncrementSeed = -1
            Me.columnsrl.AutoIncrementStep = -1
            Me.columnsrl.AllowDBNull = false
            Me.columnsrl.ReadOnly = true
            Me.columnsrl.Unique = true
            Me.columnعنوان.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Edu_DoreJobRow() As Pm_Edu_DoreJobRow
            Return CType(Me.NewRow,Pm_Edu_DoreJobRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Edu_DoreJobRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Edu_DoreJobRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Edu_DoreJobRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreJobRowChanged(Me, New Pm_Edu_DoreJobRowChangeEvent(CType(e.Row,Pm_Edu_DoreJobRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Edu_DoreJobRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreJobRowChanging(Me, New Pm_Edu_DoreJobRowChangeEvent(CType(e.Row,Pm_Edu_DoreJobRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Edu_DoreJobRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreJobRowDeleted(Me, New Pm_Edu_DoreJobRowChangeEvent(CType(e.Row,Pm_Edu_DoreJobRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Edu_DoreJobRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreJobRowDeleting(Me, New Pm_Edu_DoreJobRowChangeEvent(CType(e.Row,Pm_Edu_DoreJobRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Edu_DoreJobRow(ByVal row As Pm_Edu_DoreJobRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Edu = New Ds_Edu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Edu_DoreJobDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Edu_DorePlaceDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Edu_DorePlaceRow)
        
        Private columnsrl As Global.System.Data.DataColumn
        
        Private columnنام As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Edu_DorePlace"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نامColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Edu_DorePlaceRow
            Get
                Return CType(Me.Rows(index),Pm_Edu_DorePlaceRow)
            End Get
        End Property
        
        Public Event Pm_Edu_DorePlaceRowChanging As Pm_Edu_DorePlaceRowChangeEventHandler
        
        Public Event Pm_Edu_DorePlaceRowChanged As Pm_Edu_DorePlaceRowChangeEventHandler
        
        Public Event Pm_Edu_DorePlaceRowDeleting As Pm_Edu_DorePlaceRowChangeEventHandler
        
        Public Event Pm_Edu_DorePlaceRowDeleted As Pm_Edu_DorePlaceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Edu_DorePlaceRow(ByVal row As Pm_Edu_DorePlaceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Edu_DorePlaceRow(ByVal نام As String) As Pm_Edu_DorePlaceRow
            Dim rowPm_Edu_DorePlaceRow As Pm_Edu_DorePlaceRow = CType(Me.NewRow,Pm_Edu_DorePlaceRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, نام}
            rowPm_Edu_DorePlaceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Edu_DorePlaceRow)
            Return rowPm_Edu_DorePlaceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Edu_DorePlaceDataTable = CType(MyBase.Clone,Pm_Edu_DorePlaceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Edu_DorePlaceDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsrl = MyBase.Columns("srl")
            Me.columnنام = MyBase.Columns("نام")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsrl = New Global.System.Data.DataColumn("srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl)
            Me.columnنام = New Global.System.Data.DataColumn("نام", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام)
            Me.columnsrl.AutoIncrement = true
            Me.columnsrl.AutoIncrementSeed = -1
            Me.columnsrl.AutoIncrementStep = -1
            Me.columnsrl.AllowDBNull = false
            Me.columnsrl.ReadOnly = true
            Me.columnنام.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Edu_DorePlaceRow() As Pm_Edu_DorePlaceRow
            Return CType(Me.NewRow,Pm_Edu_DorePlaceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Edu_DorePlaceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Edu_DorePlaceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Edu_DorePlaceRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DorePlaceRowChanged(Me, New Pm_Edu_DorePlaceRowChangeEvent(CType(e.Row,Pm_Edu_DorePlaceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Edu_DorePlaceRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DorePlaceRowChanging(Me, New Pm_Edu_DorePlaceRowChangeEvent(CType(e.Row,Pm_Edu_DorePlaceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Edu_DorePlaceRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DorePlaceRowDeleted(Me, New Pm_Edu_DorePlaceRowChangeEvent(CType(e.Row,Pm_Edu_DorePlaceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Edu_DorePlaceRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DorePlaceRowDeleting(Me, New Pm_Edu_DorePlaceRowChangeEvent(CType(e.Row,Pm_Edu_DorePlaceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Edu_DorePlaceRow(ByVal row As Pm_Edu_DorePlaceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Edu = New Ds_Edu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Edu_DorePlaceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Edu_DorePresenterDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Edu_DorePresenterRow)
        
        Private columnsrl As Global.System.Data.DataColumn
        
        Private columnنام As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Edu_DorePresenter"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نامColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Edu_DorePresenterRow
            Get
                Return CType(Me.Rows(index),Pm_Edu_DorePresenterRow)
            End Get
        End Property
        
        Public Event Pm_Edu_DorePresenterRowChanging As Pm_Edu_DorePresenterRowChangeEventHandler
        
        Public Event Pm_Edu_DorePresenterRowChanged As Pm_Edu_DorePresenterRowChangeEventHandler
        
        Public Event Pm_Edu_DorePresenterRowDeleting As Pm_Edu_DorePresenterRowChangeEventHandler
        
        Public Event Pm_Edu_DorePresenterRowDeleted As Pm_Edu_DorePresenterRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Edu_DorePresenterRow(ByVal row As Pm_Edu_DorePresenterRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Edu_DorePresenterRow(ByVal نام As String) As Pm_Edu_DorePresenterRow
            Dim rowPm_Edu_DorePresenterRow As Pm_Edu_DorePresenterRow = CType(Me.NewRow,Pm_Edu_DorePresenterRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, نام}
            rowPm_Edu_DorePresenterRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Edu_DorePresenterRow)
            Return rowPm_Edu_DorePresenterRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Edu_DorePresenterDataTable = CType(MyBase.Clone,Pm_Edu_DorePresenterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Edu_DorePresenterDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsrl = MyBase.Columns("srl")
            Me.columnنام = MyBase.Columns("نام")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsrl = New Global.System.Data.DataColumn("srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl)
            Me.columnنام = New Global.System.Data.DataColumn("نام", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام)
            Me.columnsrl.AutoIncrement = true
            Me.columnsrl.AutoIncrementSeed = -1
            Me.columnsrl.AutoIncrementStep = -1
            Me.columnsrl.AllowDBNull = false
            Me.columnsrl.ReadOnly = true
            Me.columnنام.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Edu_DorePresenterRow() As Pm_Edu_DorePresenterRow
            Return CType(Me.NewRow,Pm_Edu_DorePresenterRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Edu_DorePresenterRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Edu_DorePresenterRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Edu_DorePresenterRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DorePresenterRowChanged(Me, New Pm_Edu_DorePresenterRowChangeEvent(CType(e.Row,Pm_Edu_DorePresenterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Edu_DorePresenterRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DorePresenterRowChanging(Me, New Pm_Edu_DorePresenterRowChangeEvent(CType(e.Row,Pm_Edu_DorePresenterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Edu_DorePresenterRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DorePresenterRowDeleted(Me, New Pm_Edu_DorePresenterRowChangeEvent(CType(e.Row,Pm_Edu_DorePresenterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Edu_DorePresenterRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DorePresenterRowDeleting(Me, New Pm_Edu_DorePresenterRowChangeEvent(CType(e.Row,Pm_Edu_DorePresenterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Edu_DorePresenterRow(ByVal row As Pm_Edu_DorePresenterRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Edu = New Ds_Edu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Edu_DorePresenterDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Edu_TeacherDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Edu_TeacherRow)
        
        Private columnsrl As Global.System.Data.DataColumn
        
        Private columnنا_م_و_نام_خانوادگی As Global.System.Data.DataColumn
        
        Private columnهمراه As Global.System.Data.DataColumn
        
        Private columnشماره_ثابت As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Edu_Teacher"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نا_م_و_نام_خانوادگیColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنا_م_و_نام_خانوادگی
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property همراهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnهمراه
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شماره_ثابتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشماره_ثابت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Edu_TeacherRow
            Get
                Return CType(Me.Rows(index),Pm_Edu_TeacherRow)
            End Get
        End Property
        
        Public Event Pm_Edu_TeacherRowChanging As Pm_Edu_TeacherRowChangeEventHandler
        
        Public Event Pm_Edu_TeacherRowChanged As Pm_Edu_TeacherRowChangeEventHandler
        
        Public Event Pm_Edu_TeacherRowDeleting As Pm_Edu_TeacherRowChangeEventHandler
        
        Public Event Pm_Edu_TeacherRowDeleted As Pm_Edu_TeacherRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Edu_TeacherRow(ByVal row As Pm_Edu_TeacherRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Edu_TeacherRow(ByVal نا_م_و_نام_خانوادگی As String, ByVal همراه As String, ByVal شماره_ثابت As String) As Pm_Edu_TeacherRow
            Dim rowPm_Edu_TeacherRow As Pm_Edu_TeacherRow = CType(Me.NewRow,Pm_Edu_TeacherRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, نا_م_و_نام_خانوادگی, همراه, شماره_ثابت}
            rowPm_Edu_TeacherRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Edu_TeacherRow)
            Return rowPm_Edu_TeacherRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Edu_TeacherDataTable = CType(MyBase.Clone,Pm_Edu_TeacherDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Edu_TeacherDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsrl = MyBase.Columns("srl")
            Me.columnنا_م_و_نام_خانوادگی = MyBase.Columns("نا م و نام خانوادگی")
            Me.columnهمراه = MyBase.Columns("همراه")
            Me.columnشماره_ثابت = MyBase.Columns("شماره ثابت")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsrl = New Global.System.Data.DataColumn("srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl)
            Me.columnنا_م_و_نام_خانوادگی = New Global.System.Data.DataColumn("نا م و نام خانوادگی", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنا_م_و_نام_خانوادگی)
            Me.columnهمراه = New Global.System.Data.DataColumn("همراه", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnهمراه)
            Me.columnشماره_ثابت = New Global.System.Data.DataColumn("شماره ثابت", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشماره_ثابت)
            Me.columnsrl.AutoIncrement = true
            Me.columnsrl.AutoIncrementSeed = -1
            Me.columnsrl.AutoIncrementStep = -1
            Me.columnsrl.AllowDBNull = false
            Me.columnsrl.ReadOnly = true
            Me.columnنا_م_و_نام_خانوادگی.ReadOnly = true
            Me.columnنا_م_و_نام_خانوادگی.MaxLength = 101
            Me.columnهمراه.MaxLength = 50
            Me.columnشماره_ثابت.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Edu_TeacherRow() As Pm_Edu_TeacherRow
            Return CType(Me.NewRow,Pm_Edu_TeacherRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Edu_TeacherRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Edu_TeacherRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Edu_TeacherRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_TeacherRowChanged(Me, New Pm_Edu_TeacherRowChangeEvent(CType(e.Row,Pm_Edu_TeacherRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Edu_TeacherRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_TeacherRowChanging(Me, New Pm_Edu_TeacherRowChangeEvent(CType(e.Row,Pm_Edu_TeacherRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Edu_TeacherRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_TeacherRowDeleted(Me, New Pm_Edu_TeacherRowChangeEvent(CType(e.Row,Pm_Edu_TeacherRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Edu_TeacherRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_TeacherRowDeleting(Me, New Pm_Edu_TeacherRowChangeEvent(CType(e.Row,Pm_Edu_TeacherRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Edu_TeacherRow(ByVal row As Pm_Edu_TeacherRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Edu = New Ds_Edu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Edu_TeacherDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Edu_EvaluationItemDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Edu_EvaluationItemRow)
        
        Private columnsrl As Global.System.Data.DataColumn
        
        Private columnعنوان As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Edu_EvaluationItem"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property عنوانColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnعنوان
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Edu_EvaluationItemRow
            Get
                Return CType(Me.Rows(index),Pm_Edu_EvaluationItemRow)
            End Get
        End Property
        
        Public Event Pm_Edu_EvaluationItemRowChanging As Pm_Edu_EvaluationItemRowChangeEventHandler
        
        Public Event Pm_Edu_EvaluationItemRowChanged As Pm_Edu_EvaluationItemRowChangeEventHandler
        
        Public Event Pm_Edu_EvaluationItemRowDeleting As Pm_Edu_EvaluationItemRowChangeEventHandler
        
        Public Event Pm_Edu_EvaluationItemRowDeleted As Pm_Edu_EvaluationItemRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Edu_EvaluationItemRow(ByVal row As Pm_Edu_EvaluationItemRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Edu_EvaluationItemRow(ByVal عنوان As String) As Pm_Edu_EvaluationItemRow
            Dim rowPm_Edu_EvaluationItemRow As Pm_Edu_EvaluationItemRow = CType(Me.NewRow,Pm_Edu_EvaluationItemRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, عنوان}
            rowPm_Edu_EvaluationItemRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Edu_EvaluationItemRow)
            Return rowPm_Edu_EvaluationItemRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysrl(ByVal srl As Integer) As Pm_Edu_EvaluationItemRow
            Return CType(Me.Rows.Find(New Object() {srl}),Pm_Edu_EvaluationItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Edu_EvaluationItemDataTable = CType(MyBase.Clone,Pm_Edu_EvaluationItemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Edu_EvaluationItemDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsrl = MyBase.Columns("srl")
            Me.columnعنوان = MyBase.Columns("عنوان")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsrl = New Global.System.Data.DataColumn("srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl)
            Me.columnعنوان = New Global.System.Data.DataColumn("عنوان", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnعنوان)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsrl}, true))
            Me.columnsrl.AutoIncrement = true
            Me.columnsrl.AutoIncrementSeed = -1
            Me.columnsrl.AutoIncrementStep = -1
            Me.columnsrl.AllowDBNull = false
            Me.columnsrl.ReadOnly = true
            Me.columnsrl.Unique = true
            Me.columnعنوان.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Edu_EvaluationItemRow() As Pm_Edu_EvaluationItemRow
            Return CType(Me.NewRow,Pm_Edu_EvaluationItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Edu_EvaluationItemRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Edu_EvaluationItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Edu_EvaluationItemRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_EvaluationItemRowChanged(Me, New Pm_Edu_EvaluationItemRowChangeEvent(CType(e.Row,Pm_Edu_EvaluationItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Edu_EvaluationItemRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_EvaluationItemRowChanging(Me, New Pm_Edu_EvaluationItemRowChangeEvent(CType(e.Row,Pm_Edu_EvaluationItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Edu_EvaluationItemRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_EvaluationItemRowDeleted(Me, New Pm_Edu_EvaluationItemRowChangeEvent(CType(e.Row,Pm_Edu_EvaluationItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Edu_EvaluationItemRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_EvaluationItemRowDeleting(Me, New Pm_Edu_EvaluationItemRowChangeEvent(CType(e.Row,Pm_Edu_EvaluationItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Edu_EvaluationItemRow(ByVal row As Pm_Edu_EvaluationItemRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Edu = New Ds_Edu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Edu_EvaluationItemDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Edu_EvaluationDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Edu_EvaluationRow)
        
        Private columnTitle As Global.System.Data.DataColumn
        
        Private _columnبد_25_ As Global.System.Data.DataColumn
        
        Private _columnمتوسط_50_ As Global.System.Data.DataColumn
        
        Private _columnخوب_75_ As Global.System.Data.DataColumn
        
        Private _columnعالی_100_ As Global.System.Data.DataColumn
        
        Private columnsrl As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Edu_Evaluation"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _بد_25_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnبد_25_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _متوسط_50_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnمتوسط_50_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _خوب_75_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnخوب_75_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _عالی_100_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnعالی_100_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Edu_EvaluationRow
            Get
                Return CType(Me.Rows(index),Pm_Edu_EvaluationRow)
            End Get
        End Property
        
        Public Event Pm_Edu_EvaluationRowChanging As Pm_Edu_EvaluationRowChangeEventHandler
        
        Public Event Pm_Edu_EvaluationRowChanged As Pm_Edu_EvaluationRowChangeEventHandler
        
        Public Event Pm_Edu_EvaluationRowDeleting As Pm_Edu_EvaluationRowChangeEventHandler
        
        Public Event Pm_Edu_EvaluationRowDeleted As Pm_Edu_EvaluationRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Edu_EvaluationRow(ByVal row As Pm_Edu_EvaluationRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Edu_EvaluationRow(ByVal Title As String, ByVal _بد_25_ As Integer, ByVal _متوسط_50_ As Integer, ByVal _خوب_75_ As Integer, ByVal _عالی_100_ As Integer) As Pm_Edu_EvaluationRow
            Dim rowPm_Edu_EvaluationRow As Pm_Edu_EvaluationRow = CType(Me.NewRow,Pm_Edu_EvaluationRow)
            Dim columnValuesArray() As Object = New Object() {Title, _بد_25_, _متوسط_50_, _خوب_75_, _عالی_100_, Nothing}
            rowPm_Edu_EvaluationRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Edu_EvaluationRow)
            Return rowPm_Edu_EvaluationRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysrl(ByVal srl As Integer) As Pm_Edu_EvaluationRow
            Return CType(Me.Rows.Find(New Object() {srl}),Pm_Edu_EvaluationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Edu_EvaluationDataTable = CType(MyBase.Clone,Pm_Edu_EvaluationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Edu_EvaluationDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTitle = MyBase.Columns("Title")
            Me._columnبد_25_ = MyBase.Columns("بد(25)")
            Me._columnمتوسط_50_ = MyBase.Columns("متوسط(50)")
            Me._columnخوب_75_ = MyBase.Columns("خوب(75)")
            Me._columnعالی_100_ = MyBase.Columns("عالی(100)")
            Me.columnsrl = MyBase.Columns("srl")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTitle = New Global.System.Data.DataColumn("Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTitle)
            Me._columnبد_25_ = New Global.System.Data.DataColumn("بد(25)", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            Me._columnبد_25_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnبد_25_")
            Me._columnبد_25_.ExtendedProperties.Add("Generator_UserColumnName", "بد(25)")
            MyBase.Columns.Add(Me._columnبد_25_)
            Me._columnمتوسط_50_ = New Global.System.Data.DataColumn("متوسط(50)", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            Me._columnمتوسط_50_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnمتوسط_50_")
            Me._columnمتوسط_50_.ExtendedProperties.Add("Generator_UserColumnName", "متوسط(50)")
            MyBase.Columns.Add(Me._columnمتوسط_50_)
            Me._columnخوب_75_ = New Global.System.Data.DataColumn("خوب(75)", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            Me._columnخوب_75_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnخوب_75_")
            Me._columnخوب_75_.ExtendedProperties.Add("Generator_UserColumnName", "خوب(75)")
            MyBase.Columns.Add(Me._columnخوب_75_)
            Me._columnعالی_100_ = New Global.System.Data.DataColumn("عالی(100)", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            Me._columnعالی_100_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnعالی_100_")
            Me._columnعالی_100_.ExtendedProperties.Add("Generator_UserColumnName", "عالی(100)")
            MyBase.Columns.Add(Me._columnعالی_100_)
            Me.columnsrl = New Global.System.Data.DataColumn("srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsrl}, true))
            Me.columnTitle.MaxLength = 500
            Me.columnsrl.AutoIncrement = true
            Me.columnsrl.AutoIncrementSeed = -1
            Me.columnsrl.AutoIncrementStep = -1
            Me.columnsrl.AllowDBNull = false
            Me.columnsrl.ReadOnly = true
            Me.columnsrl.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Edu_EvaluationRow() As Pm_Edu_EvaluationRow
            Return CType(Me.NewRow,Pm_Edu_EvaluationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Edu_EvaluationRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Edu_EvaluationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Edu_EvaluationRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_EvaluationRowChanged(Me, New Pm_Edu_EvaluationRowChangeEvent(CType(e.Row,Pm_Edu_EvaluationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Edu_EvaluationRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_EvaluationRowChanging(Me, New Pm_Edu_EvaluationRowChangeEvent(CType(e.Row,Pm_Edu_EvaluationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Edu_EvaluationRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_EvaluationRowDeleted(Me, New Pm_Edu_EvaluationRowChangeEvent(CType(e.Row,Pm_Edu_EvaluationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Edu_EvaluationRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_EvaluationRowDeleting(Me, New Pm_Edu_EvaluationRowChangeEvent(CType(e.Row,Pm_Edu_EvaluationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Edu_EvaluationRow(ByVal row As Pm_Edu_EvaluationRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Edu = New Ds_Edu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Edu_EvaluationDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Edu_JobDoreDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Edu_JobDoreRow)
        
        Private columnsrl As Global.System.Data.DataColumn
        
        Private columnکد As Global.System.Data.DataColumn
        
        Private columnعنوان As Global.System.Data.DataColumn
        
        Private columnطول_دوره As Global.System.Data.DataColumn
        
        Private columnنوع_دوره As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Edu_JobDore"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property کدColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnکد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property عنوانColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnعنوان
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property طول_دورهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnطول_دوره
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نوع_دورهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنوع_دوره
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Edu_JobDoreRow
            Get
                Return CType(Me.Rows(index),Pm_Edu_JobDoreRow)
            End Get
        End Property
        
        Public Event Pm_Edu_JobDoreRowChanging As Pm_Edu_JobDoreRowChangeEventHandler
        
        Public Event Pm_Edu_JobDoreRowChanged As Pm_Edu_JobDoreRowChangeEventHandler
        
        Public Event Pm_Edu_JobDoreRowDeleting As Pm_Edu_JobDoreRowChangeEventHandler
        
        Public Event Pm_Edu_JobDoreRowDeleted As Pm_Edu_JobDoreRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Edu_JobDoreRow(ByVal row As Pm_Edu_JobDoreRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Edu_JobDoreRow(ByVal کد As String, ByVal عنوان As String, ByVal طول_دوره As Integer, ByVal نوع_دوره As String) As Pm_Edu_JobDoreRow
            Dim rowPm_Edu_JobDoreRow As Pm_Edu_JobDoreRow = CType(Me.NewRow,Pm_Edu_JobDoreRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, کد, عنوان, طول_دوره, نوع_دوره}
            rowPm_Edu_JobDoreRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Edu_JobDoreRow)
            Return rowPm_Edu_JobDoreRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysrl(ByVal srl As Integer) As Pm_Edu_JobDoreRow
            Return CType(Me.Rows.Find(New Object() {srl}),Pm_Edu_JobDoreRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Edu_JobDoreDataTable = CType(MyBase.Clone,Pm_Edu_JobDoreDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Edu_JobDoreDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsrl = MyBase.Columns("srl")
            Me.columnکد = MyBase.Columns("کد")
            Me.columnعنوان = MyBase.Columns("عنوان")
            Me.columnطول_دوره = MyBase.Columns("طول دوره")
            Me.columnنوع_دوره = MyBase.Columns("نوع دوره")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsrl = New Global.System.Data.DataColumn("srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl)
            Me.columnکد = New Global.System.Data.DataColumn("کد", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnکد)
            Me.columnعنوان = New Global.System.Data.DataColumn("عنوان", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnعنوان)
            Me.columnطول_دوره = New Global.System.Data.DataColumn("طول دوره", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnطول_دوره)
            Me.columnنوع_دوره = New Global.System.Data.DataColumn("نوع دوره", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنوع_دوره)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsrl}, true))
            Me.columnsrl.AutoIncrement = true
            Me.columnsrl.AutoIncrementSeed = -1
            Me.columnsrl.AutoIncrementStep = -1
            Me.columnsrl.AllowDBNull = false
            Me.columnsrl.ReadOnly = true
            Me.columnsrl.Unique = true
            Me.columnکد.MaxLength = 50
            Me.columnعنوان.MaxLength = 500
            Me.columnنوع_دوره.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Edu_JobDoreRow() As Pm_Edu_JobDoreRow
            Return CType(Me.NewRow,Pm_Edu_JobDoreRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Edu_JobDoreRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Edu_JobDoreRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Edu_JobDoreRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_JobDoreRowChanged(Me, New Pm_Edu_JobDoreRowChangeEvent(CType(e.Row,Pm_Edu_JobDoreRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Edu_JobDoreRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_JobDoreRowChanging(Me, New Pm_Edu_JobDoreRowChangeEvent(CType(e.Row,Pm_Edu_JobDoreRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Edu_JobDoreRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_JobDoreRowDeleted(Me, New Pm_Edu_JobDoreRowChangeEvent(CType(e.Row,Pm_Edu_JobDoreRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Edu_JobDoreRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_JobDoreRowDeleting(Me, New Pm_Edu_JobDoreRowChangeEvent(CType(e.Row,Pm_Edu_JobDoreRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Edu_JobDoreRow(ByVal row As Pm_Edu_JobDoreRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Edu = New Ds_Edu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Edu_JobDoreDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Edu_ِDoreReportDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Edu_ِDoreReportRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnشروع As Global.System.Data.DataColumn
        
        Private columnپایان As Global.System.Data.DataColumn
        
        Private columnطول As Global.System.Data.DataColumn
        
        Private columnمدرس As Global.System.Data.DataColumn
        
        Private columnارائه_کننده As Global.System.Data.DataColumn
        
        Private columnمحل As Global.System.Data.DataColumn
        
        Private columnهزینه As Global.System.Data.DataColumn
        
        Private columnموقعیت As Global.System.Data.DataColumn
        
        Private columnدوره As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Edu_ِDoreReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شروعColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشروع
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property پایانColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnپایان
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property طولColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnطول
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property مدرسColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnمدرس
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ارائه_کنندهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnارائه_کننده
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property محلColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnمحل
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property هزینهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnهزینه
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property موقعیتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnموقعیت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property دورهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnدوره
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Edu_ِDoreReportRow
            Get
                Return CType(Me.Rows(index),Pm_Edu_ِDoreReportRow)
            End Get
        End Property
        
        Public Event Pm_Edu_ِDoreReportRowChanging As Pm_Edu_ِDoreReportRowChangeEventHandler
        
        Public Event Pm_Edu_ِDoreReportRowChanged As Pm_Edu_ِDoreReportRowChangeEventHandler
        
        Public Event Pm_Edu_ِDoreReportRowDeleting As Pm_Edu_ِDoreReportRowChangeEventHandler
        
        Public Event Pm_Edu_ِDoreReportRowDeleted As Pm_Edu_ِDoreReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Edu_ِDoreReportRow(ByVal row As Pm_Edu_ِDoreReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Edu_ِDoreReportRow(ByVal شروع As String, ByVal پایان As String, ByVal طول As Integer, ByVal مدرس As String, ByVal ارائه_کننده As String, ByVal محل As String, ByVal هزینه As Integer, ByVal موقعیت As String, ByVal دوره As String) As Pm_Edu_ِDoreReportRow
            Dim rowPm_Edu_ِDoreReportRow As Pm_Edu_ِDoreReportRow = CType(Me.NewRow,Pm_Edu_ِDoreReportRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, شروع, پایان, طول, مدرس, ارائه_کننده, محل, هزینه, موقعیت, دوره}
            rowPm_Edu_ِDoreReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Edu_ِDoreReportRow)
            Return rowPm_Edu_ِDoreReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As Pm_Edu_ِDoreReportRow
            Return CType(Me.Rows.Find(New Object() {Srl}),Pm_Edu_ِDoreReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Edu_ِDoreReportDataTable = CType(MyBase.Clone,Pm_Edu_ِDoreReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Edu_ِDoreReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnشروع = MyBase.Columns("شروع")
            Me.columnپایان = MyBase.Columns("پایان")
            Me.columnطول = MyBase.Columns("طول")
            Me.columnمدرس = MyBase.Columns("مدرس")
            Me.columnارائه_کننده = MyBase.Columns("ارائه کننده")
            Me.columnمحل = MyBase.Columns("محل")
            Me.columnهزینه = MyBase.Columns("هزینه")
            Me.columnموقعیت = MyBase.Columns("موقعیت")
            Me.columnدوره = MyBase.Columns("دوره")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnشروع = New Global.System.Data.DataColumn("شروع", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشروع)
            Me.columnپایان = New Global.System.Data.DataColumn("پایان", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnپایان)
            Me.columnطول = New Global.System.Data.DataColumn("طول", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnطول)
            Me.columnمدرس = New Global.System.Data.DataColumn("مدرس", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnمدرس)
            Me.columnارائه_کننده = New Global.System.Data.DataColumn("ارائه کننده", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnارائه_کننده)
            Me.columnمحل = New Global.System.Data.DataColumn("محل", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnمحل)
            Me.columnهزینه = New Global.System.Data.DataColumn("هزینه", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnهزینه)
            Me.columnموقعیت = New Global.System.Data.DataColumn("موقعیت", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnموقعیت)
            Me.columnدوره = New Global.System.Data.DataColumn("دوره", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnدوره)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnSrl.AutoIncrement = true
            Me.columnSrl.AutoIncrementSeed = -1
            Me.columnSrl.AutoIncrementStep = -1
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.ReadOnly = true
            Me.columnSrl.Unique = true
            Me.columnشروع.MaxLength = 10
            Me.columnپایان.MaxLength = 10
            Me.columnمدرس.ReadOnly = true
            Me.columnمدرس.MaxLength = 101
            Me.columnارائه_کننده.MaxLength = 500
            Me.columnمحل.MaxLength = 500
            Me.columnهزینه.ReadOnly = true
            Me.columnموقعیت.ReadOnly = true
            Me.columnموقعیت.MaxLength = 10
            Me.columnدوره.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Edu_ِDoreReportRow() As Pm_Edu_ِDoreReportRow
            Return CType(Me.NewRow,Pm_Edu_ِDoreReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Edu_ِDoreReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Edu_ِDoreReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Edu_ِDoreReportRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_ِDoreReportRowChanged(Me, New Pm_Edu_ِDoreReportRowChangeEvent(CType(e.Row,Pm_Edu_ِDoreReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Edu_ِDoreReportRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_ِDoreReportRowChanging(Me, New Pm_Edu_ِDoreReportRowChangeEvent(CType(e.Row,Pm_Edu_ِDoreReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Edu_ِDoreReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_ِDoreReportRowDeleted(Me, New Pm_Edu_ِDoreReportRowChangeEvent(CType(e.Row,Pm_Edu_ِDoreReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Edu_ِDoreReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_ِDoreReportRowDeleting(Me, New Pm_Edu_ِDoreReportRowChangeEvent(CType(e.Row,Pm_Edu_ِDoreReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Edu_ِDoreReportRow(ByVal row As Pm_Edu_ِDoreReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Edu = New Ds_Edu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Edu_ِDoreReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Rp_DoreEvaluationDataTable
        Inherits Global.System.Data.TypedTableBase(Of Rp_DoreEvaluationRow)
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Rp_DoreEvaluation"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Rp_DoreEvaluationRow
            Get
                Return CType(Me.Rows(index),Rp_DoreEvaluationRow)
            End Get
        End Property
        
        Public Event Rp_DoreEvaluationRowChanging As Rp_DoreEvaluationRowChangeEventHandler
        
        Public Event Rp_DoreEvaluationRowChanged As Rp_DoreEvaluationRowChangeEventHandler
        
        Public Event Rp_DoreEvaluationRowDeleting As Rp_DoreEvaluationRowChangeEventHandler
        
        Public Event Rp_DoreEvaluationRowDeleted As Rp_DoreEvaluationRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRp_DoreEvaluationRow(ByVal row As Rp_DoreEvaluationRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRp_DoreEvaluationRow() As Rp_DoreEvaluationRow
            Dim rowRp_DoreEvaluationRow As Rp_DoreEvaluationRow = CType(Me.NewRow,Rp_DoreEvaluationRow)
            Dim columnValuesArray(-1) As Object
            rowRp_DoreEvaluationRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRp_DoreEvaluationRow)
            Return rowRp_DoreEvaluationRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Rp_DoreEvaluationDataTable = CType(MyBase.Clone,Rp_DoreEvaluationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Rp_DoreEvaluationDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRp_DoreEvaluationRow() As Rp_DoreEvaluationRow
            Return CType(Me.NewRow,Rp_DoreEvaluationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Rp_DoreEvaluationRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Rp_DoreEvaluationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Rp_DoreEvaluationRowChangedEvent) Is Nothing) Then
                RaiseEvent Rp_DoreEvaluationRowChanged(Me, New Rp_DoreEvaluationRowChangeEvent(CType(e.Row,Rp_DoreEvaluationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Rp_DoreEvaluationRowChangingEvent) Is Nothing) Then
                RaiseEvent Rp_DoreEvaluationRowChanging(Me, New Rp_DoreEvaluationRowChangeEvent(CType(e.Row,Rp_DoreEvaluationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Rp_DoreEvaluationRowDeletedEvent) Is Nothing) Then
                RaiseEvent Rp_DoreEvaluationRowDeleted(Me, New Rp_DoreEvaluationRowChangeEvent(CType(e.Row,Rp_DoreEvaluationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Rp_DoreEvaluationRowDeletingEvent) Is Nothing) Then
                RaiseEvent Rp_DoreEvaluationRowDeleting(Me, New Rp_DoreEvaluationRowChangeEvent(CType(e.Row,Rp_DoreEvaluationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRp_DoreEvaluationRow(ByVal row As Rp_DoreEvaluationRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Edu = New Ds_Edu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Rp_DoreEvaluationDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Edu_DoreParticipatePresentDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Edu_DoreParticipatePresentRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnSrl_Dore_Participate As Global.System.Data.DataColumn
        
        Private columnتاریخ As Global.System.Data.DataColumn
        
        Private columnزمان As Global.System.Data.DataColumn
        
        Private columnتوضیحات As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Edu_DoreParticipatePresent"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_Dore_ParticipateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_Dore_Participate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاریخColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاریخ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property زمانColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnزمان
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property توضیحاتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتوضیحات
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Edu_DoreParticipatePresentRow
            Get
                Return CType(Me.Rows(index),Pm_Edu_DoreParticipatePresentRow)
            End Get
        End Property
        
        Public Event Pm_Edu_DoreParticipatePresentRowChanging As Pm_Edu_DoreParticipatePresentRowChangeEventHandler
        
        Public Event Pm_Edu_DoreParticipatePresentRowChanged As Pm_Edu_DoreParticipatePresentRowChangeEventHandler
        
        Public Event Pm_Edu_DoreParticipatePresentRowDeleting As Pm_Edu_DoreParticipatePresentRowChangeEventHandler
        
        Public Event Pm_Edu_DoreParticipatePresentRowDeleted As Pm_Edu_DoreParticipatePresentRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Edu_DoreParticipatePresentRow(ByVal row As Pm_Edu_DoreParticipatePresentRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Edu_DoreParticipatePresentRow(ByVal Srl_Dore_Participate As Integer, ByVal تاریخ As String, ByVal زمان As String, ByVal توضیحات As String) As Pm_Edu_DoreParticipatePresentRow
            Dim rowPm_Edu_DoreParticipatePresentRow As Pm_Edu_DoreParticipatePresentRow = CType(Me.NewRow,Pm_Edu_DoreParticipatePresentRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Srl_Dore_Participate, تاریخ, زمان, توضیحات}
            rowPm_Edu_DoreParticipatePresentRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Edu_DoreParticipatePresentRow)
            Return rowPm_Edu_DoreParticipatePresentRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As Pm_Edu_DoreParticipatePresentRow
            Return CType(Me.Rows.Find(New Object() {Srl}),Pm_Edu_DoreParticipatePresentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Edu_DoreParticipatePresentDataTable = CType(MyBase.Clone,Pm_Edu_DoreParticipatePresentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Edu_DoreParticipatePresentDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnSrl_Dore_Participate = MyBase.Columns("Srl_Dore_Participate")
            Me.columnتاریخ = MyBase.Columns("تاریخ")
            Me.columnزمان = MyBase.Columns("زمان")
            Me.columnتوضیحات = MyBase.Columns("توضیحات")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnSrl_Dore_Participate = New Global.System.Data.DataColumn("Srl_Dore_Participate", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_Dore_Participate)
            Me.columnتاریخ = New Global.System.Data.DataColumn("تاریخ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاریخ)
            Me.columnزمان = New Global.System.Data.DataColumn("زمان", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnزمان)
            Me.columnتوضیحات = New Global.System.Data.DataColumn("توضیحات", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتوضیحات)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnSrl.AutoIncrement = true
            Me.columnSrl.AutoIncrementSeed = -1
            Me.columnSrl.AutoIncrementStep = -1
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.ReadOnly = true
            Me.columnSrl.Unique = true
            Me.columnتاریخ.MaxLength = 10
            Me.columnزمان.MaxLength = 10
            Me.columnتوضیحات.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Edu_DoreParticipatePresentRow() As Pm_Edu_DoreParticipatePresentRow
            Return CType(Me.NewRow,Pm_Edu_DoreParticipatePresentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Edu_DoreParticipatePresentRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Edu_DoreParticipatePresentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Edu_DoreParticipatePresentRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreParticipatePresentRowChanged(Me, New Pm_Edu_DoreParticipatePresentRowChangeEvent(CType(e.Row,Pm_Edu_DoreParticipatePresentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Edu_DoreParticipatePresentRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreParticipatePresentRowChanging(Me, New Pm_Edu_DoreParticipatePresentRowChangeEvent(CType(e.Row,Pm_Edu_DoreParticipatePresentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Edu_DoreParticipatePresentRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreParticipatePresentRowDeleted(Me, New Pm_Edu_DoreParticipatePresentRowChangeEvent(CType(e.Row,Pm_Edu_DoreParticipatePresentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Edu_DoreParticipatePresentRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreParticipatePresentRowDeleting(Me, New Pm_Edu_DoreParticipatePresentRowChangeEvent(CType(e.Row,Pm_Edu_DoreParticipatePresentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Edu_DoreParticipatePresentRow(ByVal row As Pm_Edu_DoreParticipatePresentRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Edu = New Ds_Edu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Edu_DoreParticipatePresentDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Edu_DoreHoldingtitleDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Edu_DoreHoldingtitleRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnColumn1 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Edu_DoreHoldingtitle"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Column1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumn1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Edu_DoreHoldingtitleRow
            Get
                Return CType(Me.Rows(index),Pm_Edu_DoreHoldingtitleRow)
            End Get
        End Property
        
        Public Event Pm_Edu_DoreHoldingtitleRowChanging As Pm_Edu_DoreHoldingtitleRowChangeEventHandler
        
        Public Event Pm_Edu_DoreHoldingtitleRowChanged As Pm_Edu_DoreHoldingtitleRowChangeEventHandler
        
        Public Event Pm_Edu_DoreHoldingtitleRowDeleting As Pm_Edu_DoreHoldingtitleRowChangeEventHandler
        
        Public Event Pm_Edu_DoreHoldingtitleRowDeleted As Pm_Edu_DoreHoldingtitleRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Edu_DoreHoldingtitleRow(ByVal row As Pm_Edu_DoreHoldingtitleRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Edu_DoreHoldingtitleRow(ByVal Column1 As String) As Pm_Edu_DoreHoldingtitleRow
            Dim rowPm_Edu_DoreHoldingtitleRow As Pm_Edu_DoreHoldingtitleRow = CType(Me.NewRow,Pm_Edu_DoreHoldingtitleRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Column1}
            rowPm_Edu_DoreHoldingtitleRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Edu_DoreHoldingtitleRow)
            Return rowPm_Edu_DoreHoldingtitleRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As Pm_Edu_DoreHoldingtitleRow
            Return CType(Me.Rows.Find(New Object() {Srl}),Pm_Edu_DoreHoldingtitleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Edu_DoreHoldingtitleDataTable = CType(MyBase.Clone,Pm_Edu_DoreHoldingtitleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Edu_DoreHoldingtitleDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnColumn1 = MyBase.Columns("Column1")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnColumn1 = New Global.System.Data.DataColumn("Column1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumn1)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnSrl.AutoIncrement = true
            Me.columnSrl.AutoIncrementSeed = -1
            Me.columnSrl.AutoIncrementStep = -1
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.ReadOnly = true
            Me.columnSrl.Unique = true
            Me.columnColumn1.ReadOnly = true
            Me.columnColumn1.MaxLength = 626
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Edu_DoreHoldingtitleRow() As Pm_Edu_DoreHoldingtitleRow
            Return CType(Me.NewRow,Pm_Edu_DoreHoldingtitleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Edu_DoreHoldingtitleRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Edu_DoreHoldingtitleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Edu_DoreHoldingtitleRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreHoldingtitleRowChanged(Me, New Pm_Edu_DoreHoldingtitleRowChangeEvent(CType(e.Row,Pm_Edu_DoreHoldingtitleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Edu_DoreHoldingtitleRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreHoldingtitleRowChanging(Me, New Pm_Edu_DoreHoldingtitleRowChangeEvent(CType(e.Row,Pm_Edu_DoreHoldingtitleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Edu_DoreHoldingtitleRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreHoldingtitleRowDeleted(Me, New Pm_Edu_DoreHoldingtitleRowChangeEvent(CType(e.Row,Pm_Edu_DoreHoldingtitleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Edu_DoreHoldingtitleRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreHoldingtitleRowDeleting(Me, New Pm_Edu_DoreHoldingtitleRowChangeEvent(CType(e.Row,Pm_Edu_DoreHoldingtitleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Edu_DoreHoldingtitleRow(ByVal row As Pm_Edu_DoreHoldingtitleRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Edu = New Ds_Edu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Edu_DoreHoldingtitleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Edu_PresenterReportDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Edu_PresenterReportRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnنام_و_نام_خانوادگی As Global.System.Data.DataColumn
        
        Private columnنوع_دوره As Global.System.Data.DataColumn
        
        Private columnنام_دوره As Global.System.Data.DataColumn
        
        Private columnتاریخ As Global.System.Data.DataColumn
        
        Private columnمدت As Global.System.Data.DataColumn
        
        Private columnمحل_برگزارری As Global.System.Data.DataColumn
        
        Private columnموسسه_آموزشی As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Edu_PresenterReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نام_و_نام_خانوادگیColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام_و_نام_خانوادگی
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نوع_دورهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنوع_دوره
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نام_دورهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام_دوره
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاریخColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاریخ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property مدتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnمدت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property محل_برگزارریColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnمحل_برگزارری
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property موسسه_آموزشیColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnموسسه_آموزشی
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Edu_PresenterReportRow
            Get
                Return CType(Me.Rows(index),Pm_Edu_PresenterReportRow)
            End Get
        End Property
        
        Public Event Pm_Edu_PresenterReportRowChanging As Pm_Edu_PresenterReportRowChangeEventHandler
        
        Public Event Pm_Edu_PresenterReportRowChanged As Pm_Edu_PresenterReportRowChangeEventHandler
        
        Public Event Pm_Edu_PresenterReportRowDeleting As Pm_Edu_PresenterReportRowChangeEventHandler
        
        Public Event Pm_Edu_PresenterReportRowDeleted As Pm_Edu_PresenterReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Edu_PresenterReportRow(ByVal row As Pm_Edu_PresenterReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Edu_PresenterReportRow(ByVal نام_و_نام_خانوادگی As String, ByVal نوع_دوره As String, ByVal نام_دوره As String, ByVal تاریخ As String, ByVal مدت As Integer, ByVal محل_برگزارری As String, ByVal موسسه_آموزشی As String) As Pm_Edu_PresenterReportRow
            Dim rowPm_Edu_PresenterReportRow As Pm_Edu_PresenterReportRow = CType(Me.NewRow,Pm_Edu_PresenterReportRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, نام_و_نام_خانوادگی, نوع_دوره, نام_دوره, تاریخ, مدت, محل_برگزارری, موسسه_آموزشی}
            rowPm_Edu_PresenterReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Edu_PresenterReportRow)
            Return rowPm_Edu_PresenterReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As Pm_Edu_PresenterReportRow
            Return CType(Me.Rows.Find(New Object() {Srl}),Pm_Edu_PresenterReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Edu_PresenterReportDataTable = CType(MyBase.Clone,Pm_Edu_PresenterReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Edu_PresenterReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnنام_و_نام_خانوادگی = MyBase.Columns("نام و نام خانوادگی")
            Me.columnنوع_دوره = MyBase.Columns("نوع دوره")
            Me.columnنام_دوره = MyBase.Columns("نام دوره")
            Me.columnتاریخ = MyBase.Columns("تاریخ")
            Me.columnمدت = MyBase.Columns("مدت")
            Me.columnمحل_برگزارری = MyBase.Columns("محل برگزارری")
            Me.columnموسسه_آموزشی = MyBase.Columns("موسسه آموزشی")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnنام_و_نام_خانوادگی = New Global.System.Data.DataColumn("نام و نام خانوادگی", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام_و_نام_خانوادگی)
            Me.columnنوع_دوره = New Global.System.Data.DataColumn("نوع دوره", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنوع_دوره)
            Me.columnنام_دوره = New Global.System.Data.DataColumn("نام دوره", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام_دوره)
            Me.columnتاریخ = New Global.System.Data.DataColumn("تاریخ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاریخ)
            Me.columnمدت = New Global.System.Data.DataColumn("مدت", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnمدت)
            Me.columnمحل_برگزارری = New Global.System.Data.DataColumn("محل برگزارری", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnمحل_برگزارری)
            Me.columnموسسه_آموزشی = New Global.System.Data.DataColumn("موسسه آموزشی", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnموسسه_آموزشی)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnSrl.AutoIncrement = true
            Me.columnSrl.AutoIncrementSeed = -1
            Me.columnSrl.AutoIncrementStep = -1
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.ReadOnly = true
            Me.columnSrl.Unique = true
            Me.columnنام_و_نام_خانوادگی.ReadOnly = true
            Me.columnنام_و_نام_خانوادگی.MaxLength = 101
            Me.columnنوع_دوره.MaxLength = 50
            Me.columnنام_دوره.MaxLength = 500
            Me.columnتاریخ.MaxLength = 10
            Me.columnمحل_برگزارری.MaxLength = 500
            Me.columnموسسه_آموزشی.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Edu_PresenterReportRow() As Pm_Edu_PresenterReportRow
            Return CType(Me.NewRow,Pm_Edu_PresenterReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Edu_PresenterReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Edu_PresenterReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Edu_PresenterReportRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_PresenterReportRowChanged(Me, New Pm_Edu_PresenterReportRowChangeEvent(CType(e.Row,Pm_Edu_PresenterReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Edu_PresenterReportRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_PresenterReportRowChanging(Me, New Pm_Edu_PresenterReportRowChangeEvent(CType(e.Row,Pm_Edu_PresenterReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Edu_PresenterReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_PresenterReportRowDeleted(Me, New Pm_Edu_PresenterReportRowChangeEvent(CType(e.Row,Pm_Edu_PresenterReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Edu_PresenterReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_PresenterReportRowDeleting(Me, New Pm_Edu_PresenterReportRowChangeEvent(CType(e.Row,Pm_Edu_PresenterReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Edu_PresenterReportRow(ByVal row As Pm_Edu_PresenterReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Edu = New Ds_Edu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Edu_PresenterReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Edu_DoreHoldingDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Edu_DoreHoldingRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnعنوان As Global.System.Data.DataColumn
        
        Private columnشروع As Global.System.Data.DataColumn
        
        Private columnپایان As Global.System.Data.DataColumn
        
        Private columnمدت As Global.System.Data.DataColumn
        
        Private columnمدرس As Global.System.Data.DataColumn
        
        Private columnمحل As Global.System.Data.DataColumn
        
        Private columnبرگزارکننده As Global.System.Data.DataColumn
        
        Private columnهزینه_آموزشی As Global.System.Data.DataColumn
        
        Private columnهزینه_رفاهی As Global.System.Data.DataColumn
        
        Private columnهزینه_متفرقه As Global.System.Data.DataColumn
        
        Private columnهزینه_کل As Global.System.Data.DataColumn
        
        Private columnمکان As Global.System.Data.DataColumn
        
        Private columnجلسات As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Edu_DoreHolding"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property عنوانColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnعنوان
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شروعColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشروع
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property پایانColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnپایان
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property مدتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnمدت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property مدرسColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnمدرس
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property محلColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnمحل
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property برگزارکنندهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnبرگزارکننده
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property هزینه_آموزشیColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnهزینه_آموزشی
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property هزینه_رفاهیColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnهزینه_رفاهی
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property هزینه_متفرقهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnهزینه_متفرقه
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property هزینه_کلColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnهزینه_کل
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property مکانColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnمکان
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property جلساتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnجلسات
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Edu_DoreHoldingRow
            Get
                Return CType(Me.Rows(index),Pm_Edu_DoreHoldingRow)
            End Get
        End Property
        
        Public Event Pm_Edu_DoreHoldingRowChanging As Pm_Edu_DoreHoldingRowChangeEventHandler
        
        Public Event Pm_Edu_DoreHoldingRowChanged As Pm_Edu_DoreHoldingRowChangeEventHandler
        
        Public Event Pm_Edu_DoreHoldingRowDeleting As Pm_Edu_DoreHoldingRowChangeEventHandler
        
        Public Event Pm_Edu_DoreHoldingRowDeleted As Pm_Edu_DoreHoldingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Edu_DoreHoldingRow(ByVal row As Pm_Edu_DoreHoldingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Edu_DoreHoldingRow(ByVal عنوان As String, ByVal شروع As String, ByVal پایان As String, ByVal مدت As Integer, ByVal مدرس As String, ByVal محل As String, ByVal برگزارکننده As String, ByVal هزینه_آموزشی As Integer, ByVal هزینه_رفاهی As Integer, ByVal هزینه_متفرقه As Integer, ByVal هزینه_کل As Integer, ByVal مکان As String, ByVal جلسات As Integer) As Pm_Edu_DoreHoldingRow
            Dim rowPm_Edu_DoreHoldingRow As Pm_Edu_DoreHoldingRow = CType(Me.NewRow,Pm_Edu_DoreHoldingRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, عنوان, شروع, پایان, مدت, مدرس, محل, برگزارکننده, هزینه_آموزشی, هزینه_رفاهی, هزینه_متفرقه, هزینه_کل, مکان, جلسات}
            rowPm_Edu_DoreHoldingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Edu_DoreHoldingRow)
            Return rowPm_Edu_DoreHoldingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As Pm_Edu_DoreHoldingRow
            Return CType(Me.Rows.Find(New Object() {Srl}),Pm_Edu_DoreHoldingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Edu_DoreHoldingDataTable = CType(MyBase.Clone,Pm_Edu_DoreHoldingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Edu_DoreHoldingDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnعنوان = MyBase.Columns("عنوان")
            Me.columnشروع = MyBase.Columns("شروع")
            Me.columnپایان = MyBase.Columns("پایان")
            Me.columnمدت = MyBase.Columns("مدت")
            Me.columnمدرس = MyBase.Columns("مدرس")
            Me.columnمحل = MyBase.Columns("محل")
            Me.columnبرگزارکننده = MyBase.Columns("برگزارکننده")
            Me.columnهزینه_آموزشی = MyBase.Columns("هزینه آموزشی")
            Me.columnهزینه_رفاهی = MyBase.Columns("هزینه رفاهی")
            Me.columnهزینه_متفرقه = MyBase.Columns("هزینه متفرقه")
            Me.columnهزینه_کل = MyBase.Columns("هزینه کل")
            Me.columnمکان = MyBase.Columns("مکان")
            Me.columnجلسات = MyBase.Columns("جلسات")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnعنوان = New Global.System.Data.DataColumn("عنوان", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnعنوان)
            Me.columnشروع = New Global.System.Data.DataColumn("شروع", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشروع)
            Me.columnپایان = New Global.System.Data.DataColumn("پایان", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnپایان)
            Me.columnمدت = New Global.System.Data.DataColumn("مدت", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnمدت)
            Me.columnمدرس = New Global.System.Data.DataColumn("مدرس", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnمدرس)
            Me.columnمحل = New Global.System.Data.DataColumn("محل", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnمحل)
            Me.columnبرگزارکننده = New Global.System.Data.DataColumn("برگزارکننده", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnبرگزارکننده)
            Me.columnهزینه_آموزشی = New Global.System.Data.DataColumn("هزینه آموزشی", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnهزینه_آموزشی)
            Me.columnهزینه_رفاهی = New Global.System.Data.DataColumn("هزینه رفاهی", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnهزینه_رفاهی)
            Me.columnهزینه_متفرقه = New Global.System.Data.DataColumn("هزینه متفرقه", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnهزینه_متفرقه)
            Me.columnهزینه_کل = New Global.System.Data.DataColumn("هزینه کل", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnهزینه_کل)
            Me.columnمکان = New Global.System.Data.DataColumn("مکان", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnمکان)
            Me.columnجلسات = New Global.System.Data.DataColumn("جلسات", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnجلسات)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnSrl.AutoIncrement = true
            Me.columnSrl.AutoIncrementSeed = -1
            Me.columnSrl.AutoIncrementStep = -1
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.ReadOnly = true
            Me.columnSrl.Unique = true
            Me.columnعنوان.MaxLength = 500
            Me.columnشروع.MaxLength = 10
            Me.columnپایان.MaxLength = 10
            Me.columnمدرس.ReadOnly = true
            Me.columnمدرس.MaxLength = 101
            Me.columnمحل.MaxLength = 500
            Me.columnبرگزارکننده.MaxLength = 500
            Me.columnهزینه_کل.ReadOnly = true
            Me.columnمکان.ReadOnly = true
            Me.columnمکان.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Edu_DoreHoldingRow() As Pm_Edu_DoreHoldingRow
            Return CType(Me.NewRow,Pm_Edu_DoreHoldingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Edu_DoreHoldingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Edu_DoreHoldingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Edu_DoreHoldingRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreHoldingRowChanged(Me, New Pm_Edu_DoreHoldingRowChangeEvent(CType(e.Row,Pm_Edu_DoreHoldingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Edu_DoreHoldingRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreHoldingRowChanging(Me, New Pm_Edu_DoreHoldingRowChangeEvent(CType(e.Row,Pm_Edu_DoreHoldingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Edu_DoreHoldingRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreHoldingRowDeleted(Me, New Pm_Edu_DoreHoldingRowChangeEvent(CType(e.Row,Pm_Edu_DoreHoldingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Edu_DoreHoldingRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreHoldingRowDeleting(Me, New Pm_Edu_DoreHoldingRowChangeEvent(CType(e.Row,Pm_Edu_DoreHoldingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Edu_DoreHoldingRow(ByVal row As Pm_Edu_DoreHoldingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Edu = New Ds_Edu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Edu_DoreHoldingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Edu_DoreParticipationDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Edu_DoreParticipationRow)
        
        Private columnشماره As Global.System.Data.DataColumn
        
        Private columnنام_و_نام_خانوادگی As Global.System.Data.DataColumn
        
        Private columnمدت_شرکت As Global.System.Data.DataColumn
        
        Private columnنمره As Global.System.Data.DataColumn
        
        Private columnمدرک As Global.System.Data.DataColumn
        
        Private columnاموزش As Global.System.Data.DataColumn
        
        Private columnشرکت As Global.System.Data.DataColumn
        
        Private columnتاریخ_صورت_ As Global.System.Data.DataColumn
        
        Private columnsrl_ashkhas As Global.System.Data.DataColumn
        
        Private columnEvaluationForm As Global.System.Data.DataColumn
        
        Private columnsrl As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Edu_DoreParticipation"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شمارهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشماره
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نام_و_نام_خانوادگیColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام_و_نام_خانوادگی
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property مدت_شرکتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnمدت_شرکت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نمرهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنمره
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property مدرکColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnمدرک
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property اموزشColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnاموزش
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شرکتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشرکت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاریخ_صورت_Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاریخ_صورت_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srl_ashkhasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl_ashkhas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EvaluationFormColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEvaluationForm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property srlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Edu_DoreParticipationRow
            Get
                Return CType(Me.Rows(index),Pm_Edu_DoreParticipationRow)
            End Get
        End Property
        
        Public Event Pm_Edu_DoreParticipationRowChanging As Pm_Edu_DoreParticipationRowChangeEventHandler
        
        Public Event Pm_Edu_DoreParticipationRowChanged As Pm_Edu_DoreParticipationRowChangeEventHandler
        
        Public Event Pm_Edu_DoreParticipationRowDeleting As Pm_Edu_DoreParticipationRowChangeEventHandler
        
        Public Event Pm_Edu_DoreParticipationRowDeleted As Pm_Edu_DoreParticipationRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Edu_DoreParticipationRow(ByVal row As Pm_Edu_DoreParticipationRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Edu_DoreParticipationRow(ByVal نام_و_نام_خانوادگی As String, ByVal مدت_شرکت As String, ByVal نمره As String, ByVal مدرک As Boolean, ByVal اموزش As Boolean, ByVal شرکت As Boolean, ByVal تاریخ_صورت_ As String, ByVal srl_ashkhas As Integer, ByVal EvaluationForm As String) As Pm_Edu_DoreParticipationRow
            Dim rowPm_Edu_DoreParticipationRow As Pm_Edu_DoreParticipationRow = CType(Me.NewRow,Pm_Edu_DoreParticipationRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, نام_و_نام_خانوادگی, مدت_شرکت, نمره, مدرک, اموزش, شرکت, تاریخ_صورت_, srl_ashkhas, EvaluationForm, Nothing}
            rowPm_Edu_DoreParticipationRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Edu_DoreParticipationRow)
            Return rowPm_Edu_DoreParticipationRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByشمارهsrl(ByVal شماره As Integer, ByVal srl As Integer) As Pm_Edu_DoreParticipationRow
            Return CType(Me.Rows.Find(New Object() {شماره, srl}),Pm_Edu_DoreParticipationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Edu_DoreParticipationDataTable = CType(MyBase.Clone,Pm_Edu_DoreParticipationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Edu_DoreParticipationDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnشماره = MyBase.Columns("شماره")
            Me.columnنام_و_نام_خانوادگی = MyBase.Columns("نام و نام خانوادگی")
            Me.columnمدت_شرکت = MyBase.Columns("مدت شرکت")
            Me.columnنمره = MyBase.Columns("نمره")
            Me.columnمدرک = MyBase.Columns("مدرک")
            Me.columnاموزش = MyBase.Columns("اموزش")
            Me.columnشرکت = MyBase.Columns("شرکت")
            Me.columnتاریخ_صورت_ = MyBase.Columns("تاریخ صورت ")
            Me.columnsrl_ashkhas = MyBase.Columns("srl_ashkhas")
            Me.columnEvaluationForm = MyBase.Columns("EvaluationForm")
            Me.columnsrl = MyBase.Columns("srl")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnشماره = New Global.System.Data.DataColumn("شماره", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشماره)
            Me.columnنام_و_نام_خانوادگی = New Global.System.Data.DataColumn("نام و نام خانوادگی", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام_و_نام_خانوادگی)
            Me.columnمدت_شرکت = New Global.System.Data.DataColumn("مدت شرکت", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnمدت_شرکت)
            Me.columnنمره = New Global.System.Data.DataColumn("نمره", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنمره)
            Me.columnمدرک = New Global.System.Data.DataColumn("مدرک", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnمدرک)
            Me.columnاموزش = New Global.System.Data.DataColumn("اموزش", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnاموزش)
            Me.columnشرکت = New Global.System.Data.DataColumn("شرکت", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشرکت)
            Me.columnتاریخ_صورت_ = New Global.System.Data.DataColumn("تاریخ صورت ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاریخ_صورت_)
            Me.columnsrl_ashkhas = New Global.System.Data.DataColumn("srl_ashkhas", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl_ashkhas)
            Me.columnEvaluationForm = New Global.System.Data.DataColumn("EvaluationForm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEvaluationForm)
            Me.columnsrl = New Global.System.Data.DataColumn("srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrl)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnشماره, Me.columnsrl}, true))
            Me.columnشماره.AutoIncrement = true
            Me.columnشماره.AutoIncrementSeed = -1
            Me.columnشماره.AutoIncrementStep = -1
            Me.columnشماره.AllowDBNull = false
            Me.columnشماره.ReadOnly = true
            Me.columnنام_و_نام_خانوادگی.ReadOnly = true
            Me.columnنام_و_نام_خانوادگی.MaxLength = 101
            Me.columnمدت_شرکت.MaxLength = 10
            Me.columnنمره.MaxLength = 50
            Me.columnتاریخ_صورت_.MaxLength = 10
            Me.columnEvaluationForm.MaxLength = 50
            Me.columnsrl.AutoIncrement = true
            Me.columnsrl.AutoIncrementSeed = -1
            Me.columnsrl.AutoIncrementStep = -1
            Me.columnsrl.AllowDBNull = false
            Me.columnsrl.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Edu_DoreParticipationRow() As Pm_Edu_DoreParticipationRow
            Return CType(Me.NewRow,Pm_Edu_DoreParticipationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Edu_DoreParticipationRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Edu_DoreParticipationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Edu_DoreParticipationRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreParticipationRowChanged(Me, New Pm_Edu_DoreParticipationRowChangeEvent(CType(e.Row,Pm_Edu_DoreParticipationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Edu_DoreParticipationRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreParticipationRowChanging(Me, New Pm_Edu_DoreParticipationRowChangeEvent(CType(e.Row,Pm_Edu_DoreParticipationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Edu_DoreParticipationRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreParticipationRowDeleted(Me, New Pm_Edu_DoreParticipationRowChangeEvent(CType(e.Row,Pm_Edu_DoreParticipationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Edu_DoreParticipationRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Edu_DoreParticipationRowDeleting(Me, New Pm_Edu_DoreParticipationRowChangeEvent(CType(e.Row,Pm_Edu_DoreParticipationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Edu_DoreParticipationRow(ByVal row As Pm_Edu_DoreParticipationRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Edu = New Ds_Edu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Edu_DoreParticipationDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Edu_JobTitleRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Edu_JobTitle As Pm_Edu_JobTitleDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Edu_JobTitle = CType(Me.Table,Pm_Edu_JobTitleDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Edu_JobTitle.srlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Edu_JobTitle.srlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property عنوان() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_JobTitle.عنوانColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'عنوان' in table 'Pm_Edu_JobTitle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_JobTitle.عنوانColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property کد() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_JobTitle.کدColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'کد' in table 'Pm_Edu_JobTitle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_JobTitle.کدColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property عضو_توانیر() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_JobTitle.عضو_توانیرColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'عضو توانیر' in table 'Pm_Edu_JobTitle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_JobTitle.عضو_توانیرColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsعنوانNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_JobTitle.عنوانColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetعنوانNull()
            Me(Me.tablePm_Edu_JobTitle.عنوانColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsکدNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_JobTitle.کدColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetکدNull()
            Me(Me.tablePm_Edu_JobTitle.کدColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isعضو_توانیرNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_JobTitle.عضو_توانیرColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setعضو_توانیرNull()
            Me(Me.tablePm_Edu_JobTitle.عضو_توانیرColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Edu_DoreTypeRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Edu_DoreType As Pm_Edu_DoreTypeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Edu_DoreType = CType(Me.Table,Pm_Edu_DoreTypeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Edu_DoreType.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Edu_DoreType.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property عنوان() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreType.عنوانColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'عنوان' in table 'Pm_Edu_DoreType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreType.عنوانColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsعنوانNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreType.عنوانColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetعنوانNull()
            Me(Me.tablePm_Edu_DoreType.عنوانColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Edu_DoreRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Edu_Dore As Pm_Edu_DoreDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Edu_Dore = CType(Me.Table,Pm_Edu_DoreDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Edu_Dore.srlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Edu_Dore.srlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property کد() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_Dore.کدColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'کد' in table 'Pm_Edu_Dore' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_Dore.کدColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property عنوان() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_Dore.عنوانColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'عنوان' in table 'Pm_Edu_Dore' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_Dore.عنوانColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نوع_دوره() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_Dore.نوع_دورهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نوع دوره' in table 'Pm_Edu_Dore' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_Dore.نوع_دورهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property طول_دوره() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_Dore.طول_دورهColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'طول دوره' in table 'Pm_Edu_Dore' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_Dore.طول_دورهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsکدNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_Dore.کدColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetکدNull()
            Me(Me.tablePm_Edu_Dore.کدColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsعنوانNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_Dore.عنوانColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetعنوانNull()
            Me(Me.tablePm_Edu_Dore.عنوانColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنوع_دورهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_Dore.نوع_دورهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنوع_دورهNull()
            Me(Me.tablePm_Edu_Dore.نوع_دورهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isطول_دورهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_Dore.طول_دورهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setطول_دورهNull()
            Me(Me.tablePm_Edu_Dore.طول_دورهColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Edu_DoreJobRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Edu_DoreJob As Pm_Edu_DoreJobDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Edu_DoreJob = CType(Me.Table,Pm_Edu_DoreJobDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Edu_DoreJob.srlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Edu_DoreJob.srlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property عنوان() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreJob.عنوانColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'عنوان' in table 'Pm_Edu_DoreJob' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreJob.عنوانColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_job() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreJob.srl_jobColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_job' in table 'Pm_Edu_DoreJob' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreJob.srl_jobColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsعنوانNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreJob.عنوانColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetعنوانNull()
            Me(Me.tablePm_Edu_DoreJob.عنوانColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_jobNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreJob.srl_jobColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_jobNull()
            Me(Me.tablePm_Edu_DoreJob.srl_jobColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Edu_DorePlaceRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Edu_DorePlace As Pm_Edu_DorePlaceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Edu_DorePlace = CType(Me.Table,Pm_Edu_DorePlaceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Edu_DorePlace.srlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Edu_DorePlace.srlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DorePlace.نامColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام' in table 'Pm_Edu_DorePlace' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DorePlace.نامColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsنامNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DorePlace.نامColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetنامNull()
            Me(Me.tablePm_Edu_DorePlace.نامColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Edu_DorePresenterRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Edu_DorePresenter As Pm_Edu_DorePresenterDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Edu_DorePresenter = CType(Me.Table,Pm_Edu_DorePresenterDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Edu_DorePresenter.srlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Edu_DorePresenter.srlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DorePresenter.نامColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام' in table 'Pm_Edu_DorePresenter' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DorePresenter.نامColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsنامNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DorePresenter.نامColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetنامNull()
            Me(Me.tablePm_Edu_DorePresenter.نامColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Edu_TeacherRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Edu_Teacher As Pm_Edu_TeacherDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Edu_Teacher = CType(Me.Table,Pm_Edu_TeacherDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Edu_Teacher.srlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Edu_Teacher.srlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نا_م_و_نام_خانوادگی() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_Teacher.نا_م_و_نام_خانوادگیColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نا م و نام خانوادگی' in table 'Pm_Edu_Teacher' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_Teacher.نا_م_و_نام_خانوادگیColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property همراه() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_Teacher.همراهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'همراه' in table 'Pm_Edu_Teacher' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_Teacher.همراهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شماره_ثابت() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_Teacher.شماره_ثابتColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شماره ثابت' in table 'Pm_Edu_Teacher' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_Teacher.شماره_ثابتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنا_م_و_نام_خانوادگیNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_Teacher.نا_م_و_نام_خانوادگیColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنا_م_و_نام_خانوادگیNull()
            Me(Me.tablePm_Edu_Teacher.نا_م_و_نام_خانوادگیColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsهمراهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_Teacher.همراهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetهمراهNull()
            Me(Me.tablePm_Edu_Teacher.همراهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isشماره_ثابتNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_Teacher.شماره_ثابتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setشماره_ثابتNull()
            Me(Me.tablePm_Edu_Teacher.شماره_ثابتColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Edu_EvaluationItemRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Edu_EvaluationItem As Pm_Edu_EvaluationItemDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Edu_EvaluationItem = CType(Me.Table,Pm_Edu_EvaluationItemDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Edu_EvaluationItem.srlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Edu_EvaluationItem.srlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property عنوان() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_EvaluationItem.عنوانColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'عنوان' in table 'Pm_Edu_EvaluationItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_EvaluationItem.عنوانColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsعنوانNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_EvaluationItem.عنوانColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetعنوانNull()
            Me(Me.tablePm_Edu_EvaluationItem.عنوانColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Edu_EvaluationRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Edu_Evaluation As Pm_Edu_EvaluationDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Edu_Evaluation = CType(Me.Table,Pm_Edu_EvaluationDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Title() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_Evaluation.TitleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Title' in table 'Pm_Edu_Evaluation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_Evaluation.TitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _بد_25_() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_Evaluation._بد_25_Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'بد(25)' in table 'Pm_Edu_Evaluation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_Evaluation._بد_25_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _متوسط_50_() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_Evaluation._متوسط_50_Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'متوسط(50)' in table 'Pm_Edu_Evaluation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_Evaluation._متوسط_50_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _خوب_75_() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_Evaluation._خوب_75_Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'خوب(75)' in table 'Pm_Edu_Evaluation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_Evaluation._خوب_75_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _عالی_100_() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_Evaluation._عالی_100_Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'عالی(100)' in table 'Pm_Edu_Evaluation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_Evaluation._عالی_100_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Edu_Evaluation.srlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Edu_Evaluation.srlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTitleNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_Evaluation.TitleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTitleNull()
            Me(Me.tablePm_Edu_Evaluation.TitleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_بد_25_Null() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_Evaluation._بد_25_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_بد_25_Null()
            Me(Me.tablePm_Edu_Evaluation._بد_25_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_متوسط_50_Null() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_Evaluation._متوسط_50_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_متوسط_50_Null()
            Me(Me.tablePm_Edu_Evaluation._متوسط_50_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_خوب_75_Null() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_Evaluation._خوب_75_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_خوب_75_Null()
            Me(Me.tablePm_Edu_Evaluation._خوب_75_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_عالی_100_Null() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_Evaluation._عالی_100_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_عالی_100_Null()
            Me(Me.tablePm_Edu_Evaluation._عالی_100_Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Edu_JobDoreRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Edu_JobDore As Pm_Edu_JobDoreDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Edu_JobDore = CType(Me.Table,Pm_Edu_JobDoreDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Edu_JobDore.srlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Edu_JobDore.srlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property کد() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_JobDore.کدColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'کد' in table 'Pm_Edu_JobDore' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_JobDore.کدColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property عنوان() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_JobDore.عنوانColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'عنوان' in table 'Pm_Edu_JobDore' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_JobDore.عنوانColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property طول_دوره() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_JobDore.طول_دورهColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'طول دوره' in table 'Pm_Edu_JobDore' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_JobDore.طول_دورهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نوع_دوره() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_JobDore.نوع_دورهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نوع دوره' in table 'Pm_Edu_JobDore' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_JobDore.نوع_دورهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsکدNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_JobDore.کدColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetکدNull()
            Me(Me.tablePm_Edu_JobDore.کدColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsعنوانNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_JobDore.عنوانColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetعنوانNull()
            Me(Me.tablePm_Edu_JobDore.عنوانColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isطول_دورهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_JobDore.طول_دورهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setطول_دورهNull()
            Me(Me.tablePm_Edu_JobDore.طول_دورهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنوع_دورهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_JobDore.نوع_دورهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنوع_دورهNull()
            Me(Me.tablePm_Edu_JobDore.نوع_دورهColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Edu_ِDoreReportRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Edu_ِDoreReport As Pm_Edu_ِDoreReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Edu_ِDoreReport = CType(Me.Table,Pm_Edu_ِDoreReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Edu_ِDoreReport.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Edu_ِDoreReport.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شروع() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_ِDoreReport.شروعColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شروع' in table 'Pm_Edu_ِDoreReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_ِDoreReport.شروعColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property پایان() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_ِDoreReport.پایانColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'پایان' in table 'Pm_Edu_ِDoreReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_ِDoreReport.پایانColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property طول() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_ِDoreReport.طولColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'طول' in table 'Pm_Edu_ِDoreReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_ِDoreReport.طولColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property مدرس() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_ِDoreReport.مدرسColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'مدرس' in table 'Pm_Edu_ِDoreReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_ِDoreReport.مدرسColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ارائه_کننده() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_ِDoreReport.ارائه_کنندهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ارائه کننده' in table 'Pm_Edu_ِDoreReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_ِDoreReport.ارائه_کنندهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property محل() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_ِDoreReport.محلColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'محل' in table 'Pm_Edu_ِDoreReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_ِDoreReport.محلColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property هزینه() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_ِDoreReport.هزینهColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'هزینه' in table 'Pm_Edu_ِDoreReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_ِDoreReport.هزینهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property موقعیت() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_ِDoreReport.موقعیتColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'موقعیت' in table 'Pm_Edu_ِDoreReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_ِDoreReport.موقعیتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property دوره() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_ِDoreReport.دورهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'دوره' in table 'Pm_Edu_ِDoreReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_ِDoreReport.دورهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsشروعNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_ِDoreReport.شروعColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetشروعNull()
            Me(Me.tablePm_Edu_ِDoreReport.شروعColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsپایانNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_ِDoreReport.پایانColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetپایانNull()
            Me(Me.tablePm_Edu_ِDoreReport.پایانColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsطولNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_ِDoreReport.طولColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetطولNull()
            Me(Me.tablePm_Edu_ِDoreReport.طولColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsمدرسNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_ِDoreReport.مدرسColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetمدرسNull()
            Me(Me.tablePm_Edu_ِDoreReport.مدرسColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isارائه_کنندهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_ِDoreReport.ارائه_کنندهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setارائه_کنندهNull()
            Me(Me.tablePm_Edu_ِDoreReport.ارائه_کنندهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsمحلNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_ِDoreReport.محلColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetمحلNull()
            Me(Me.tablePm_Edu_ِDoreReport.محلColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsهزینهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_ِDoreReport.هزینهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetهزینهNull()
            Me(Me.tablePm_Edu_ِDoreReport.هزینهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsموقعیتNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_ِDoreReport.موقعیتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetموقعیتNull()
            Me(Me.tablePm_Edu_ِDoreReport.موقعیتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsدورهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_ِDoreReport.دورهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetدورهNull()
            Me(Me.tablePm_Edu_ِDoreReport.دورهColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Rp_DoreEvaluationRow
        Inherits Global.System.Data.DataRow
        
        Private tableRp_DoreEvaluation As Rp_DoreEvaluationDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRp_DoreEvaluation = CType(Me.Table,Rp_DoreEvaluationDataTable)
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Edu_DoreParticipatePresentRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Edu_DoreParticipatePresent As Pm_Edu_DoreParticipatePresentDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Edu_DoreParticipatePresent = CType(Me.Table,Pm_Edu_DoreParticipatePresentDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Edu_DoreParticipatePresent.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Edu_DoreParticipatePresent.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_Dore_Participate() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreParticipatePresent.Srl_Dore_ParticipateColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_Dore_Participate' in table 'Pm_Edu_DoreParticipatePrese"& _ 
                            "nt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreParticipatePresent.Srl_Dore_ParticipateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاریخ() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreParticipatePresent.تاریخColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تاریخ' in table 'Pm_Edu_DoreParticipatePresent' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreParticipatePresent.تاریخColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property زمان() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreParticipatePresent.زمانColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'زمان' in table 'Pm_Edu_DoreParticipatePresent' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreParticipatePresent.زمانColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property توضیحات() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreParticipatePresent.توضیحاتColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'توضیحات' in table 'Pm_Edu_DoreParticipatePresent' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreParticipatePresent.توضیحاتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_Dore_ParticipateNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreParticipatePresent.Srl_Dore_ParticipateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_Dore_ParticipateNull()
            Me(Me.tablePm_Edu_DoreParticipatePresent.Srl_Dore_ParticipateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتاریخNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreParticipatePresent.تاریخColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتاریخNull()
            Me(Me.tablePm_Edu_DoreParticipatePresent.تاریخColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsزمانNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreParticipatePresent.زمانColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetزمانNull()
            Me(Me.tablePm_Edu_DoreParticipatePresent.زمانColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتوضیحاتNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreParticipatePresent.توضیحاتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتوضیحاتNull()
            Me(Me.tablePm_Edu_DoreParticipatePresent.توضیحاتColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Edu_DoreHoldingtitleRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Edu_DoreHoldingtitle As Pm_Edu_DoreHoldingtitleDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Edu_DoreHoldingtitle = CType(Me.Table,Pm_Edu_DoreHoldingtitleDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Edu_DoreHoldingtitle.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Edu_DoreHoldingtitle.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Column1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreHoldingtitle.Column1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Column1' in table 'Pm_Edu_DoreHoldingtitle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreHoldingtitle.Column1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumn1Null() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreHoldingtitle.Column1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumn1Null()
            Me(Me.tablePm_Edu_DoreHoldingtitle.Column1Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Edu_PresenterReportRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Edu_PresenterReport As Pm_Edu_PresenterReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Edu_PresenterReport = CType(Me.Table,Pm_Edu_PresenterReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Edu_PresenterReport.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Edu_PresenterReport.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام_و_نام_خانوادگی() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_PresenterReport.نام_و_نام_خانوادگیColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام و نام خانوادگی' in table 'Pm_Edu_PresenterReport' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_PresenterReport.نام_و_نام_خانوادگیColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نوع_دوره() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_PresenterReport.نوع_دورهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نوع دوره' in table 'Pm_Edu_PresenterReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_PresenterReport.نوع_دورهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام_دوره() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_PresenterReport.نام_دورهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام دوره' in table 'Pm_Edu_PresenterReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_PresenterReport.نام_دورهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاریخ() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_PresenterReport.تاریخColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تاریخ' in table 'Pm_Edu_PresenterReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_PresenterReport.تاریخColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property مدت() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_PresenterReport.مدتColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'مدت' in table 'Pm_Edu_PresenterReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_PresenterReport.مدتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property محل_برگزارری() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_PresenterReport.محل_برگزارریColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'محل برگزارری' in table 'Pm_Edu_PresenterReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_PresenterReport.محل_برگزارریColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property موسسه_آموزشی() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_PresenterReport.موسسه_آموزشیColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'موسسه آموزشی' in table 'Pm_Edu_PresenterReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_PresenterReport.موسسه_آموزشیColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنام_و_نام_خانوادگیNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_PresenterReport.نام_و_نام_خانوادگیColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنام_و_نام_خانوادگیNull()
            Me(Me.tablePm_Edu_PresenterReport.نام_و_نام_خانوادگیColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنوع_دورهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_PresenterReport.نوع_دورهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنوع_دورهNull()
            Me(Me.tablePm_Edu_PresenterReport.نوع_دورهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنام_دورهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_PresenterReport.نام_دورهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنام_دورهNull()
            Me(Me.tablePm_Edu_PresenterReport.نام_دورهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتاریخNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_PresenterReport.تاریخColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتاریخNull()
            Me(Me.tablePm_Edu_PresenterReport.تاریخColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsمدتNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_PresenterReport.مدتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetمدتNull()
            Me(Me.tablePm_Edu_PresenterReport.مدتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isمحل_برگزارریNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_PresenterReport.محل_برگزارریColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setمحل_برگزارریNull()
            Me(Me.tablePm_Edu_PresenterReport.محل_برگزارریColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isموسسه_آموزشیNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_PresenterReport.موسسه_آموزشیColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setموسسه_آموزشیNull()
            Me(Me.tablePm_Edu_PresenterReport.موسسه_آموزشیColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Edu_DoreHoldingRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Edu_DoreHolding As Pm_Edu_DoreHoldingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Edu_DoreHolding = CType(Me.Table,Pm_Edu_DoreHoldingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Edu_DoreHolding.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Edu_DoreHolding.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property عنوان() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreHolding.عنوانColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'عنوان' in table 'Pm_Edu_DoreHolding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreHolding.عنوانColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شروع() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreHolding.شروعColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شروع' in table 'Pm_Edu_DoreHolding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreHolding.شروعColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property پایان() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreHolding.پایانColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'پایان' in table 'Pm_Edu_DoreHolding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreHolding.پایانColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property مدت() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreHolding.مدتColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'مدت' in table 'Pm_Edu_DoreHolding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreHolding.مدتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property مدرس() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreHolding.مدرسColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'مدرس' in table 'Pm_Edu_DoreHolding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreHolding.مدرسColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property محل() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreHolding.محلColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'محل' in table 'Pm_Edu_DoreHolding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreHolding.محلColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property برگزارکننده() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreHolding.برگزارکنندهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'برگزارکننده' in table 'Pm_Edu_DoreHolding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreHolding.برگزارکنندهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property هزینه_آموزشی() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreHolding.هزینه_آموزشیColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'هزینه آموزشی' in table 'Pm_Edu_DoreHolding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreHolding.هزینه_آموزشیColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property هزینه_رفاهی() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreHolding.هزینه_رفاهیColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'هزینه رفاهی' in table 'Pm_Edu_DoreHolding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreHolding.هزینه_رفاهیColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property هزینه_متفرقه() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreHolding.هزینه_متفرقهColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'هزینه متفرقه' in table 'Pm_Edu_DoreHolding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreHolding.هزینه_متفرقهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property هزینه_کل() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreHolding.هزینه_کلColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'هزینه کل' in table 'Pm_Edu_DoreHolding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreHolding.هزینه_کلColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property مکان() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreHolding.مکانColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'مکان' in table 'Pm_Edu_DoreHolding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreHolding.مکانColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property جلسات() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreHolding.جلساتColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'جلسات' in table 'Pm_Edu_DoreHolding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreHolding.جلساتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsعنوانNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreHolding.عنوانColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetعنوانNull()
            Me(Me.tablePm_Edu_DoreHolding.عنوانColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsشروعNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreHolding.شروعColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetشروعNull()
            Me(Me.tablePm_Edu_DoreHolding.شروعColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsپایانNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreHolding.پایانColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetپایانNull()
            Me(Me.tablePm_Edu_DoreHolding.پایانColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsمدتNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreHolding.مدتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetمدتNull()
            Me(Me.tablePm_Edu_DoreHolding.مدتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsمدرسNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreHolding.مدرسColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetمدرسNull()
            Me(Me.tablePm_Edu_DoreHolding.مدرسColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsمحلNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreHolding.محلColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetمحلNull()
            Me(Me.tablePm_Edu_DoreHolding.محلColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsبرگزارکنندهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreHolding.برگزارکنندهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetبرگزارکنندهNull()
            Me(Me.tablePm_Edu_DoreHolding.برگزارکنندهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isهزینه_آموزشیNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreHolding.هزینه_آموزشیColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setهزینه_آموزشیNull()
            Me(Me.tablePm_Edu_DoreHolding.هزینه_آموزشیColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isهزینه_رفاهیNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreHolding.هزینه_رفاهیColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setهزینه_رفاهیNull()
            Me(Me.tablePm_Edu_DoreHolding.هزینه_رفاهیColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isهزینه_متفرقهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreHolding.هزینه_متفرقهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setهزینه_متفرقهNull()
            Me(Me.tablePm_Edu_DoreHolding.هزینه_متفرقهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isهزینه_کلNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreHolding.هزینه_کلColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setهزینه_کلNull()
            Me(Me.tablePm_Edu_DoreHolding.هزینه_کلColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsمکانNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreHolding.مکانColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetمکانNull()
            Me(Me.tablePm_Edu_DoreHolding.مکانColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsجلساتNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreHolding.جلساتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetجلساتNull()
            Me(Me.tablePm_Edu_DoreHolding.جلساتColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Edu_DoreParticipationRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Edu_DoreParticipation As Pm_Edu_DoreParticipationDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Edu_DoreParticipation = CType(Me.Table,Pm_Edu_DoreParticipationDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شماره() As Integer
            Get
                Return CType(Me(Me.tablePm_Edu_DoreParticipation.شمارهColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Edu_DoreParticipation.شمارهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام_و_نام_خانوادگی() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreParticipation.نام_و_نام_خانوادگیColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام و نام خانوادگی' in table 'Pm_Edu_DoreParticipation' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreParticipation.نام_و_نام_خانوادگیColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property مدت_شرکت() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreParticipation.مدت_شرکتColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'مدت شرکت' in table 'Pm_Edu_DoreParticipation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreParticipation.مدت_شرکتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نمره() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreParticipation.نمرهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نمره' in table 'Pm_Edu_DoreParticipation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreParticipation.نمرهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property مدرک() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreParticipation.مدرکColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'مدرک' in table 'Pm_Edu_DoreParticipation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreParticipation.مدرکColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property اموزش() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreParticipation.اموزشColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'اموزش' in table 'Pm_Edu_DoreParticipation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreParticipation.اموزشColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شرکت() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreParticipation.شرکتColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شرکت' in table 'Pm_Edu_DoreParticipation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreParticipation.شرکتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاریخ_صورت_() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreParticipation.تاریخ_صورت_Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تاریخ صورت ' in table 'Pm_Edu_DoreParticipation' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreParticipation.تاریخ_صورت_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl_ashkhas() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreParticipation.srl_ashkhasColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'srl_ashkhas' in table 'Pm_Edu_DoreParticipation' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreParticipation.srl_ashkhasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EvaluationForm() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Edu_DoreParticipation.EvaluationFormColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EvaluationForm' in table 'Pm_Edu_DoreParticipation' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Edu_DoreParticipation.EvaluationFormColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Edu_DoreParticipation.srlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Edu_DoreParticipation.srlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنام_و_نام_خانوادگیNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreParticipation.نام_و_نام_خانوادگیColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنام_و_نام_خانوادگیNull()
            Me(Me.tablePm_Edu_DoreParticipation.نام_و_نام_خانوادگیColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isمدت_شرکتNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreParticipation.مدت_شرکتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setمدت_شرکتNull()
            Me(Me.tablePm_Edu_DoreParticipation.مدت_شرکتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsنمرهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreParticipation.نمرهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetنمرهNull()
            Me(Me.tablePm_Edu_DoreParticipation.نمرهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsمدرکNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreParticipation.مدرکColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetمدرکNull()
            Me(Me.tablePm_Edu_DoreParticipation.مدرکColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsاموزشNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreParticipation.اموزشColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetاموزشNull()
            Me(Me.tablePm_Edu_DoreParticipation.اموزشColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsشرکتNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreParticipation.شرکتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetشرکتNull()
            Me(Me.tablePm_Edu_DoreParticipation.شرکتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isتاریخ_صورت_Null() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreParticipation.تاریخ_صورت_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setتاریخ_صورت_Null()
            Me(Me.tablePm_Edu_DoreParticipation.تاریخ_صورت_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issrl_ashkhasNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreParticipation.srl_ashkhasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsrl_ashkhasNull()
            Me(Me.tablePm_Edu_DoreParticipation.srl_ashkhasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEvaluationFormNull() As Boolean
            Return Me.IsNull(Me.tablePm_Edu_DoreParticipation.EvaluationFormColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEvaluationFormNull()
            Me(Me.tablePm_Edu_DoreParticipation.EvaluationFormColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Edu_JobTitleRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Edu_JobTitleRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Edu_JobTitleRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Edu_JobTitleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Edu_DoreTypeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Edu_DoreTypeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Edu_DoreTypeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Edu_DoreTypeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Edu_DoreRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Edu_DoreRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Edu_DoreRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Edu_DoreRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Edu_DoreJobRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Edu_DoreJobRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Edu_DoreJobRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Edu_DoreJobRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Edu_DorePlaceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Edu_DorePlaceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Edu_DorePlaceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Edu_DorePlaceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Edu_DorePresenterRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Edu_DorePresenterRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Edu_DorePresenterRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Edu_DorePresenterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Edu_TeacherRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Edu_TeacherRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Edu_TeacherRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Edu_TeacherRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Edu_EvaluationItemRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Edu_EvaluationItemRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Edu_EvaluationItemRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Edu_EvaluationItemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Edu_EvaluationRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Edu_EvaluationRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Edu_EvaluationRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Edu_EvaluationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Edu_JobDoreRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Edu_JobDoreRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Edu_JobDoreRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Edu_JobDoreRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Edu_ِDoreReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Edu_ِDoreReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Edu_ِDoreReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Edu_ِDoreReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Rp_DoreEvaluationRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Rp_DoreEvaluationRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Rp_DoreEvaluationRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Rp_DoreEvaluationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Edu_DoreParticipatePresentRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Edu_DoreParticipatePresentRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Edu_DoreParticipatePresentRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Edu_DoreParticipatePresentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Edu_DoreHoldingtitleRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Edu_DoreHoldingtitleRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Edu_DoreHoldingtitleRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Edu_DoreHoldingtitleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Edu_PresenterReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Edu_PresenterReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Edu_PresenterReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Edu_PresenterReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Edu_DoreHoldingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Edu_DoreHoldingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Edu_DoreHoldingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Edu_DoreHoldingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Edu_DoreParticipationRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Edu_DoreParticipationRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Edu_DoreParticipationRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Edu_DoreParticipationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace Ds_EduTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Edu_JobTitleTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Edu_JobTitle"
            tableMapping.ColumnMappings.Add("srl", "srl")
            tableMapping.ColumnMappings.Add("عنوان", "عنوان")
            tableMapping.ColumnMappings.Add("کد", "کد")
            tableMapping.ColumnMappings.Add("عضو توانیر", "عضو توانیر")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [pm_edu_jobtitle] WHERE (([srl] = @Original_srl) AND ((@IsNull_عنوان "& _ 
                "= 1 AND [Name] IS NULL) OR ([Name] = @Original_عنوان)) AND ((@IsNull_کد = 1 AND "& _ 
                "[code] IS NULL) OR ([code] = @Original_کد)) AND ((@IsNull_عضو_توانیر = 1 AND [Is"& _ 
                "_Tavanir] IS NULL) OR ([Is_Tavanir] = @Original_عضو_توانیر)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "srl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_عنوان", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عنوان", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_عنوان", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عنوان", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_کد", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "کد", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_کد", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "کد", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_عضو_توانیر", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عضو توانیر", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_عضو_توانیر", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عضو توانیر", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [pm_edu_jobtitle] ([Name], [code], [Is_Tavanir]) VALUES (@عنوان, @کد,"& _ 
                " @عضو_توانیر);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Srl, Name AS عنوان, code AS کد, Is_Tavanir AS [عضو توانیر"& _ 
                "] FROM Pm_Edu_JobTitle WHERE (Srl = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@عنوان", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عنوان", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@کد", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "کد", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@عضو_توانیر", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عضو توانیر", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [pm_edu_jobtitle] SET [Name] = @عنوان, [code] = @کد, [Is_Tavanir] = @عضو_ت"& _ 
                "وانیر WHERE (([srl] = @Original_srl) AND ((@IsNull_عنوان = 1 AND [Name] IS NULL)"& _ 
                " OR ([Name] = @Original_عنوان)) AND ((@IsNull_کد = 1 AND [code] IS NULL) OR ([co"& _ 
                "de] = @Original_کد)) AND ((@IsNull_عضو_توانیر = 1 AND [Is_Tavanir] IS NULL) OR ("& _ 
                "[Is_Tavanir] = @Original_عضو_توانیر)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Srl, Name AS عنوان, code AS کد, "& _ 
                "Is_Tavanir AS [عضو توانیر] FROM Pm_Edu_JobTitle WHERE (Srl = @Srl)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@عنوان", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عنوان", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@کد", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "کد", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@عضو_توانیر", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عضو توانیر", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "srl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_عنوان", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عنوان", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_عنوان", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عنوان", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_کد", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "کد", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_کد", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "کد", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_عضو_توانیر", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عضو توانیر", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_عضو_توانیر", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عضو توانیر", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "Select srl , Name as عنوان, code as کد, is_tavanir as [عضو توانیر] from pm_edu_jo"& _ 
                "btitle"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Edu.Pm_Edu_JobTitleDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Edu.Pm_Edu_JobTitleDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Edu.Pm_Edu_JobTitleDataTable = New Ds_Edu.Pm_Edu_JobTitleDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds_Edu.Pm_Edu_JobTitleDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds_Edu) As Integer
            Return Me.Adapter.Update(dataSet, "Pm_Edu_JobTitle")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_srl As Integer, ByVal Original_عنوان As String, ByVal Original_کد As String, ByVal Original_عضو_توانیر As Boolean) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_srl,Integer)
            If (Original_عنوان Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_عنوان")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_عنوان,String)
            End If
            If (Original_کد Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_کد")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_کد,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_عضو_توانیر,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal عنوان As String, ByVal کد As String, ByVal عضو_توانیر As Boolean) As Integer
            If (عنوان Is Nothing) Then
                Throw New Global.System.ArgumentNullException("عنوان")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(عنوان,String)
            End If
            If (کد Is Nothing) Then
                Throw New Global.System.ArgumentNullException("کد")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(کد,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(عضو_توانیر,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal عنوان As String, ByVal کد As String, ByVal عضو_توانیر As Boolean, ByVal Original_srl As Integer, ByVal Original_عنوان As String, ByVal Original_کد As String, ByVal Original_عضو_توانیر As Boolean, ByVal Srl As Integer) As Integer
            If (عنوان Is Nothing) Then
                Throw New Global.System.ArgumentNullException("عنوان")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(عنوان,String)
            End If
            If (کد Is Nothing) Then
                Throw New Global.System.ArgumentNullException("کد")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(کد,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(عضو_توانیر,Boolean)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_srl,Integer)
            If (Original_عنوان Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_عنوان")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_عنوان,String)
            End If
            If (Original_کد Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_کد")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_کد,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_عضو_توانیر,Boolean)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Srl,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Edu_DoreTypeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Edu_DoreType"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("عنوان", "عنوان")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [pm_edu_doretype] WHERE (([Srl] = @Original_Srl) AND ((@IsNull_عنوان "& _ 
                "= 1 AND [Name] IS NULL) OR ([Name] = @Original_عنوان)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_عنوان", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عنوان", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_عنوان", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عنوان", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [pm_edu_doretype] ([Name]) VALUES (@عنوان);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Srl, Name AS عنوا"& _ 
                "ن FROM Pm_Edu_DoreType WHERE (Srl = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@عنوان", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عنوان", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [pm_edu_doretype] SET [Name] = @عنوان WHERE (([Srl] = @Original_Srl) AND ("& _ 
                "(@IsNull_عنوان = 1 AND [Name] IS NULL) OR ([Name] = @Original_عنوان)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT "& _ 
                "Srl, Name AS عنوان FROM Pm_Edu_DoreType WHERE (Srl = @Srl)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@عنوان", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عنوان", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_عنوان", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عنوان", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_عنوان", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عنوان", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select Srl , name as عنوان from pm_edu_doretype"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Edu.Pm_Edu_DoreTypeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Edu.Pm_Edu_DoreTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Edu.Pm_Edu_DoreTypeDataTable = New Ds_Edu.Pm_Edu_DoreTypeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds_Edu.Pm_Edu_DoreTypeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds_Edu) As Integer
            Return Me.Adapter.Update(dataSet, "Pm_Edu_DoreType")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Edu_DoreTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Edu_Dore"
            tableMapping.ColumnMappings.Add("srl", "srl")
            tableMapping.ColumnMappings.Add("کد", "کد")
            tableMapping.ColumnMappings.Add("عنوان", "عنوان")
            tableMapping.ColumnMappings.Add("نوع دوره", "نوع دوره")
            tableMapping.ColumnMappings.Add("طول دوره", "طول دوره")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select pm_edu_dore .srl , code as کد, pm_edu_dore .name as عنوان , [Length] as [ط"& _ 
                "ول دوره],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" pm_edu_doretype .name as [نوع دوره]  from"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"pm_edu_dore join pm_edu_d"& _ 
                "oretype on Srl_DoreType = pm_edu_doretype.srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"order by pm_edu_dore .name"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Edu.Pm_Edu_DoreDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Edu.Pm_Edu_DoreDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Edu.Pm_Edu_DoreDataTable = New Ds_Edu.Pm_Edu_DoreDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Edu_DoreJobTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Edu_DoreJob"
            tableMapping.ColumnMappings.Add("srl", "srl")
            tableMapping.ColumnMappings.Add("عنوان", "عنوان")
            tableMapping.ColumnMappings.Add("srl_job", "srl_job")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "Select pm_edu_DoreJob.srl,pm_edu_jobTitle.name  as عنوان , srl_job"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from pm_edu_D"& _ 
                "oreJob join pm_edu_jobTitle on srl_job =pm_edu_jobtitle.srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where srl_dore = "& _ 
                "@Srl_dore"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_dore", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Dore", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Edu.Pm_Edu_DoreJobDataTable, ByVal Srl_dore As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_dore.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_dore.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Srl_dore As Global.System.Nullable(Of Integer)) As Ds_Edu.Pm_Edu_DoreJobDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_dore.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_dore.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Ds_Edu.Pm_Edu_DoreJobDataTable = New Ds_Edu.Pm_Edu_DoreJobDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Edu_DorePlaceTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Edu_DorePlace"
            tableMapping.ColumnMappings.Add("srl", "srl")
            tableMapping.ColumnMappings.Add("نام", "نام")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [pm_edu_dorePlace] WHERE (([srl] = @Original_srl) AND ((@IsNull_نام ="& _ 
                " 1 AND [Name] IS NULL) OR ([Name] = @Original_نام)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "srl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_نام", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "نام", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_نام", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "نام", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [pm_edu_dorePlace] ([Name]) VALUES (@نام);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Srl, Name AS نام F"& _ 
                "ROM Pm_Edu_DorePlace WHERE (Srl = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@نام", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "نام", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [pm_edu_dorePlace] SET [Name] = @نام WHERE (([srl] = @Original_srl) AND (("& _ 
                "@IsNull_نام = 1 AND [Name] IS NULL) OR ([Name] = @Original_نام)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Srl, "& _ 
                "Name AS نام FROM Pm_Edu_DorePlace WHERE (Srl = @Srl)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@نام", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "نام", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "srl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_نام", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "نام", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_نام", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "نام", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select srl , name as نام from pm_edu_dorePlace"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Edu.Pm_Edu_DorePlaceDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Edu.Pm_Edu_DorePlaceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Edu.Pm_Edu_DorePlaceDataTable = New Ds_Edu.Pm_Edu_DorePlaceDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds_Edu.Pm_Edu_DorePlaceDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds_Edu) As Integer
            Return Me.Adapter.Update(dataSet, "Pm_Edu_DorePlace")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_srl As Integer, ByVal Original_نام As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_srl,Integer)
            If (Original_نام Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_نام")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_نام,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal نام As String) As Integer
            If (نام Is Nothing) Then
                Throw New Global.System.ArgumentNullException("نام")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(نام,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal نام As String, ByVal Original_srl As Integer, ByVal Original_نام As String, ByVal Srl As Integer) As Integer
            If (نام Is Nothing) Then
                Throw New Global.System.ArgumentNullException("نام")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(نام,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_srl,Integer)
            If (Original_نام Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_نام")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_نام,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Srl,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Edu_DorePresenterTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Edu_DorePresenter"
            tableMapping.ColumnMappings.Add("srl", "srl")
            tableMapping.ColumnMappings.Add("نام", "نام")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Pm_Edu_dorePresenter] WHERE (([srl] = @Original_srl) AND ((@IsNull_ن"& _ 
                "ام = 1 AND [Name] IS NULL) OR ([Name] = @Original_نام)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "srl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_نام", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "نام", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_نام", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "نام", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Pm_Edu_dorePresenter] ([Name]) VALUES (@نام);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Srl, Name AS ن"& _ 
                "ام FROM Pm_Edu_DorePresenter WHERE (Srl = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@نام", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "نام", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Pm_Edu_dorePresenter] SET [Name] = @نام WHERE (([srl] = @Original_srl) AN"& _ 
                "D ((@IsNull_نام = 1 AND [Name] IS NULL) OR ([Name] = @Original_نام)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT S"& _ 
                "rl, Name AS نام FROM Pm_Edu_DorePresenter WHERE (Srl = @Srl)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@نام", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "نام", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "srl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_نام", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "نام", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_نام", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "نام", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select srl , name as نام from Pm_Edu_dorePresenter"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Edu.Pm_Edu_DorePresenterDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Edu.Pm_Edu_DorePresenterDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Edu.Pm_Edu_DorePresenterDataTable = New Ds_Edu.Pm_Edu_DorePresenterDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds_Edu.Pm_Edu_DorePresenterDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds_Edu) As Integer
            Return Me.Adapter.Update(dataSet, "Pm_Edu_DorePresenter")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_srl As Integer, ByVal Original_نام As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_srl,Integer)
            If (Original_نام Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_نام")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_نام,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal نام As String) As Integer
            If (نام Is Nothing) Then
                Throw New Global.System.ArgumentNullException("نام")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(نام,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal نام As String, ByVal Original_srl As Integer, ByVal Original_نام As String, ByVal Srl As Integer) As Integer
            If (نام Is Nothing) Then
                Throw New Global.System.ArgumentNullException("نام")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(نام,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_srl,Integer)
            If (Original_نام Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_نام")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_نام,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Srl,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Edu_TeacherTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Edu_Teacher"
            tableMapping.ColumnMappings.Add("srl", "srl")
            tableMapping.ColumnMappings.Add("نا م و نام خانوادگی", "نا م و نام خانوادگی")
            tableMapping.ColumnMappings.Add("همراه", "همراه")
            tableMapping.ColumnMappings.Add("شماره ثابت", "شماره ثابت")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [pm_edu_teacher] WHERE (([srl] = @Original_srl) AND ((@IsNull_همراه ="& _ 
                " 1 AND [Mobile] IS NULL) OR ([Mobile] = @Original_همراه)) AND ((@IsNull_شماره_ثا"& _ 
                "بت = 1 AND [Tell] IS NULL) OR ([Tell] = @Original_شماره_ثابت)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "srl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_همراه", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "همراه", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_همراه", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "همراه", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_شماره_ثابت", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "شماره ثابت", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_شماره_ثابت", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "شماره ثابت", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [pm_edu_teacher] ([Mobile], [Tell]) VALUES (@همراه, @شماره_ثابت);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT Srl, Name + ' ' + Family AS [نا م و نام خانوادگی], Mobile AS همراه, Tell AS"& _ 
                " [شماره ثابت] FROM Pm_Edu_Teacher WHERE (Srl = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@همراه", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "همراه", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@شماره_ثابت", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "شماره ثابت", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [pm_edu_teacher] SET [Mobile] = @همراه, [Tell] = @شماره_ثابت WHERE (([srl]"& _ 
                " = @Original_srl) AND ((@IsNull_همراه = 1 AND [Mobile] IS NULL) OR ([Mobile] = @"& _ 
                "Original_همراه)) AND ((@IsNull_شماره_ثابت = 1 AND [Tell] IS NULL) OR ([Tell] = @"& _ 
                "Original_شماره_ثابت)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Srl, Name + ' ' + Family AS [نا م و نام خانوادگی"& _ 
                "], Mobile AS همراه, Tell AS [شماره ثابت] FROM Pm_Edu_Teacher WHERE (Srl = @Srl)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@همراه", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "همراه", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@شماره_ثابت", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "شماره ثابت", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "srl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_همراه", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "همراه", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_همراه", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "همراه", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_شماره_ثابت", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "شماره ثابت", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_شماره_ثابت", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "شماره ثابت", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "Select srl , name +' ' + family as [نا م و نام خانوادگی] , mobile as همراه, [tell"& _ 
                "] as [شماره ثابت]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from pm_edu_teacher"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Edu.Pm_Edu_TeacherDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Edu.Pm_Edu_TeacherDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Edu.Pm_Edu_TeacherDataTable = New Ds_Edu.Pm_Edu_TeacherDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds_Edu.Pm_Edu_TeacherDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds_Edu) As Integer
            Return Me.Adapter.Update(dataSet, "Pm_Edu_Teacher")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Edu_EvaluationItemTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Edu_EvaluationItem"
            tableMapping.ColumnMappings.Add("srl", "srl")
            tableMapping.ColumnMappings.Add("عنوان", "عنوان")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [pm_edu_Evaluationitem] WHERE (([srl] = @Original_srl) AND ((@IsNull_"& _ 
                "عنوان = 1 AND [Title] IS NULL) OR ([Title] = @Original_عنوان)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "srl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_عنوان", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عنوان", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_عنوان", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عنوان", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [pm_edu_Evaluationitem] ([Title]) VALUES (@عنوان);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Srl, Title"& _ 
                " AS عنوان FROM Pm_Edu_EvaluationItem WHERE (Srl = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@عنوان", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عنوان", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [pm_edu_Evaluationitem] SET [Title] = @عنوان WHERE (([srl] = @Original_srl"& _ 
                ") AND ((@IsNull_عنوان = 1 AND [Title] IS NULL) OR ([Title] = @Original_عنوان)));"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Srl, Title AS عنوان FROM Pm_Edu_EvaluationItem WHERE (Srl = @Srl)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@عنوان", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عنوان", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "srl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_عنوان", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عنوان", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_عنوان", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "عنوان", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "Select srl, title as عنوان from pm_edu_Evaluationitem"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Edu.Pm_Edu_EvaluationItemDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Edu.Pm_Edu_EvaluationItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Edu.Pm_Edu_EvaluationItemDataTable = New Ds_Edu.Pm_Edu_EvaluationItemDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds_Edu.Pm_Edu_EvaluationItemDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds_Edu) As Integer
            Return Me.Adapter.Update(dataSet, "Pm_Edu_EvaluationItem")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_srl As Integer, ByVal Original_عنوان As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_srl,Integer)
            If (Original_عنوان Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_عنوان")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_عنوان,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal عنوان As String) As Integer
            If (عنوان Is Nothing) Then
                Throw New Global.System.ArgumentNullException("عنوان")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(عنوان,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal عنوان As String, ByVal Original_srl As Integer, ByVal Original_عنوان As String, ByVal Srl As Integer) As Integer
            If (عنوان Is Nothing) Then
                Throw New Global.System.ArgumentNullException("عنوان")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(عنوان,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_srl,Integer)
            If (Original_عنوان Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_عنوان")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_عنوان,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Srl,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Edu_EvaluationTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Edu_Evaluation"
            tableMapping.ColumnMappings.Add("Title", "Title")
            tableMapping.ColumnMappings.Add("بد(25)", "بد(25)")
            tableMapping.ColumnMappings.Add("متوسط(50)", "متوسط(50)")
            tableMapping.ColumnMappings.Add("خوب(75)", "خوب(75)")
            tableMapping.ColumnMappings.Add("عالی(100)", "عالی(100)")
            tableMapping.ColumnMappings.Add("srl", "srl")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select Pm_Edu_Evaluation.srl,Pm_Edu_EvaluationItem.Title,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"case when Answer =1 th"& _ 
                "en "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"1 else 0 end as [بد(25)],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"case when Answer =2 then "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"1 else 0 end as [متوس"& _ 
                "ط(50)],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"case when Answer =3 then "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"1 else 0 end as [خوب(75)],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"case when Answer"& _ 
                " =4 then "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"1 else 0 end as [عالی(100)]   from Pm_Edu_Evaluation "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"join Pm_Edu_Ev"& _ 
                "aluationItem on Srl_EvaluationItem  = "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Pm_Edu_EvaluationItem .Srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where Srl_Do"& _ 
                "reParticipate = @Srl_Participate"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Participate", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_DoreParticipate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Edu.Pm_Edu_EvaluationDataTable, ByVal Srl_Participate As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_Participate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_Participate.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Srl_Participate As Global.System.Nullable(Of Integer)) As Ds_Edu.Pm_Edu_EvaluationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_Participate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_Participate.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Ds_Edu.Pm_Edu_EvaluationDataTable = New Ds_Edu.Pm_Edu_EvaluationDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Edu_JobDoreTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Edu_JobDore"
            tableMapping.ColumnMappings.Add("srl", "srl")
            tableMapping.ColumnMappings.Add("کد", "کد")
            tableMapping.ColumnMappings.Add("عنوان", "عنوان")
            tableMapping.ColumnMappings.Add("طول دوره", "طول دوره")
            tableMapping.ColumnMappings.Add("نوع دوره", "نوع دوره")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select Pm_Edu_DoreJob .srl , code as کد, pm_edu_dore .name as عنوان , [Length] as"& _ 
                " [طول دوره],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" pm_edu_doretype .name as [نوع دوره]  from"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"pm_edu_dore join pm_ed"& _ 
                "u_doretype on Srl_DoreType = pm_edu_doretype.srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"join Pm_Edu_DoreJob  on  Srl_D"& _ 
                "ore  = Pm_Edu_Dore .Srl "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where Srl_Job = @Srl_Job"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Job", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Job", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Edu.Pm_Edu_JobDoreDataTable, ByVal Srl_Job As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_Job.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_Job.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Srl_Job As Global.System.Nullable(Of Integer)) As Ds_Edu.Pm_Edu_JobDoreDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_Job.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_Job.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Ds_Edu.Pm_Edu_JobDoreDataTable = New Ds_Edu.Pm_Edu_JobDoreDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Edu_ِDoreReportTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Edu_ِDoreReport"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("شروع", "شروع")
            tableMapping.ColumnMappings.Add("پایان", "پایان")
            tableMapping.ColumnMappings.Add("طول", "طول")
            tableMapping.ColumnMappings.Add("مدرس", "مدرس")
            tableMapping.ColumnMappings.Add("ارائه کننده", "ارائه کننده")
            tableMapping.ColumnMappings.Add("محل", "محل")
            tableMapping.ColumnMappings.Add("هزینه", "هزینه")
            tableMapping.ColumnMappings.Add("موقعیت", "موقعیت")
            tableMapping.ColumnMappings.Add("دوره", "دوره")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select distinct Pm_Edu_DoreHolding.Srl,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"StartDate as شروع , EndDate as پایان,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&"Pm_Edu_DoreHolding.[Length] as طول, Pm_Edu_Teacher .Name+' '+Pm_Edu_Teacher.Fam"& _ 
                "ily  مدرس,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"Pm_Edu_DorePresenter.Name as [ارائه کننده],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"Pm_Edu_DorePlace .Nam"& _ 
                "e as محل,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"Edu_Price+Refahi_Price+Other_Price as هزینه,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"case when Place=1 the"& _ 
                "n 'داخل استان'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"when Place=2 then 'خارج استان'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"when Place=3 then 'خارج کشور"& _ 
                "'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"End as موقعیت "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                ,pm_edu_dore.name as دوره"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from Pm_Edu_Dore"& _ 
                "Holding join Pm_Edu_Dore "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"on Srl_Dore = Pm_Edu_Dore.Srl join Pm_Edu_DorePlace "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"on Srl_Place  = Pm_Edu_DorePlace.Srl join Pm_Edu_DorePresenter "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"on Srl_Present"& _ 
                "er  = Pm_Edu_DorePresenter.Srl   join Pm_Edu_Teacher "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"on Srl_Teacher = Pm_Edu_T"& _ 
                "eacher.Srl left join Pm_Edu_DoreParticipation "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"on Pm_Edu_DoreParticipation.Srl_"& _ 
                "DoreHolding = Pm_Edu_DoreHolding.Srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where (StartDate >= @StartDate or @StartDa"& _ 
                "te='-1')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and"&Global.Microsoft.VisualBasic.ChrW(9)&"  (StartDate <=@EndDate or @EndDate ='-1')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and   (Srl_Place = @Sr"& _ 
                "l_Place or @Srl_Place=-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and   (Srl_Presenter = @Srl_Presenter or @Srl_Present"& _ 
                "er=-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and"&Global.Microsoft.VisualBasic.ChrW(9)&"  (Srl_Teacher = @Srl_Teacher or @Srl_Teacher=-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and   (Place = @P"& _ 
                "lace or @Place=-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and"&Global.Microsoft.VisualBasic.ChrW(9)&"   (Srl_Ashkhas = @Srl_ashkhas or @Srl_ashkhas=-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and"&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                "  ( Srl_Dore = @Srl_Dore or @Srl_Dore =-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and"&Global.Microsoft.VisualBasic.ChrW(9)&"   (Pm_Edu_Dore .Srl_DoreType = "& _ 
                "@Srl_type or @Srl_type =-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "شروع", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EndDate", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "شروع", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Place", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Place", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Presenter", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Presenter", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Teacher", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Teacher", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Place", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Place", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_ashkhas", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Ashkhas", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Dore", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Dore", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_type", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_DoreType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Edu.Pm_Edu_ِDoreReportDataTable, ByVal StartDate As String, ByVal EndDate As String, ByVal Srl_Place As Global.System.Nullable(Of Integer), ByVal Srl_Presenter As Global.System.Nullable(Of Integer), ByVal Srl_Teacher As Global.System.Nullable(Of Integer), ByVal Place As Global.System.Nullable(Of Integer), ByVal Srl_ashkhas As Global.System.Nullable(Of Integer), ByVal Srl_Dore As Global.System.Nullable(Of Integer), ByVal Srl_type As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (StartDate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(StartDate,String)
            End If
            If (EndDate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(EndDate,String)
            End If
            If (Srl_Place.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Srl_Place.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Srl_Presenter.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Srl_Presenter.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Srl_Teacher.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Srl_Teacher.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Place.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(Place.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Srl_ashkhas.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(Srl_ashkhas.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Srl_Dore.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(Srl_Dore.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(8).Value = CType(Srl_type,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal StartDate As String, ByVal EndDate As String, ByVal Srl_Place As Global.System.Nullable(Of Integer), ByVal Srl_Presenter As Global.System.Nullable(Of Integer), ByVal Srl_Teacher As Global.System.Nullable(Of Integer), ByVal Place As Global.System.Nullable(Of Integer), ByVal Srl_ashkhas As Global.System.Nullable(Of Integer), ByVal Srl_Dore As Global.System.Nullable(Of Integer), ByVal Srl_type As Integer) As Ds_Edu.Pm_Edu_ِDoreReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (StartDate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(StartDate,String)
            End If
            If (EndDate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(EndDate,String)
            End If
            If (Srl_Place.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Srl_Place.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Srl_Presenter.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Srl_Presenter.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Srl_Teacher.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Srl_Teacher.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Place.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(Place.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Srl_ashkhas.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(Srl_ashkhas.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Srl_Dore.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(Srl_Dore.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(8).Value = CType(Srl_type,Integer)
            Dim dataTable As Ds_Edu.Pm_Edu_ِDoreReportDataTable = New Ds_Edu.Pm_Edu_ِDoreReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Rp_DoreEvaluationTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.Rp_DoreEvaluation"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@type", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FromDate", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ToDate", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Place", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Presenter", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Teacher", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Place", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Edu.Rp_DoreEvaluationDataTable, ByVal type As Global.System.Nullable(Of Integer), ByVal FromDate As String, ByVal ToDate As String, ByVal Srl_Place As Global.System.Nullable(Of Integer), ByVal Srl_Presenter As Global.System.Nullable(Of Integer), ByVal Srl_Teacher As Global.System.Nullable(Of Integer), ByVal Place As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (type.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(type.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (FromDate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FromDate,String)
            End If
            If (ToDate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ToDate,String)
            End If
            If (Srl_Place.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Srl_Place.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Srl_Presenter.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(Srl_Presenter.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Srl_Teacher.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(Srl_Teacher.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Place.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(Place.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal type As Global.System.Nullable(Of Integer), ByVal FromDate As String, ByVal ToDate As String, ByVal Srl_Place As Global.System.Nullable(Of Integer), ByVal Srl_Presenter As Global.System.Nullable(Of Integer), ByVal Srl_Teacher As Global.System.Nullable(Of Integer), ByVal Place As Global.System.Nullable(Of Integer)) As Ds_Edu.Rp_DoreEvaluationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (type.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(type.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (FromDate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FromDate,String)
            End If
            If (ToDate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ToDate,String)
            End If
            If (Srl_Place.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Srl_Place.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Srl_Presenter.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(Srl_Presenter.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Srl_Teacher.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(Srl_Teacher.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Place.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(Place.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Ds_Edu.Rp_DoreEvaluationDataTable = New Ds_Edu.Rp_DoreEvaluationDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Edu_DoreParticipatePresentTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Edu_DoreParticipatePresent"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("Srl_Dore_Participate", "Srl_Dore_Participate")
            tableMapping.ColumnMappings.Add("تاریخ", "تاریخ")
            tableMapping.ColumnMappings.Add("زمان", "زمان")
            tableMapping.ColumnMappings.Add("توضیحات", "توضیحات")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Nama_MIS].[dbo].[Pm_Edu_DoreParticipatePresent] WHERE (([Srl] = @Ori"& _ 
                "ginal_Srl) AND ((@IsNull_Srl_Dore_Participate = 1 AND [Srl_Dore_Participate] IS "& _ 
                "NULL) OR ([Srl_Dore_Participate] = @Original_Srl_Dore_Participate)) AND ((@IsNul"& _ 
                "l_تاریخ = 1 AND [Tarikh] IS NULL) OR ([Tarikh] = @Original_تاریخ)) AND ((@IsNull"& _ 
                "_زمان = 1 AND [PresentTime] IS NULL) OR ([PresentTime] = @Original_زمان)) AND (("& _ 
                "@IsNull_توضیحات = 1 AND [Description] IS NULL) OR ([Description] = @Original_توض"& _ 
                "یحات)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Srl_Dore_Participate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Dore_Participate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl_Dore_Participate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Dore_Participate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_تاریخ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "تاریخ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_تاریخ", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "تاریخ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_زمان", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "زمان", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_زمان", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "زمان", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_توضیحات", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "توضیحات", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_توضیحات", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "توضیحات", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Nama_MIS].[dbo].[Pm_Edu_DoreParticipatePresent] ([Srl_Dore_Participa"& _ 
                "te], [Tarikh], [PresentTime], [Description]) VALUES (@Srl_Dore_Participate, @تار"& _ 
                "یخ, @زمان, @توضیحات);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Srl, Srl_Dore_Participate, Tarikh AS تاریخ, Presen"& _ 
                "tTime AS زمان, Description AS توضیحات FROM Pm_Edu_DoreParticipatePresent WHERE ("& _ 
                "Srl = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Dore_Participate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Dore_Participate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@تاریخ", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "تاریخ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@زمان", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "زمان", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@توضیحات", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "توضیحات", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Nama_MIS].[dbo].[Pm_Edu_DoreParticipatePresent] SET [Srl_Dore_Participate"& _ 
                "] = @Srl_Dore_Participate, [Tarikh] = @تاریخ, [PresentTime] = @زمان, [Descriptio"& _ 
                "n] = @توضیحات WHERE (([Srl] = @Original_Srl) AND ((@IsNull_Srl_Dore_Participate "& _ 
                "= 1 AND [Srl_Dore_Participate] IS NULL) OR ([Srl_Dore_Participate] = @Original_S"& _ 
                "rl_Dore_Participate)) AND ((@IsNull_تاریخ = 1 AND [Tarikh] IS NULL) OR ([Tarikh]"& _ 
                " = @Original_تاریخ)) AND ((@IsNull_زمان = 1 AND [PresentTime] IS NULL) OR ([Pres"& _ 
                "entTime] = @Original_زمان)) AND ((@IsNull_توضیحات = 1 AND [Description] IS NULL)"& _ 
                " OR ([Description] = @Original_توضیحات)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Srl, Srl_Dore_Participate, Ta"& _ 
                "rikh AS تاریخ, PresentTime AS زمان, Description AS توضیحات FROM Pm_Edu_DoreParti"& _ 
                "cipatePresent WHERE (Srl = @Srl)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Dore_Participate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Dore_Participate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@تاریخ", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "تاریخ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@زمان", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "زمان", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@توضیحات", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "توضیحات", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Srl_Dore_Participate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Dore_Participate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl_Dore_Participate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Dore_Participate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_تاریخ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "تاریخ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_تاریخ", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "تاریخ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_زمان", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "زمان", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_زمان", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "زمان", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_توضیحات", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "توضیحات", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_توضیحات", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "توضیحات", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [Srl]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[Srl_Dore_Participate]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[Tarikh] تاریخ"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[Prese"& _ 
                "ntTime] زمان"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      ,[Description] توضیحات"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  FROM [Nama_MIS].[dbo].[Pm_Edu_"& _ 
                "DoreParticipatePresent]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where Srl_Dore_Participate =@Srl_Participate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Participate", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Dore_Participate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Edu.Pm_Edu_DoreParticipatePresentDataTable, ByVal Srl_Participate As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_Participate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_Participate.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Srl_Participate As Global.System.Nullable(Of Integer)) As Ds_Edu.Pm_Edu_DoreParticipatePresentDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_Participate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_Participate.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Ds_Edu.Pm_Edu_DoreParticipatePresentDataTable = New Ds_Edu.Pm_Edu_DoreParticipatePresentDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds_Edu.Pm_Edu_DoreParticipatePresentDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds_Edu) As Integer
            Return Me.Adapter.Update(dataSet, "Pm_Edu_DoreParticipatePresent")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Srl As Integer, ByVal Original_Srl_Dore_Participate As Global.System.Nullable(Of Integer), ByVal Original_تاریخ As String, ByVal Original_زمان As String, ByVal Original_توضیحات As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Srl,Integer)
            If (Original_Srl_Dore_Participate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Srl_Dore_Participate.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_تاریخ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_تاریخ")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_تاریخ,String)
            End If
            If (Original_زمان Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_زمان")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_زمان,String)
            End If
            If (Original_توضیحات Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_توضیحات")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_توضیحات,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Srl_Dore_Participate As Global.System.Nullable(Of Integer), ByVal تاریخ As String, ByVal زمان As String, ByVal توضیحات As String) As Integer
            If (Srl_Dore_Participate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Srl_Dore_Participate.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (تاریخ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("تاریخ")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(تاریخ,String)
            End If
            If (زمان Is Nothing) Then
                Throw New Global.System.ArgumentNullException("زمان")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(زمان,String)
            End If
            If (توضیحات Is Nothing) Then
                Throw New Global.System.ArgumentNullException("توضیحات")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(توضیحات,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Srl_Dore_Participate As Global.System.Nullable(Of Integer), ByVal تاریخ As String, ByVal زمان As String, ByVal توضیحات As String, ByVal Original_Srl As Integer, ByVal Original_Srl_Dore_Participate As Global.System.Nullable(Of Integer), ByVal Original_تاریخ As String, ByVal Original_زمان As String, ByVal Original_توضیحات As String, ByVal Srl As Integer) As Integer
            If (Srl_Dore_Participate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Srl_Dore_Participate.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (تاریخ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("تاریخ")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(تاریخ,String)
            End If
            If (زمان Is Nothing) Then
                Throw New Global.System.ArgumentNullException("زمان")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(زمان,String)
            End If
            If (توضیحات Is Nothing) Then
                Throw New Global.System.ArgumentNullException("توضیحات")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(توضیحات,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_Srl,Integer)
            If (Original_Srl_Dore_Participate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_Srl_Dore_Participate.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_تاریخ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_تاریخ")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_تاریخ,String)
            End If
            If (Original_زمان Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_زمان")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_زمان,String)
            End If
            If (Original_توضیحات Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_توضیحات")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_توضیحات,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Srl,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Srl_Dore_Participate As Global.System.Nullable(Of Integer), ByVal تاریخ As String, ByVal زمان As String, ByVal توضیحات As String, ByVal Original_Srl As Integer, ByVal Original_Srl_Dore_Participate As Global.System.Nullable(Of Integer), ByVal Original_تاریخ As String, ByVal Original_زمان As String, ByVal Original_توضیحات As String) As Integer
            Return Me.Update(Srl_Dore_Participate, تاریخ, زمان, توضیحات, Original_Srl, Original_Srl_Dore_Participate, Original_تاریخ, Original_زمان, Original_توضیحات, Original_Srl)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Edu_DoreHoldingtitleTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Edu_DoreHoldingtitle"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("Column1", "Column1")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select Pm_Edu_DoreHolding.Srl, Pm_Edu_Dore.Name+'('+Pm_Edu_Teacher.Name+' '+Pm_Ed"& _ 
                "u_Teacher .Family+')'+'_'+StartDate+'_'+EndDate+'_'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" from Pm_Edu_DoreHolding jo"& _ 
                "in pm_edu_dore on"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Srl_Dore = Pm_Edu_Dore .srl join Pm_Edu_Teacher on Srl_Teache"& _ 
                "r = Pm_Edu_Teacher .Srl "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"order by  Pm_Edu_Dore.Name"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Edu.Pm_Edu_DoreHoldingtitleDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Edu.Pm_Edu_DoreHoldingtitleDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Edu.Pm_Edu_DoreHoldingtitleDataTable = New Ds_Edu.Pm_Edu_DoreHoldingtitleDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Edu_PresenterReportTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Edu_PresenterReport"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("نام و نام خانوادگی", "نام و نام خانوادگی")
            tableMapping.ColumnMappings.Add("نوع دوره", "نوع دوره")
            tableMapping.ColumnMappings.Add("نام دوره", "نام دوره")
            tableMapping.ColumnMappings.Add("تاریخ", "تاریخ")
            tableMapping.ColumnMappings.Add("مدت", "مدت")
            tableMapping.ColumnMappings.Add("محل برگزارری", "محل برگزارری")
            tableMapping.ColumnMappings.Add("موسسه آموزشی", "موسسه آموزشی")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Pm_Edu_DoreParticipation.Srl, Pm_Ashkhas.Name + ' ' + Pm_Ashkhas.Fa"& _ 
                "mily AS [نام و نام خانوادگی], Pm_Edu_DoreType.Name AS [نوع دوره], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "             Pm_edu_Dore.Name AS [نام دوره], Pm_edu_DoreHolding.StartDate AS تار"& _ 
                "یخ, Pm_Edu_DoreHolding.[Length] AS مدت,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Edu_DorePla"& _ 
                "ce.Name AS [محل برگزارری], Pm_Edu_DorePresenter.Name AS [موسسه آموزشی]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM    "& _ 
                "        Pm_Edu_DoreParticipation  INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"Pm_Edu_DoreHolding on Pm_Edu"& _ 
                "_DoreHolding .Srl = Pm_Edu_DoreParticipation .Srl_DoreHolding join"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"Pm_Edu"& _ 
                "_Dore on Pm_Edu_Dore .Srl = Pm_Edu_DoreHolding .Srl_Dore join"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                "        Pm_Edu_DoreType ON Pm_Edu_Dore.Srl_DoreType  = Pm_Edu_DoreType.Srl INNER"& _ 
                " JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Edu_DorePlace  ON "& _ 
                "Pm_Edu_DoreHolding .Srl_Place = Pm_Edu_DorePlace.Srl INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "          Pm_Edu_DorePresenter  ON Pm_Edu_DoreHolding.Srl_Presenter = Pm_Edu_Dor"& _ 
                "ePresenter.Srl INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Ashkhas ON Pm_Edu_DorePar"& _ 
                "ticipation.Srl_Ashkhas = Pm_Ashkhas.Srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (Pm_Edu_DoreParticipation."& _ 
                "Srl_Ashkhas = @Srl_Pm_Ashkhas or @Srl_Pm_Ashkhas=-1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" AND (Pm_Edu_Dore .srl ="& _ 
                " @Srl_Dore or @Srl_Dore=-1) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (Pm_Edu_DoreHolding.Sr"& _ 
                "l_Presenter = @Srl_Presenter or @Srl_Presenter=-1) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ("& _ 
                "Pm_Edu_DoreHolding .Srl_Place = @Srl_Place or @Srl_Place=-1) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "         (Pm_Edu_DoreType.Srl = @Srl_DoreType or @Srl_DoreType=-1) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "               (Pm_edu_DoreHolding.StartDate = @Srl_Startdate or @Srl_Startdate="& _ 
                "-1) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      AND (Pm_Edu_DoreHolding.[Length] = @Modat or  @Modat"& _ 
                "=-1) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Pm_edu_DoreHolding.StartDate >= @BeginTarikh  or @BeginTarikh ='-1')"& _ 
                "  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND (Pm_edu_DoreHolding.EndDate  <= @EndTarikh or @EndTarikh='-1') "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Pm_Ashkhas", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Ashkhas", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Dore", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Presenter", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Presenter", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Place", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Place", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_DoreType", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Startdate", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "تاریخ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Modat", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "مدت", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BeginTarikh", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "تاریخ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EndTarikh", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "EndDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Edu.Pm_Edu_PresenterReportDataTable, ByVal Srl_Pm_Ashkhas As Global.System.Nullable(Of Integer), ByVal Srl_Dore As Integer, ByVal Srl_Presenter As Global.System.Nullable(Of Integer), ByVal Srl_Place As Global.System.Nullable(Of Integer), ByVal Srl_DoreType As Integer, ByVal Srl_Startdate As String, ByVal Modat As Global.System.Nullable(Of Integer), ByVal BeginTarikh As String, ByVal EndTarikh As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_Pm_Ashkhas.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_Pm_Ashkhas.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Srl_Dore,Integer)
            If (Srl_Presenter.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Srl_Presenter.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Srl_Place.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Srl_Place.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(4).Value = CType(Srl_DoreType,Integer)
            If (Srl_Startdate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(Srl_Startdate,String)
            End If
            If (Modat.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(Modat.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (BeginTarikh Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(BeginTarikh,String)
            End If
            If (EndTarikh Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(EndTarikh,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Srl_Pm_Ashkhas As Global.System.Nullable(Of Integer), ByVal Srl_Dore As Integer, ByVal Srl_Presenter As Global.System.Nullable(Of Integer), ByVal Srl_Place As Global.System.Nullable(Of Integer), ByVal Srl_DoreType As Integer, ByVal Srl_Startdate As String, ByVal Modat As Global.System.Nullable(Of Integer), ByVal BeginTarikh As String, ByVal EndTarikh As String) As Ds_Edu.Pm_Edu_PresenterReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_Pm_Ashkhas.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_Pm_Ashkhas.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Srl_Dore,Integer)
            If (Srl_Presenter.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Srl_Presenter.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Srl_Place.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Srl_Place.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(4).Value = CType(Srl_DoreType,Integer)
            If (Srl_Startdate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(Srl_Startdate,String)
            End If
            If (Modat.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(Modat.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (BeginTarikh Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(BeginTarikh,String)
            End If
            If (EndTarikh Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(EndTarikh,String)
            End If
            Dim dataTable As Ds_Edu.Pm_Edu_PresenterReportDataTable = New Ds_Edu.Pm_Edu_PresenterReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Edu_DoreHoldingTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Edu_DoreHolding"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("عنوان", "عنوان")
            tableMapping.ColumnMappings.Add("شروع", "شروع")
            tableMapping.ColumnMappings.Add("پایان", "پایان")
            tableMapping.ColumnMappings.Add("مدت", "مدت")
            tableMapping.ColumnMappings.Add("مدرس", "مدرس")
            tableMapping.ColumnMappings.Add("محل", "محل")
            tableMapping.ColumnMappings.Add("برگزارکننده", "برگزارکننده")
            tableMapping.ColumnMappings.Add("هزینه آموزشی", "هزینه آموزشی")
            tableMapping.ColumnMappings.Add("هزینه رفاهی", "هزینه رفاهی")
            tableMapping.ColumnMappings.Add("هزینه متفرقه", "هزینه متفرقه")
            tableMapping.ColumnMappings.Add("هزینه کل", "هزینه کل")
            tableMapping.ColumnMappings.Add("مکان", "مکان")
            tableMapping.ColumnMappings.Add("جلسات", "جلسات")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select  Pm_Edu_DoreHolding.Srl , "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Pm_Edu_Dore .Name as عنوان,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"StartDate as شروع"& _ 
                ","&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"EndDate as پایان,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Pm_Edu_DoreHolding .[Length] as مدت,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Pm_Edu_Teacher.Name+"& _ 
                "' '+Pm_Edu_Teacher.Family as مدرس,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Pm_Edu_DorePlace .Name as محل,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Pm_Edu_DoreP"& _ 
                "resenter .Name  as برگزارکننده"&Global.Microsoft.VisualBasic.ChrW(9)&","&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Edu_Price as [هزینه آموزشی],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Refahi_Price as "& _ 
                "[هزینه رفاهی],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Other_Price as [هزینه متفرقه],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Edu_Price+Refahi_Price+Other_Pri"& _ 
                "ce  as [هزینه کل],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"case when "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"Place=1 then 'داخل استان' "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"when Place =2 then"& _ 
                " 'خارح استان'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"when Place = 3 then 'خارج کشور'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"end "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"as مکان , SessionCount  a"& _ 
                "s جلسات"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" from Pm_Edu_DoreHolding join Pm_Edu_Dore on Pm_Edu_Dore.Srl = Srl_Dore"& _ 
                " "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm_Edu_DorePlace on Srl_Place = Pm_Edu_DorePlace .Srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm"& _ 
                "_Edu_DorePresenter  on Srl_Presenter= Pm_Edu_DorePresenter .Srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm_Ed"& _ 
                "u_Teacher on Srl_Teacher = Pm_Edu_Teacher .Srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Edu.Pm_Edu_DoreHoldingDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Edu.Pm_Edu_DoreHoldingDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Edu.Pm_Edu_DoreHoldingDataTable = New Ds_Edu.Pm_Edu_DoreHoldingDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Edu_DoreParticipationTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Edu_DoreParticipation"
            tableMapping.ColumnMappings.Add("شماره", "شماره")
            tableMapping.ColumnMappings.Add("نام و نام خانوادگی", "نام و نام خانوادگی")
            tableMapping.ColumnMappings.Add("مدت شرکت", "مدت شرکت")
            tableMapping.ColumnMappings.Add("نمره", "نمره")
            tableMapping.ColumnMappings.Add("مدرک", "مدرک")
            tableMapping.ColumnMappings.Add("اموزش", "اموزش")
            tableMapping.ColumnMappings.Add("شرکت", "شرکت")
            tableMapping.ColumnMappings.Add("تاریخ صورت ", "تاریخ صورت ")
            tableMapping.ColumnMappings.Add("srl_ashkhas", "srl_ashkhas")
            tableMapping.ColumnMappings.Add("EvaluationForm", "EvaluationForm")
            tableMapping.ColumnMappings.Add("srl", "srl")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select pm_edu_doreParticipation.srl as شماره,  pm_ashkhas.name +' '+pm_ashkhas.fa"& _ 
                "mily as [نام و نام خانوادگی],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ParticipationTime as [مدت شرکت]  , grade نمره ,Ha"& _ 
                "veSertificate مدرک,EducationRegister اموزش,CompanyRegister شرکت,StatusStatementD"& _ 
                "ate [تاریخ صورت ],srl_ashkhas,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" EvaluationForm ,pm_edu_doreParticipation.srl  f"& _ 
                "rom pm_edu_doreParticipation  join pm_ashkhas "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"on srl_ashkhas = pm_ashkhas.srl "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where srl_doreHolding = @Srl_DoreHolding"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_DoreHolding", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_DoreHolding", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Edu.Pm_Edu_DoreParticipationDataTable, ByVal Srl_DoreHolding As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_DoreHolding.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_DoreHolding.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Srl_DoreHolding As Global.System.Nullable(Of Integer)) As Ds_Edu.Pm_Edu_DoreParticipationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_DoreHolding.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_DoreHolding.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Ds_Edu.Pm_Edu_DoreParticipationDataTable = New Ds_Edu.Pm_Edu_DoreParticipationDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _pm_Edu_JobTitleTableAdapter As Pm_Edu_JobTitleTableAdapter
        
        Private _pm_Edu_DoreTypeTableAdapter As Pm_Edu_DoreTypeTableAdapter
        
        Private _pm_Edu_DorePlaceTableAdapter As Pm_Edu_DorePlaceTableAdapter
        
        Private _pm_Edu_DorePresenterTableAdapter As Pm_Edu_DorePresenterTableAdapter
        
        Private _pm_Edu_TeacherTableAdapter As Pm_Edu_TeacherTableAdapter
        
        Private _pm_Edu_EvaluationItemTableAdapter As Pm_Edu_EvaluationItemTableAdapter
        
        Private _pm_Edu_DoreParticipatePresentTableAdapter As Pm_Edu_DoreParticipatePresentTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Pm_Edu_JobTitleTableAdapter() As Pm_Edu_JobTitleTableAdapter
            Get
                Return Me._pm_Edu_JobTitleTableAdapter
            End Get
            Set
                Me._pm_Edu_JobTitleTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Pm_Edu_DoreTypeTableAdapter() As Pm_Edu_DoreTypeTableAdapter
            Get
                Return Me._pm_Edu_DoreTypeTableAdapter
            End Get
            Set
                Me._pm_Edu_DoreTypeTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Pm_Edu_DorePlaceTableAdapter() As Pm_Edu_DorePlaceTableAdapter
            Get
                Return Me._pm_Edu_DorePlaceTableAdapter
            End Get
            Set
                Me._pm_Edu_DorePlaceTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Pm_Edu_DorePresenterTableAdapter() As Pm_Edu_DorePresenterTableAdapter
            Get
                Return Me._pm_Edu_DorePresenterTableAdapter
            End Get
            Set
                Me._pm_Edu_DorePresenterTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Pm_Edu_TeacherTableAdapter() As Pm_Edu_TeacherTableAdapter
            Get
                Return Me._pm_Edu_TeacherTableAdapter
            End Get
            Set
                Me._pm_Edu_TeacherTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Pm_Edu_EvaluationItemTableAdapter() As Pm_Edu_EvaluationItemTableAdapter
            Get
                Return Me._pm_Edu_EvaluationItemTableAdapter
            End Get
            Set
                Me._pm_Edu_EvaluationItemTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Pm_Edu_DoreParticipatePresentTableAdapter() As Pm_Edu_DoreParticipatePresentTableAdapter
            Get
                Return Me._pm_Edu_DoreParticipatePresentTableAdapter
            End Get
            Set
                Me._pm_Edu_DoreParticipatePresentTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._pm_Edu_JobTitleTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pm_Edu_JobTitleTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pm_Edu_JobTitleTableAdapter.Connection
                End If
                If ((Not (Me._pm_Edu_DoreTypeTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pm_Edu_DoreTypeTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pm_Edu_DoreTypeTableAdapter.Connection
                End If
                If ((Not (Me._pm_Edu_DorePlaceTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pm_Edu_DorePlaceTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pm_Edu_DorePlaceTableAdapter.Connection
                End If
                If ((Not (Me._pm_Edu_DorePresenterTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pm_Edu_DorePresenterTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pm_Edu_DorePresenterTableAdapter.Connection
                End If
                If ((Not (Me._pm_Edu_TeacherTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pm_Edu_TeacherTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pm_Edu_TeacherTableAdapter.Connection
                End If
                If ((Not (Me._pm_Edu_EvaluationItemTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pm_Edu_EvaluationItemTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pm_Edu_EvaluationItemTableAdapter.Connection
                End If
                If ((Not (Me._pm_Edu_DoreParticipatePresentTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pm_Edu_DoreParticipatePresentTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pm_Edu_DoreParticipatePresentTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._pm_Edu_JobTitleTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pm_Edu_DoreTypeTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pm_Edu_DorePlaceTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pm_Edu_DorePresenterTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pm_Edu_TeacherTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pm_Edu_EvaluationItemTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pm_Edu_DoreParticipatePresentTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As Ds_Edu, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._pm_Edu_DoreParticipatePresentTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Pm_Edu_DoreParticipatePresent.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pm_Edu_DoreParticipatePresentTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pm_Edu_JobTitleTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Pm_Edu_JobTitle.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pm_Edu_JobTitleTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pm_Edu_DoreTypeTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Pm_Edu_DoreType.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pm_Edu_DoreTypeTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pm_Edu_TeacherTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Pm_Edu_Teacher.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pm_Edu_TeacherTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pm_Edu_EvaluationItemTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Pm_Edu_EvaluationItem.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pm_Edu_EvaluationItemTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pm_Edu_DorePlaceTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Pm_Edu_DorePlace.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pm_Edu_DorePlaceTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pm_Edu_DorePresenterTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Pm_Edu_DorePresenter.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pm_Edu_DorePresenterTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As Ds_Edu, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._pm_Edu_DoreParticipatePresentTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Pm_Edu_DoreParticipatePresent.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pm_Edu_DoreParticipatePresentTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pm_Edu_JobTitleTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Pm_Edu_JobTitle.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pm_Edu_JobTitleTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pm_Edu_DoreTypeTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Pm_Edu_DoreType.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pm_Edu_DoreTypeTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pm_Edu_TeacherTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Pm_Edu_Teacher.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pm_Edu_TeacherTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pm_Edu_EvaluationItemTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Pm_Edu_EvaluationItem.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pm_Edu_EvaluationItemTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pm_Edu_DorePlaceTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Pm_Edu_DorePlace.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pm_Edu_DorePlaceTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pm_Edu_DorePresenterTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Pm_Edu_DorePresenter.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pm_Edu_DorePresenterTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As Ds_Edu, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._pm_Edu_DorePresenterTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Pm_Edu_DorePresenter.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pm_Edu_DorePresenterTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pm_Edu_DorePlaceTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Pm_Edu_DorePlace.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pm_Edu_DorePlaceTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pm_Edu_EvaluationItemTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Pm_Edu_EvaluationItem.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pm_Edu_EvaluationItemTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pm_Edu_TeacherTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Pm_Edu_Teacher.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pm_Edu_TeacherTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pm_Edu_DoreTypeTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Pm_Edu_DoreType.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pm_Edu_DoreTypeTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pm_Edu_JobTitleTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Pm_Edu_JobTitle.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pm_Edu_JobTitleTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pm_Edu_DoreParticipatePresentTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Pm_Edu_DoreParticipatePresent.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pm_Edu_DoreParticipatePresentTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As Ds_Edu) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._pm_Edu_JobTitleTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pm_Edu_JobTitleTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pm_Edu_DoreTypeTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pm_Edu_DoreTypeTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pm_Edu_DorePlaceTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pm_Edu_DorePlaceTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pm_Edu_DorePresenterTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pm_Edu_DorePresenterTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pm_Edu_TeacherTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pm_Edu_TeacherTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pm_Edu_EvaluationItemTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pm_Edu_EvaluationItemTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pm_Edu_DoreParticipatePresentTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pm_Edu_DoreParticipatePresentTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._pm_Edu_JobTitleTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pm_Edu_JobTitleTableAdapter, Me._pm_Edu_JobTitleTableAdapter.Connection)
                    Me._pm_Edu_JobTitleTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Edu_JobTitleTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._pm_Edu_JobTitleTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pm_Edu_JobTitleTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pm_Edu_JobTitleTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pm_Edu_DoreTypeTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pm_Edu_DoreTypeTableAdapter, Me._pm_Edu_DoreTypeTableAdapter.Connection)
                    Me._pm_Edu_DoreTypeTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Edu_DoreTypeTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._pm_Edu_DoreTypeTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pm_Edu_DoreTypeTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pm_Edu_DoreTypeTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pm_Edu_DorePlaceTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pm_Edu_DorePlaceTableAdapter, Me._pm_Edu_DorePlaceTableAdapter.Connection)
                    Me._pm_Edu_DorePlaceTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Edu_DorePlaceTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._pm_Edu_DorePlaceTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pm_Edu_DorePlaceTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pm_Edu_DorePlaceTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pm_Edu_DorePresenterTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pm_Edu_DorePresenterTableAdapter, Me._pm_Edu_DorePresenterTableAdapter.Connection)
                    Me._pm_Edu_DorePresenterTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Edu_DorePresenterTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._pm_Edu_DorePresenterTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pm_Edu_DorePresenterTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pm_Edu_DorePresenterTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pm_Edu_TeacherTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pm_Edu_TeacherTableAdapter, Me._pm_Edu_TeacherTableAdapter.Connection)
                    Me._pm_Edu_TeacherTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Edu_TeacherTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._pm_Edu_TeacherTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pm_Edu_TeacherTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pm_Edu_TeacherTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pm_Edu_EvaluationItemTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pm_Edu_EvaluationItemTableAdapter, Me._pm_Edu_EvaluationItemTableAdapter.Connection)
                    Me._pm_Edu_EvaluationItemTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Edu_EvaluationItemTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._pm_Edu_EvaluationItemTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pm_Edu_EvaluationItemTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pm_Edu_EvaluationItemTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pm_Edu_DoreParticipatePresentTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pm_Edu_DoreParticipatePresentTableAdapter, Me._pm_Edu_DoreParticipatePresentTableAdapter.Connection)
                    Me._pm_Edu_DoreParticipatePresentTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Edu_DoreParticipatePresentTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._pm_Edu_DoreParticipatePresentTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pm_Edu_DoreParticipatePresentTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pm_Edu_DoreParticipatePresentTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._pm_Edu_JobTitleTableAdapter) Is Nothing) Then
                    Me._pm_Edu_JobTitleTableAdapter.Connection = CType(revertConnections(Me._pm_Edu_JobTitleTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Edu_JobTitleTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pm_Edu_DoreTypeTableAdapter) Is Nothing) Then
                    Me._pm_Edu_DoreTypeTableAdapter.Connection = CType(revertConnections(Me._pm_Edu_DoreTypeTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Edu_DoreTypeTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pm_Edu_DorePlaceTableAdapter) Is Nothing) Then
                    Me._pm_Edu_DorePlaceTableAdapter.Connection = CType(revertConnections(Me._pm_Edu_DorePlaceTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Edu_DorePlaceTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pm_Edu_DorePresenterTableAdapter) Is Nothing) Then
                    Me._pm_Edu_DorePresenterTableAdapter.Connection = CType(revertConnections(Me._pm_Edu_DorePresenterTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Edu_DorePresenterTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pm_Edu_TeacherTableAdapter) Is Nothing) Then
                    Me._pm_Edu_TeacherTableAdapter.Connection = CType(revertConnections(Me._pm_Edu_TeacherTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Edu_TeacherTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pm_Edu_EvaluationItemTableAdapter) Is Nothing) Then
                    Me._pm_Edu_EvaluationItemTableAdapter.Connection = CType(revertConnections(Me._pm_Edu_EvaluationItemTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Edu_EvaluationItemTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pm_Edu_DoreParticipatePresentTableAdapter) Is Nothing) Then
                    Me._pm_Edu_DoreParticipatePresentTableAdapter.Connection = CType(revertConnections(Me._pm_Edu_DoreParticipatePresentTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Edu_DoreParticipatePresentTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
