'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.9168
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Ds_TimeCard"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Ds_TimeCard
    Inherits Global.System.Data.DataSet
    
    Private tablePm_TimeCardType As Pm_TimeCardTypeDataTable
    
    Private tablePm_timeCard As Pm_timeCardDataTable
    
    Private tableRp_TimeCardBasedNumber As Rp_TimeCardBasedNumberDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Pm_TimeCardType")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_TimeCardTypeDataTable(ds.Tables("Pm_TimeCardType")))
            End If
            If (Not (ds.Tables("Pm_timeCard")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_timeCardDataTable(ds.Tables("Pm_timeCard")))
            End If
            If (Not (ds.Tables("Rp_TimeCardBasedNumber")) Is Nothing) Then
                MyBase.Tables.Add(New Rp_TimeCardBasedNumberDataTable(ds.Tables("Rp_TimeCardBasedNumber")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_TimeCardType() As Pm_TimeCardTypeDataTable
        Get
            Return Me.tablePm_TimeCardType
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_timeCard() As Pm_timeCardDataTable
        Get
            Return Me.tablePm_timeCard
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Rp_TimeCardBasedNumber() As Rp_TimeCardBasedNumberDataTable
        Get
            Return Me.tableRp_TimeCardBasedNumber
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Ds_TimeCard = CType(MyBase.Clone,Ds_TimeCard)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Pm_TimeCardType")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_TimeCardTypeDataTable(ds.Tables("Pm_TimeCardType")))
            End If
            If (Not (ds.Tables("Pm_timeCard")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_timeCardDataTable(ds.Tables("Pm_timeCard")))
            End If
            If (Not (ds.Tables("Rp_TimeCardBasedNumber")) Is Nothing) Then
                MyBase.Tables.Add(New Rp_TimeCardBasedNumberDataTable(ds.Tables("Rp_TimeCardBasedNumber")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePm_TimeCardType = CType(MyBase.Tables("Pm_TimeCardType"),Pm_TimeCardTypeDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_TimeCardType) Is Nothing) Then
                Me.tablePm_TimeCardType.InitVars
            End If
        End If
        Me.tablePm_timeCard = CType(MyBase.Tables("Pm_timeCard"),Pm_timeCardDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_timeCard) Is Nothing) Then
                Me.tablePm_timeCard.InitVars
            End If
        End If
        Me.tableRp_TimeCardBasedNumber = CType(MyBase.Tables("Rp_TimeCardBasedNumber"),Rp_TimeCardBasedNumberDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRp_TimeCardBasedNumber) Is Nothing) Then
                Me.tableRp_TimeCardBasedNumber.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Ds_TimeCard"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Ds_TimeCard.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePm_TimeCardType = New Pm_TimeCardTypeDataTable
        MyBase.Tables.Add(Me.tablePm_TimeCardType)
        Me.tablePm_timeCard = New Pm_timeCardDataTable
        MyBase.Tables.Add(Me.tablePm_timeCard)
        Me.tableRp_TimeCardBasedNumber = New Rp_TimeCardBasedNumberDataTable
        MyBase.Tables.Add(Me.tableRp_TimeCardBasedNumber)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_TimeCardType() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_timeCard() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRp_TimeCardBasedNumber() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Ds_TimeCard = New Ds_TimeCard
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub Pm_TimeCardTypeRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_TimeCardTypeRowChangeEvent)
    
    Public Delegate Sub Pm_timeCardRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_timeCardRowChangeEvent)
    
    Public Delegate Sub Rp_TimeCardBasedNumberRowChangeEventHandler(ByVal sender As Object, ByVal e As Rp_TimeCardBasedNumberRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_TimeCardTypeDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_TimeCardTypeRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_TimeCardType"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_TimeCardTypeRow
            Get
                Return CType(Me.Rows(index),Pm_TimeCardTypeRow)
            End Get
        End Property
        
        Public Event Pm_TimeCardTypeRowChanging As Pm_TimeCardTypeRowChangeEventHandler
        
        Public Event Pm_TimeCardTypeRowChanged As Pm_TimeCardTypeRowChangeEventHandler
        
        Public Event Pm_TimeCardTypeRowDeleting As Pm_TimeCardTypeRowChangeEventHandler
        
        Public Event Pm_TimeCardTypeRowDeleted As Pm_TimeCardTypeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_TimeCardTypeRow(ByVal row As Pm_TimeCardTypeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_TimeCardTypeRow(ByVal Srl As Integer, ByVal Name As String) As Pm_TimeCardTypeRow
            Dim rowPm_TimeCardTypeRow As Pm_TimeCardTypeRow = CType(Me.NewRow,Pm_TimeCardTypeRow)
            Dim columnValuesArray() As Object = New Object() {Srl, Name}
            rowPm_TimeCardTypeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_TimeCardTypeRow)
            Return rowPm_TimeCardTypeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_TimeCardTypeDataTable = CType(MyBase.Clone,Pm_TimeCardTypeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_TimeCardTypeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnName = MyBase.Columns("Name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnName.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_TimeCardTypeRow() As Pm_TimeCardTypeRow
            Return CType(Me.NewRow,Pm_TimeCardTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_TimeCardTypeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_TimeCardTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_TimeCardTypeRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_TimeCardTypeRowChanged(Me, New Pm_TimeCardTypeRowChangeEvent(CType(e.Row,Pm_TimeCardTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_TimeCardTypeRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_TimeCardTypeRowChanging(Me, New Pm_TimeCardTypeRowChangeEvent(CType(e.Row,Pm_TimeCardTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_TimeCardTypeRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_TimeCardTypeRowDeleted(Me, New Pm_TimeCardTypeRowChangeEvent(CType(e.Row,Pm_TimeCardTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_TimeCardTypeRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_TimeCardTypeRowDeleting(Me, New Pm_TimeCardTypeRowChangeEvent(CType(e.Row,Pm_TimeCardTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_TimeCardTypeRow(ByVal row As Pm_TimeCardTypeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_TimeCard = New Ds_TimeCard
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_TimeCardTypeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_timeCardDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_timeCardRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnSrl_Pm_ashkhas As Global.System.Data.DataColumn
        
        Private columnتاریخ As Global.System.Data.DataColumn
        
        Private columnکارکرد As Global.System.Data.DataColumn
        
        Private columnاضافه_کار_اول_وقت As Global.System.Data.DataColumn
        
        Private columnاضافه_کار_آخر_وقت As Global.System.Data.DataColumn
        
        Private columnاضافه_کار_روز_تعطیل As Global.System.Data.DataColumn
        
        Private columnمرخصی As Global.System.Data.DataColumn
        
        Private columnماموریت As Global.System.Data.DataColumn
        
        Private columnتاخیر As Global.System.Data.DataColumn
        
        Private columnتعجیل As Global.System.Data.DataColumn
        
        Private columnورود As Global.System.Data.DataColumn
        
        Private columnخروج As Global.System.Data.DataColumn
        
        Private columnورود1 As Global.System.Data.DataColumn
        
        Private columnخروج1 As Global.System.Data.DataColumn
        
        Private columnورود2 As Global.System.Data.DataColumn
        
        Private columnخروج2 As Global.System.Data.DataColumn
        
        Private columnوضعیت As Global.System.Data.DataColumn
        
        Private columnمحل_فعالیت As Global.System.Data.DataColumn
        
        Private columnکد_هزینه As Global.System.Data.DataColumn
        
        Private columnتعطیل As Global.System.Data.DataColumn
        
        Private columnماموریت_فرم_کار As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_timeCard"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_Pm_ashkhasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_Pm_ashkhas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاریخColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاریخ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property کارکردColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnکارکرد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property اضافه_کار_اول_وقتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnاضافه_کار_اول_وقت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property اضافه_کار_آخر_وقتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnاضافه_کار_آخر_وقت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property اضافه_کار_روز_تعطیلColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnاضافه_کار_روز_تعطیل
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property مرخصیColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnمرخصی
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ماموریتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnماموریت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاخیرColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاخیر
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تعجیلColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتعجیل
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ورودColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnورود
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property خروجColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnخروج
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ورود1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnورود1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property خروج1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnخروج1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ورود2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnورود2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property خروج2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnخروج2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property وضعیتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnوضعیت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property محل_فعالیتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnمحل_فعالیت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property کد_هزینهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnکد_هزینه
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تعطیلColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتعطیل
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ماموریت_فرم_کارColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnماموریت_فرم_کار
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_timeCardRow
            Get
                Return CType(Me.Rows(index),Pm_timeCardRow)
            End Get
        End Property
        
        Public Event Pm_timeCardRowChanging As Pm_timeCardRowChangeEventHandler
        
        Public Event Pm_timeCardRowChanged As Pm_timeCardRowChangeEventHandler
        
        Public Event Pm_timeCardRowDeleting As Pm_timeCardRowChangeEventHandler
        
        Public Event Pm_timeCardRowDeleted As Pm_timeCardRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_timeCardRow(ByVal row As Pm_timeCardRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_timeCardRow( _
                    ByVal Srl_Pm_ashkhas As Integer,  _
                    ByVal تاریخ As String,  _
                    ByVal کارکرد As String,  _
                    ByVal اضافه_کار_اول_وقت As String,  _
                    ByVal اضافه_کار_آخر_وقت As String,  _
                    ByVal اضافه_کار_روز_تعطیل As String,  _
                    ByVal مرخصی As String,  _
                    ByVal ماموریت As String,  _
                    ByVal تاخیر As String,  _
                    ByVal تعجیل As String,  _
                    ByVal ورود As String,  _
                    ByVal خروج As String,  _
                    ByVal ورود1 As String,  _
                    ByVal خروج1 As String,  _
                    ByVal ورود2 As String,  _
                    ByVal خروج2 As String,  _
                    ByVal وضعیت As String,  _
                    ByVal محل_فعالیت As String,  _
                    ByVal کد_هزینه As String,  _
                    ByVal تعطیل As String,  _
                    ByVal ماموریت_فرم_کار As String) As Pm_timeCardRow
            Dim rowPm_timeCardRow As Pm_timeCardRow = CType(Me.NewRow,Pm_timeCardRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Srl_Pm_ashkhas, تاریخ, کارکرد, اضافه_کار_اول_وقت, اضافه_کار_آخر_وقت, اضافه_کار_روز_تعطیل, مرخصی, ماموریت, تاخیر, تعجیل, ورود, خروج, ورود1, خروج1, ورود2, خروج2, وضعیت, محل_فعالیت, کد_هزینه, تعطیل, ماموریت_فرم_کار}
            rowPm_timeCardRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_timeCardRow)
            Return rowPm_timeCardRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_timeCardDataTable = CType(MyBase.Clone,Pm_timeCardDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_timeCardDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnSrl_Pm_ashkhas = MyBase.Columns("Srl_Pm_ashkhas")
            Me.columnتاریخ = MyBase.Columns("تاریخ")
            Me.columnکارکرد = MyBase.Columns("کارکرد")
            Me.columnاضافه_کار_اول_وقت = MyBase.Columns("اضافه کار اول وقت")
            Me.columnاضافه_کار_آخر_وقت = MyBase.Columns("اضافه کار آخر وقت")
            Me.columnاضافه_کار_روز_تعطیل = MyBase.Columns("اضافه کار روز تعطیل")
            Me.columnمرخصی = MyBase.Columns("مرخصی")
            Me.columnماموریت = MyBase.Columns("ماموریت")
            Me.columnتاخیر = MyBase.Columns("تاخیر")
            Me.columnتعجیل = MyBase.Columns("تعجیل")
            Me.columnورود = MyBase.Columns("ورود")
            Me.columnخروج = MyBase.Columns("خروج")
            Me.columnورود1 = MyBase.Columns("ورود1")
            Me.columnخروج1 = MyBase.Columns("خروج1")
            Me.columnورود2 = MyBase.Columns("ورود2")
            Me.columnخروج2 = MyBase.Columns("خروج2")
            Me.columnوضعیت = MyBase.Columns("وضعیت")
            Me.columnمحل_فعالیت = MyBase.Columns("محل فعالیت")
            Me.columnکد_هزینه = MyBase.Columns("کد هزینه")
            Me.columnتعطیل = MyBase.Columns("تعطیل")
            Me.columnماموریت_فرم_کار = MyBase.Columns("ماموریت فرم کار")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnSrl_Pm_ashkhas = New Global.System.Data.DataColumn("Srl_Pm_ashkhas", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_Pm_ashkhas)
            Me.columnتاریخ = New Global.System.Data.DataColumn("تاریخ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاریخ)
            Me.columnکارکرد = New Global.System.Data.DataColumn("کارکرد", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnکارکرد)
            Me.columnاضافه_کار_اول_وقت = New Global.System.Data.DataColumn("اضافه کار اول وقت", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnاضافه_کار_اول_وقت)
            Me.columnاضافه_کار_آخر_وقت = New Global.System.Data.DataColumn("اضافه کار آخر وقت", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnاضافه_کار_آخر_وقت)
            Me.columnاضافه_کار_روز_تعطیل = New Global.System.Data.DataColumn("اضافه کار روز تعطیل", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnاضافه_کار_روز_تعطیل)
            Me.columnمرخصی = New Global.System.Data.DataColumn("مرخصی", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnمرخصی)
            Me.columnماموریت = New Global.System.Data.DataColumn("ماموریت", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnماموریت)
            Me.columnتاخیر = New Global.System.Data.DataColumn("تاخیر", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاخیر)
            Me.columnتعجیل = New Global.System.Data.DataColumn("تعجیل", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتعجیل)
            Me.columnورود = New Global.System.Data.DataColumn("ورود", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnورود)
            Me.columnخروج = New Global.System.Data.DataColumn("خروج", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnخروج)
            Me.columnورود1 = New Global.System.Data.DataColumn("ورود1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnورود1)
            Me.columnخروج1 = New Global.System.Data.DataColumn("خروج1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnخروج1)
            Me.columnورود2 = New Global.System.Data.DataColumn("ورود2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnورود2)
            Me.columnخروج2 = New Global.System.Data.DataColumn("خروج2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnخروج2)
            Me.columnوضعیت = New Global.System.Data.DataColumn("وضعیت", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnوضعیت)
            Me.columnمحل_فعالیت = New Global.System.Data.DataColumn("محل فعالیت", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnمحل_فعالیت)
            Me.columnکد_هزینه = New Global.System.Data.DataColumn("کد هزینه", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnکد_هزینه)
            Me.columnتعطیل = New Global.System.Data.DataColumn("تعطیل", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتعطیل)
            Me.columnماموریت_فرم_کار = New Global.System.Data.DataColumn("ماموریت فرم کار", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnماموریت_فرم_کار)
            Me.columnSrl.AutoIncrement = true
            Me.columnSrl.AutoIncrementSeed = -1
            Me.columnSrl.AutoIncrementStep = -1
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.ReadOnly = true
            Me.columnتاریخ.AllowDBNull = false
            Me.columnتاریخ.MaxLength = 10
            Me.columnکارکرد.MaxLength = 20
            Me.columnاضافه_کار_اول_وقت.MaxLength = 20
            Me.columnاضافه_کار_آخر_وقت.MaxLength = 20
            Me.columnاضافه_کار_روز_تعطیل.MaxLength = 20
            Me.columnمرخصی.MaxLength = 20
            Me.columnماموریت.MaxLength = 20
            Me.columnتاخیر.MaxLength = 20
            Me.columnتعجیل.MaxLength = 20
            Me.columnورود.MaxLength = 20
            Me.columnخروج.MaxLength = 20
            Me.columnورود1.MaxLength = 20
            Me.columnخروج1.MaxLength = 20
            Me.columnورود2.MaxLength = 20
            Me.columnخروج2.MaxLength = 20
            Me.columnوضعیت.MaxLength = 50
            Me.columnکد_هزینه.AutoIncrementSeed = -1
            Me.columnکد_هزینه.AutoIncrementStep = -1
            Me.columnتعطیل.ReadOnly = true
            Me.columnتعطیل.MaxLength = 1
            Me.columnماموریت_فرم_کار.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_timeCardRow() As Pm_timeCardRow
            Return CType(Me.NewRow,Pm_timeCardRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_timeCardRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_timeCardRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_timeCardRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_timeCardRowChanged(Me, New Pm_timeCardRowChangeEvent(CType(e.Row,Pm_timeCardRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_timeCardRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_timeCardRowChanging(Me, New Pm_timeCardRowChangeEvent(CType(e.Row,Pm_timeCardRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_timeCardRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_timeCardRowDeleted(Me, New Pm_timeCardRowChangeEvent(CType(e.Row,Pm_timeCardRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_timeCardRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_timeCardRowDeleting(Me, New Pm_timeCardRowChangeEvent(CType(e.Row,Pm_timeCardRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_timeCardRow(ByVal row As Pm_timeCardRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_TimeCard = New Ds_TimeCard
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_timeCardDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Rp_TimeCardBasedNumberDataTable
        Inherits Global.System.Data.TypedTableBase(Of Rp_TimeCardBasedNumberRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnSrl_Pm_ashkhas As Global.System.Data.DataColumn
        
        Private columnتاریخ As Global.System.Data.DataColumn
        
        Private columnکارکرد As Global.System.Data.DataColumn
        
        Private columnاضافه_کار_اول_وقت As Global.System.Data.DataColumn
        
        Private columnاضافه_کار_آخر_وقت As Global.System.Data.DataColumn
        
        Private columnاضافه_کار_روز_تعطیل As Global.System.Data.DataColumn
        
        Private columnمرخصی As Global.System.Data.DataColumn
        
        Private columnماموریت As Global.System.Data.DataColumn
        
        Private columnمحل_فعالیت As Global.System.Data.DataColumn
        
        Private columnکد_هزینه As Global.System.Data.DataColumn
        
        Private columnتاخیر As Global.System.Data.DataColumn
        
        Private columnتعجیل As Global.System.Data.DataColumn
        
        Private columnورود As Global.System.Data.DataColumn
        
        Private columnخروج As Global.System.Data.DataColumn
        
        Private columnورود1 As Global.System.Data.DataColumn
        
        Private columnخروج1 As Global.System.Data.DataColumn
        
        Private columnورود2 As Global.System.Data.DataColumn
        
        Private columnخروج2 As Global.System.Data.DataColumn
        
        Private columnوضعیت As Global.System.Data.DataColumn
        
        Private columnتعطیل As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Rp_TimeCardBasedNumber"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_Pm_ashkhasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_Pm_ashkhas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاریخColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاریخ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property کارکردColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnکارکرد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property اضافه_کار_اول_وقتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnاضافه_کار_اول_وقت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property اضافه_کار_آخر_وقتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnاضافه_کار_آخر_وقت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property اضافه_کار_روز_تعطیلColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnاضافه_کار_روز_تعطیل
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property مرخصیColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnمرخصی
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ماموریتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnماموریت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property محل_فعالیتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnمحل_فعالیت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property کد_هزینهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnکد_هزینه
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاخیرColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاخیر
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تعجیلColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتعجیل
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ورودColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnورود
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property خروجColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnخروج
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ورود1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnورود1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property خروج1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnخروج1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ورود2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnورود2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property خروج2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnخروج2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property وضعیتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnوضعیت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تعطیلColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتعطیل
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Rp_TimeCardBasedNumberRow
            Get
                Return CType(Me.Rows(index),Rp_TimeCardBasedNumberRow)
            End Get
        End Property
        
        Public Event Rp_TimeCardBasedNumberRowChanging As Rp_TimeCardBasedNumberRowChangeEventHandler
        
        Public Event Rp_TimeCardBasedNumberRowChanged As Rp_TimeCardBasedNumberRowChangeEventHandler
        
        Public Event Rp_TimeCardBasedNumberRowDeleting As Rp_TimeCardBasedNumberRowChangeEventHandler
        
        Public Event Rp_TimeCardBasedNumberRowDeleted As Rp_TimeCardBasedNumberRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRp_TimeCardBasedNumberRow(ByVal row As Rp_TimeCardBasedNumberRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRp_TimeCardBasedNumberRow( _
                    ByVal Srl_Pm_ashkhas As Integer,  _
                    ByVal تاریخ As String,  _
                    ByVal کارکرد As String,  _
                    ByVal اضافه_کار_اول_وقت As String,  _
                    ByVal اضافه_کار_آخر_وقت As String,  _
                    ByVal اضافه_کار_روز_تعطیل As String,  _
                    ByVal مرخصی As String,  _
                    ByVal ماموریت As String,  _
                    ByVal محل_فعالیت As String,  _
                    ByVal کد_هزینه As String,  _
                    ByVal تاخیر As String,  _
                    ByVal تعجیل As String,  _
                    ByVal ورود As String,  _
                    ByVal خروج As String,  _
                    ByVal ورود1 As String,  _
                    ByVal خروج1 As String,  _
                    ByVal ورود2 As String,  _
                    ByVal خروج2 As String,  _
                    ByVal وضعیت As String,  _
                    ByVal تعطیل As String) As Rp_TimeCardBasedNumberRow
            Dim rowRp_TimeCardBasedNumberRow As Rp_TimeCardBasedNumberRow = CType(Me.NewRow,Rp_TimeCardBasedNumberRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Srl_Pm_ashkhas, تاریخ, کارکرد, اضافه_کار_اول_وقت, اضافه_کار_آخر_وقت, اضافه_کار_روز_تعطیل, مرخصی, ماموریت, محل_فعالیت, کد_هزینه, تاخیر, تعجیل, ورود, خروج, ورود1, خروج1, ورود2, خروج2, وضعیت, تعطیل}
            rowRp_TimeCardBasedNumberRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRp_TimeCardBasedNumberRow)
            Return rowRp_TimeCardBasedNumberRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Rp_TimeCardBasedNumberDataTable = CType(MyBase.Clone,Rp_TimeCardBasedNumberDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Rp_TimeCardBasedNumberDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnSrl_Pm_ashkhas = MyBase.Columns("Srl_Pm_ashkhas")
            Me.columnتاریخ = MyBase.Columns("تاریخ")
            Me.columnکارکرد = MyBase.Columns("کارکرد")
            Me.columnاضافه_کار_اول_وقت = MyBase.Columns("اضافه کار اول وقت")
            Me.columnاضافه_کار_آخر_وقت = MyBase.Columns("اضافه کار آخر وقت")
            Me.columnاضافه_کار_روز_تعطیل = MyBase.Columns("اضافه کار روز تعطیل")
            Me.columnمرخصی = MyBase.Columns("مرخصی")
            Me.columnماموریت = MyBase.Columns("ماموریت")
            Me.columnمحل_فعالیت = MyBase.Columns("محل فعالیت")
            Me.columnکد_هزینه = MyBase.Columns("کد هزینه")
            Me.columnتاخیر = MyBase.Columns("تاخیر")
            Me.columnتعجیل = MyBase.Columns("تعجیل")
            Me.columnورود = MyBase.Columns("ورود")
            Me.columnخروج = MyBase.Columns("خروج")
            Me.columnورود1 = MyBase.Columns("ورود1")
            Me.columnخروج1 = MyBase.Columns("خروج1")
            Me.columnورود2 = MyBase.Columns("ورود2")
            Me.columnخروج2 = MyBase.Columns("خروج2")
            Me.columnوضعیت = MyBase.Columns("وضعیت")
            Me.columnتعطیل = MyBase.Columns("تعطیل")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnSrl_Pm_ashkhas = New Global.System.Data.DataColumn("Srl_Pm_ashkhas", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_Pm_ashkhas)
            Me.columnتاریخ = New Global.System.Data.DataColumn("تاریخ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاریخ)
            Me.columnکارکرد = New Global.System.Data.DataColumn("کارکرد", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnکارکرد)
            Me.columnاضافه_کار_اول_وقت = New Global.System.Data.DataColumn("اضافه کار اول وقت", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnاضافه_کار_اول_وقت)
            Me.columnاضافه_کار_آخر_وقت = New Global.System.Data.DataColumn("اضافه کار آخر وقت", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnاضافه_کار_آخر_وقت)
            Me.columnاضافه_کار_روز_تعطیل = New Global.System.Data.DataColumn("اضافه کار روز تعطیل", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnاضافه_کار_روز_تعطیل)
            Me.columnمرخصی = New Global.System.Data.DataColumn("مرخصی", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnمرخصی)
            Me.columnماموریت = New Global.System.Data.DataColumn("ماموریت", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnماموریت)
            Me.columnمحل_فعالیت = New Global.System.Data.DataColumn("محل فعالیت", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnمحل_فعالیت)
            Me.columnکد_هزینه = New Global.System.Data.DataColumn("کد هزینه", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnکد_هزینه)
            Me.columnتاخیر = New Global.System.Data.DataColumn("تاخیر", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاخیر)
            Me.columnتعجیل = New Global.System.Data.DataColumn("تعجیل", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتعجیل)
            Me.columnورود = New Global.System.Data.DataColumn("ورود", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnورود)
            Me.columnخروج = New Global.System.Data.DataColumn("خروج", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnخروج)
            Me.columnورود1 = New Global.System.Data.DataColumn("ورود1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnورود1)
            Me.columnخروج1 = New Global.System.Data.DataColumn("خروج1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnخروج1)
            Me.columnورود2 = New Global.System.Data.DataColumn("ورود2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnورود2)
            Me.columnخروج2 = New Global.System.Data.DataColumn("خروج2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnخروج2)
            Me.columnوضعیت = New Global.System.Data.DataColumn("وضعیت", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnوضعیت)
            Me.columnتعطیل = New Global.System.Data.DataColumn("تعطیل", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتعطیل)
            Me.columnSrl.AutoIncrement = true
            Me.columnSrl.AutoIncrementSeed = -1
            Me.columnSrl.AutoIncrementStep = -1
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.ReadOnly = true
            Me.columnتاریخ.AllowDBNull = false
            Me.columnتاریخ.MaxLength = 10
            Me.columnکارکرد.MaxLength = 20
            Me.columnاضافه_کار_اول_وقت.MaxLength = 20
            Me.columnاضافه_کار_آخر_وقت.MaxLength = 20
            Me.columnاضافه_کار_روز_تعطیل.MaxLength = 61
            Me.columnمرخصی.MaxLength = 20
            Me.columnماموریت.MaxLength = 20
            Me.columnکد_هزینه.AutoIncrementSeed = -1
            Me.columnکد_هزینه.AutoIncrementStep = -1
            Me.columnتاخیر.MaxLength = 20
            Me.columnتعجیل.MaxLength = 20
            Me.columnورود.MaxLength = 61
            Me.columnخروج.MaxLength = 61
            Me.columnورود1.MaxLength = 20
            Me.columnخروج1.MaxLength = 20
            Me.columnورود2.MaxLength = 20
            Me.columnخروج2.MaxLength = 20
            Me.columnوضعیت.MaxLength = 50
            Me.columnتعطیل.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRp_TimeCardBasedNumberRow() As Rp_TimeCardBasedNumberRow
            Return CType(Me.NewRow,Rp_TimeCardBasedNumberRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Rp_TimeCardBasedNumberRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Rp_TimeCardBasedNumberRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Rp_TimeCardBasedNumberRowChangedEvent) Is Nothing) Then
                RaiseEvent Rp_TimeCardBasedNumberRowChanged(Me, New Rp_TimeCardBasedNumberRowChangeEvent(CType(e.Row,Rp_TimeCardBasedNumberRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Rp_TimeCardBasedNumberRowChangingEvent) Is Nothing) Then
                RaiseEvent Rp_TimeCardBasedNumberRowChanging(Me, New Rp_TimeCardBasedNumberRowChangeEvent(CType(e.Row,Rp_TimeCardBasedNumberRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Rp_TimeCardBasedNumberRowDeletedEvent) Is Nothing) Then
                RaiseEvent Rp_TimeCardBasedNumberRowDeleted(Me, New Rp_TimeCardBasedNumberRowChangeEvent(CType(e.Row,Rp_TimeCardBasedNumberRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Rp_TimeCardBasedNumberRowDeletingEvent) Is Nothing) Then
                RaiseEvent Rp_TimeCardBasedNumberRowDeleting(Me, New Rp_TimeCardBasedNumberRowChangeEvent(CType(e.Row,Rp_TimeCardBasedNumberRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRp_TimeCardBasedNumberRow(ByVal row As Rp_TimeCardBasedNumberRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_TimeCard = New Ds_TimeCard
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Rp_TimeCardBasedNumberDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_TimeCardTypeRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_TimeCardType As Pm_TimeCardTypeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_TimeCardType = CType(Me.Table,Pm_TimeCardTypeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_TimeCardType.SrlColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl' in table 'Pm_TimeCardType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_TimeCardType.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_TimeCardType.NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Name' in table 'Pm_TimeCardType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_TimeCardType.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrlNull() As Boolean
            Return Me.IsNull(Me.tablePm_TimeCardType.SrlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrlNull()
            Me(Me.tablePm_TimeCardType.SrlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tablePm_TimeCardType.NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameNull()
            Me(Me.tablePm_TimeCardType.NameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_timeCardRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_timeCard As Pm_timeCardDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_timeCard = CType(Me.Table,Pm_timeCardDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_timeCard.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_timeCard.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_Pm_ashkhas() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_timeCard.Srl_Pm_ashkhasColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_Pm_ashkhas' in table 'Pm_timeCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_timeCard.Srl_Pm_ashkhasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاریخ() As String
            Get
                Return CType(Me(Me.tablePm_timeCard.تاریخColumn),String)
            End Get
            Set
                Me(Me.tablePm_timeCard.تاریخColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property کارکرد() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_timeCard.کارکردColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'کارکرد' in table 'Pm_timeCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_timeCard.کارکردColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property اضافه_کار_اول_وقت() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_timeCard.اضافه_کار_اول_وقتColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'اضافه کار اول وقت' in table 'Pm_timeCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_timeCard.اضافه_کار_اول_وقتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property اضافه_کار_آخر_وقت() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_timeCard.اضافه_کار_آخر_وقتColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'اضافه کار آخر وقت' in table 'Pm_timeCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_timeCard.اضافه_کار_آخر_وقتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property اضافه_کار_روز_تعطیل() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_timeCard.اضافه_کار_روز_تعطیلColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'اضافه کار روز تعطیل' in table 'Pm_timeCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_timeCard.اضافه_کار_روز_تعطیلColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property مرخصی() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_timeCard.مرخصیColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'مرخصی' in table 'Pm_timeCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_timeCard.مرخصیColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ماموریت() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_timeCard.ماموریتColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ماموریت' in table 'Pm_timeCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_timeCard.ماموریتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاخیر() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_timeCard.تاخیرColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تاخیر' in table 'Pm_timeCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_timeCard.تاخیرColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تعجیل() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_timeCard.تعجیلColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تعجیل' in table 'Pm_timeCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_timeCard.تعجیلColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ورود() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_timeCard.ورودColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ورود' in table 'Pm_timeCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_timeCard.ورودColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property خروج() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_timeCard.خروجColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'خروج' in table 'Pm_timeCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_timeCard.خروجColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ورود1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_timeCard.ورود1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ورود1' in table 'Pm_timeCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_timeCard.ورود1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property خروج1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_timeCard.خروج1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'خروج1' in table 'Pm_timeCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_timeCard.خروج1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ورود2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_timeCard.ورود2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ورود2' in table 'Pm_timeCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_timeCard.ورود2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property خروج2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_timeCard.خروج2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'خروج2' in table 'Pm_timeCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_timeCard.خروج2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property وضعیت() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_timeCard.وضعیتColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'وضعیت' in table 'Pm_timeCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_timeCard.وضعیتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property محل_فعالیت() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_timeCard.محل_فعالیتColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'محل فعالیت' in table 'Pm_timeCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_timeCard.محل_فعالیتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property کد_هزینه() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_timeCard.کد_هزینهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'کد هزینه' in table 'Pm_timeCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_timeCard.کد_هزینهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تعطیل() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_timeCard.تعطیلColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تعطیل' in table 'Pm_timeCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_timeCard.تعطیلColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ماموریت_فرم_کار() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_timeCard.ماموریت_فرم_کارColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ماموریت فرم کار' in table 'Pm_timeCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_timeCard.ماموریت_فرم_کارColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_Pm_ashkhasNull() As Boolean
            Return Me.IsNull(Me.tablePm_timeCard.Srl_Pm_ashkhasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_Pm_ashkhasNull()
            Me(Me.tablePm_timeCard.Srl_Pm_ashkhasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsکارکردNull() As Boolean
            Return Me.IsNull(Me.tablePm_timeCard.کارکردColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetکارکردNull()
            Me(Me.tablePm_timeCard.کارکردColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isاضافه_کار_اول_وقتNull() As Boolean
            Return Me.IsNull(Me.tablePm_timeCard.اضافه_کار_اول_وقتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setاضافه_کار_اول_وقتNull()
            Me(Me.tablePm_timeCard.اضافه_کار_اول_وقتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isاضافه_کار_آخر_وقتNull() As Boolean
            Return Me.IsNull(Me.tablePm_timeCard.اضافه_کار_آخر_وقتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setاضافه_کار_آخر_وقتNull()
            Me(Me.tablePm_timeCard.اضافه_کار_آخر_وقتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isاضافه_کار_روز_تعطیلNull() As Boolean
            Return Me.IsNull(Me.tablePm_timeCard.اضافه_کار_روز_تعطیلColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setاضافه_کار_روز_تعطیلNull()
            Me(Me.tablePm_timeCard.اضافه_کار_روز_تعطیلColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsمرخصیNull() As Boolean
            Return Me.IsNull(Me.tablePm_timeCard.مرخصیColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetمرخصیNull()
            Me(Me.tablePm_timeCard.مرخصیColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsماموریتNull() As Boolean
            Return Me.IsNull(Me.tablePm_timeCard.ماموریتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetماموریتNull()
            Me(Me.tablePm_timeCard.ماموریتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتاخیرNull() As Boolean
            Return Me.IsNull(Me.tablePm_timeCard.تاخیرColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتاخیرNull()
            Me(Me.tablePm_timeCard.تاخیرColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتعجیلNull() As Boolean
            Return Me.IsNull(Me.tablePm_timeCard.تعجیلColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتعجیلNull()
            Me(Me.tablePm_timeCard.تعجیلColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsورودNull() As Boolean
            Return Me.IsNull(Me.tablePm_timeCard.ورودColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetورودNull()
            Me(Me.tablePm_timeCard.ورودColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsخروجNull() As Boolean
            Return Me.IsNull(Me.tablePm_timeCard.خروجColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetخروجNull()
            Me(Me.tablePm_timeCard.خروجColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isورود1Null() As Boolean
            Return Me.IsNull(Me.tablePm_timeCard.ورود1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setورود1Null()
            Me(Me.tablePm_timeCard.ورود1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isخروج1Null() As Boolean
            Return Me.IsNull(Me.tablePm_timeCard.خروج1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setخروج1Null()
            Me(Me.tablePm_timeCard.خروج1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isورود2Null() As Boolean
            Return Me.IsNull(Me.tablePm_timeCard.ورود2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setورود2Null()
            Me(Me.tablePm_timeCard.ورود2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isخروج2Null() As Boolean
            Return Me.IsNull(Me.tablePm_timeCard.خروج2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setخروج2Null()
            Me(Me.tablePm_timeCard.خروج2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsوضعیتNull() As Boolean
            Return Me.IsNull(Me.tablePm_timeCard.وضعیتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetوضعیتNull()
            Me(Me.tablePm_timeCard.وضعیتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isمحل_فعالیتNull() As Boolean
            Return Me.IsNull(Me.tablePm_timeCard.محل_فعالیتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setمحل_فعالیتNull()
            Me(Me.tablePm_timeCard.محل_فعالیتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isکد_هزینهNull() As Boolean
            Return Me.IsNull(Me.tablePm_timeCard.کد_هزینهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setکد_هزینهNull()
            Me(Me.tablePm_timeCard.کد_هزینهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتعطیلNull() As Boolean
            Return Me.IsNull(Me.tablePm_timeCard.تعطیلColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتعطیلNull()
            Me(Me.tablePm_timeCard.تعطیلColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isماموریت_فرم_کارNull() As Boolean
            Return Me.IsNull(Me.tablePm_timeCard.ماموریت_فرم_کارColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setماموریت_فرم_کارNull()
            Me(Me.tablePm_timeCard.ماموریت_فرم_کارColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Rp_TimeCardBasedNumberRow
        Inherits Global.System.Data.DataRow
        
        Private tableRp_TimeCardBasedNumber As Rp_TimeCardBasedNumberDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRp_TimeCardBasedNumber = CType(Me.Table,Rp_TimeCardBasedNumberDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tableRp_TimeCardBasedNumber.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tableRp_TimeCardBasedNumber.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_Pm_ashkhas() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRp_TimeCardBasedNumber.Srl_Pm_ashkhasColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_Pm_ashkhas' in table 'Rp_TimeCardBasedNumber' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_TimeCardBasedNumber.Srl_Pm_ashkhasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاریخ() As String
            Get
                Return CType(Me(Me.tableRp_TimeCardBasedNumber.تاریخColumn),String)
            End Get
            Set
                Me(Me.tableRp_TimeCardBasedNumber.تاریخColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property کارکرد() As String
            Get
                Try 
                    Return CType(Me(Me.tableRp_TimeCardBasedNumber.کارکردColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'کارکرد' in table 'Rp_TimeCardBasedNumber' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_TimeCardBasedNumber.کارکردColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property اضافه_کار_اول_وقت() As String
            Get
                Try 
                    Return CType(Me(Me.tableRp_TimeCardBasedNumber.اضافه_کار_اول_وقتColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'اضافه کار اول وقت' in table 'Rp_TimeCardBasedNumber' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_TimeCardBasedNumber.اضافه_کار_اول_وقتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property اضافه_کار_آخر_وقت() As String
            Get
                Try 
                    Return CType(Me(Me.tableRp_TimeCardBasedNumber.اضافه_کار_آخر_وقتColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'اضافه کار آخر وقت' in table 'Rp_TimeCardBasedNumber' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_TimeCardBasedNumber.اضافه_کار_آخر_وقتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property اضافه_کار_روز_تعطیل() As String
            Get
                Try 
                    Return CType(Me(Me.tableRp_TimeCardBasedNumber.اضافه_کار_روز_تعطیلColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'اضافه کار روز تعطیل' in table 'Rp_TimeCardBasedNumber' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_TimeCardBasedNumber.اضافه_کار_روز_تعطیلColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property مرخصی() As String
            Get
                Try 
                    Return CType(Me(Me.tableRp_TimeCardBasedNumber.مرخصیColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'مرخصی' in table 'Rp_TimeCardBasedNumber' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_TimeCardBasedNumber.مرخصیColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ماموریت() As String
            Get
                Try 
                    Return CType(Me(Me.tableRp_TimeCardBasedNumber.ماموریتColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ماموریت' in table 'Rp_TimeCardBasedNumber' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_TimeCardBasedNumber.ماموریتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property محل_فعالیت() As String
            Get
                Try 
                    Return CType(Me(Me.tableRp_TimeCardBasedNumber.محل_فعالیتColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'محل فعالیت' in table 'Rp_TimeCardBasedNumber' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_TimeCardBasedNumber.محل_فعالیتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property کد_هزینه() As String
            Get
                Try 
                    Return CType(Me(Me.tableRp_TimeCardBasedNumber.کد_هزینهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'کد هزینه' in table 'Rp_TimeCardBasedNumber' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_TimeCardBasedNumber.کد_هزینهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاخیر() As String
            Get
                Try 
                    Return CType(Me(Me.tableRp_TimeCardBasedNumber.تاخیرColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تاخیر' in table 'Rp_TimeCardBasedNumber' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_TimeCardBasedNumber.تاخیرColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تعجیل() As String
            Get
                Try 
                    Return CType(Me(Me.tableRp_TimeCardBasedNumber.تعجیلColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تعجیل' in table 'Rp_TimeCardBasedNumber' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_TimeCardBasedNumber.تعجیلColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ورود() As String
            Get
                Try 
                    Return CType(Me(Me.tableRp_TimeCardBasedNumber.ورودColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ورود' in table 'Rp_TimeCardBasedNumber' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_TimeCardBasedNumber.ورودColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property خروج() As String
            Get
                Try 
                    Return CType(Me(Me.tableRp_TimeCardBasedNumber.خروجColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'خروج' in table 'Rp_TimeCardBasedNumber' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_TimeCardBasedNumber.خروجColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ورود1() As String
            Get
                Try 
                    Return CType(Me(Me.tableRp_TimeCardBasedNumber.ورود1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ورود1' in table 'Rp_TimeCardBasedNumber' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_TimeCardBasedNumber.ورود1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property خروج1() As String
            Get
                Try 
                    Return CType(Me(Me.tableRp_TimeCardBasedNumber.خروج1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'خروج1' in table 'Rp_TimeCardBasedNumber' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_TimeCardBasedNumber.خروج1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ورود2() As String
            Get
                Try 
                    Return CType(Me(Me.tableRp_TimeCardBasedNumber.ورود2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ورود2' in table 'Rp_TimeCardBasedNumber' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_TimeCardBasedNumber.ورود2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property خروج2() As String
            Get
                Try 
                    Return CType(Me(Me.tableRp_TimeCardBasedNumber.خروج2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'خروج2' in table 'Rp_TimeCardBasedNumber' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_TimeCardBasedNumber.خروج2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property وضعیت() As String
            Get
                Try 
                    Return CType(Me(Me.tableRp_TimeCardBasedNumber.وضعیتColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'وضعیت' in table 'Rp_TimeCardBasedNumber' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_TimeCardBasedNumber.وضعیتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تعطیل() As String
            Get
                Try 
                    Return CType(Me(Me.tableRp_TimeCardBasedNumber.تعطیلColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تعطیل' in table 'Rp_TimeCardBasedNumber' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRp_TimeCardBasedNumber.تعطیلColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_Pm_ashkhasNull() As Boolean
            Return Me.IsNull(Me.tableRp_TimeCardBasedNumber.Srl_Pm_ashkhasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_Pm_ashkhasNull()
            Me(Me.tableRp_TimeCardBasedNumber.Srl_Pm_ashkhasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsکارکردNull() As Boolean
            Return Me.IsNull(Me.tableRp_TimeCardBasedNumber.کارکردColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetکارکردNull()
            Me(Me.tableRp_TimeCardBasedNumber.کارکردColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isاضافه_کار_اول_وقتNull() As Boolean
            Return Me.IsNull(Me.tableRp_TimeCardBasedNumber.اضافه_کار_اول_وقتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setاضافه_کار_اول_وقتNull()
            Me(Me.tableRp_TimeCardBasedNumber.اضافه_کار_اول_وقتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isاضافه_کار_آخر_وقتNull() As Boolean
            Return Me.IsNull(Me.tableRp_TimeCardBasedNumber.اضافه_کار_آخر_وقتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setاضافه_کار_آخر_وقتNull()
            Me(Me.tableRp_TimeCardBasedNumber.اضافه_کار_آخر_وقتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isاضافه_کار_روز_تعطیلNull() As Boolean
            Return Me.IsNull(Me.tableRp_TimeCardBasedNumber.اضافه_کار_روز_تعطیلColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setاضافه_کار_روز_تعطیلNull()
            Me(Me.tableRp_TimeCardBasedNumber.اضافه_کار_روز_تعطیلColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsمرخصیNull() As Boolean
            Return Me.IsNull(Me.tableRp_TimeCardBasedNumber.مرخصیColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetمرخصیNull()
            Me(Me.tableRp_TimeCardBasedNumber.مرخصیColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsماموریتNull() As Boolean
            Return Me.IsNull(Me.tableRp_TimeCardBasedNumber.ماموریتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetماموریتNull()
            Me(Me.tableRp_TimeCardBasedNumber.ماموریتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isمحل_فعالیتNull() As Boolean
            Return Me.IsNull(Me.tableRp_TimeCardBasedNumber.محل_فعالیتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setمحل_فعالیتNull()
            Me(Me.tableRp_TimeCardBasedNumber.محل_فعالیتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isکد_هزینهNull() As Boolean
            Return Me.IsNull(Me.tableRp_TimeCardBasedNumber.کد_هزینهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setکد_هزینهNull()
            Me(Me.tableRp_TimeCardBasedNumber.کد_هزینهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتاخیرNull() As Boolean
            Return Me.IsNull(Me.tableRp_TimeCardBasedNumber.تاخیرColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتاخیرNull()
            Me(Me.tableRp_TimeCardBasedNumber.تاخیرColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتعجیلNull() As Boolean
            Return Me.IsNull(Me.tableRp_TimeCardBasedNumber.تعجیلColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتعجیلNull()
            Me(Me.tableRp_TimeCardBasedNumber.تعجیلColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsورودNull() As Boolean
            Return Me.IsNull(Me.tableRp_TimeCardBasedNumber.ورودColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetورودNull()
            Me(Me.tableRp_TimeCardBasedNumber.ورودColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsخروجNull() As Boolean
            Return Me.IsNull(Me.tableRp_TimeCardBasedNumber.خروجColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetخروجNull()
            Me(Me.tableRp_TimeCardBasedNumber.خروجColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isورود1Null() As Boolean
            Return Me.IsNull(Me.tableRp_TimeCardBasedNumber.ورود1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setورود1Null()
            Me(Me.tableRp_TimeCardBasedNumber.ورود1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isخروج1Null() As Boolean
            Return Me.IsNull(Me.tableRp_TimeCardBasedNumber.خروج1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setخروج1Null()
            Me(Me.tableRp_TimeCardBasedNumber.خروج1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isورود2Null() As Boolean
            Return Me.IsNull(Me.tableRp_TimeCardBasedNumber.ورود2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setورود2Null()
            Me(Me.tableRp_TimeCardBasedNumber.ورود2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isخروج2Null() As Boolean
            Return Me.IsNull(Me.tableRp_TimeCardBasedNumber.خروج2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setخروج2Null()
            Me(Me.tableRp_TimeCardBasedNumber.خروج2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsوضعیتNull() As Boolean
            Return Me.IsNull(Me.tableRp_TimeCardBasedNumber.وضعیتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetوضعیتNull()
            Me(Me.tableRp_TimeCardBasedNumber.وضعیتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتعطیلNull() As Boolean
            Return Me.IsNull(Me.tableRp_TimeCardBasedNumber.تعطیلColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتعطیلNull()
            Me(Me.tableRp_TimeCardBasedNumber.تعطیلColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_TimeCardTypeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_TimeCardTypeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_TimeCardTypeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_TimeCardTypeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_timeCardRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_timeCardRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_timeCardRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_timeCardRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Rp_TimeCardBasedNumberRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Rp_TimeCardBasedNumberRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Rp_TimeCardBasedNumberRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Rp_TimeCardBasedNumberRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace Ds_TimeCardTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_TimeCardTypeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_TimeCardType"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("Name", "Name")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select Srl,Name from Pm_TimeCardType "
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_TimeCard.Pm_TimeCardTypeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_TimeCard.Pm_TimeCardTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_TimeCard.Pm_TimeCardTypeDataTable = New Ds_TimeCard.Pm_TimeCardTypeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_timeCardTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_timeCard"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("Srl_Pm_ashkhas", "Srl_Pm_ashkhas")
            tableMapping.ColumnMappings.Add("تاریخ", "تاریخ")
            tableMapping.ColumnMappings.Add("کارکرد", "کارکرد")
            tableMapping.ColumnMappings.Add("اضافه کار اول وقت", "اضافه کار اول وقت")
            tableMapping.ColumnMappings.Add("اضافه کار آخر وقت", "اضافه کار آخر وقت")
            tableMapping.ColumnMappings.Add("اضافه کار روز تعطیل", "اضافه کار روز تعطیل")
            tableMapping.ColumnMappings.Add("مرخصی", "مرخصی")
            tableMapping.ColumnMappings.Add("ماموریت", "ماموریت")
            tableMapping.ColumnMappings.Add("تاخیر", "تاخیر")
            tableMapping.ColumnMappings.Add("تعجیل", "تعجیل")
            tableMapping.ColumnMappings.Add("ورود", "ورود")
            tableMapping.ColumnMappings.Add("خروج", "خروج")
            tableMapping.ColumnMappings.Add("ورود1", "ورود1")
            tableMapping.ColumnMappings.Add("خروج1", "خروج1")
            tableMapping.ColumnMappings.Add("ورود2", "ورود2")
            tableMapping.ColumnMappings.Add("خروج2", "خروج2")
            tableMapping.ColumnMappings.Add("وضعیت", "وضعیت")
            tableMapping.ColumnMappings.Add("محل فعالیت", "محل فعالیت")
            tableMapping.ColumnMappings.Add("کد هزینه", "کد هزینه")
            tableMapping.ColumnMappings.Add("تعطیل", "تعطیل")
            tableMapping.ColumnMappings.Add("ماموریت فرم کار", "ماموریت فرم کار")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.Rp_TimeCard"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Ashkhas", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BeginDate", Global.System.Data.SqlDbType.[Char], 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EndDate", Global.System.Data.SqlDbType.[Char], 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeCardNumber", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 19, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_TimeCard.Pm_timeCardDataTable, ByVal Srl_Ashkhas As Global.System.Nullable(Of Integer), ByVal BeginDate As String, ByVal EndDate As String, ByVal TimeCardNumber As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_Ashkhas.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Srl_Ashkhas.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (BeginDate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(BeginDate,String)
            End If
            If (EndDate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(EndDate,String)
            End If
            If (TimeCardNumber.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(TimeCardNumber.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Srl_Ashkhas As Global.System.Nullable(Of Integer), ByVal BeginDate As String, ByVal EndDate As String, ByVal TimeCardNumber As Global.System.Nullable(Of Long)) As Ds_TimeCard.Pm_timeCardDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_Ashkhas.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Srl_Ashkhas.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (BeginDate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(BeginDate,String)
            End If
            If (EndDate Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(EndDate,String)
            End If
            If (TimeCardNumber.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(TimeCardNumber.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Ds_TimeCard.Pm_timeCardDataTable = New Ds_TimeCard.Pm_timeCardDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Rp_TimeCardBasedNumberTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Rp_TimeCardBasedNumber"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("Srl_Pm_ashkhas", "Srl_Pm_ashkhas")
            tableMapping.ColumnMappings.Add("تاریخ", "تاریخ")
            tableMapping.ColumnMappings.Add("کارکرد", "کارکرد")
            tableMapping.ColumnMappings.Add("اضافه کار اول وقت", "اضافه کار اول وقت")
            tableMapping.ColumnMappings.Add("اضافه کار آخر وقت", "اضافه کار آخر وقت")
            tableMapping.ColumnMappings.Add("اضافه کار روز تعطیل", "اضافه کار روز تعطیل")
            tableMapping.ColumnMappings.Add("مرخصی", "مرخصی")
            tableMapping.ColumnMappings.Add("ماموریت", "ماموریت")
            tableMapping.ColumnMappings.Add("محل فعالیت", "محل فعالیت")
            tableMapping.ColumnMappings.Add("کد هزینه", "کد هزینه")
            tableMapping.ColumnMappings.Add("تاخیر", "تاخیر")
            tableMapping.ColumnMappings.Add("تعجیل", "تعجیل")
            tableMapping.ColumnMappings.Add("ورود", "ورود")
            tableMapping.ColumnMappings.Add("خروج", "خروج")
            tableMapping.ColumnMappings.Add("ورود1", "ورود1")
            tableMapping.ColumnMappings.Add("خروج1", "خروج1")
            tableMapping.ColumnMappings.Add("ورود2", "ورود2")
            tableMapping.ColumnMappings.Add("خروج2", "خروج2")
            tableMapping.ColumnMappings.Add("وضعیت", "وضعیت")
            tableMapping.ColumnMappings.Add("تعطیل", "تعطیل")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.Rp_TimeCardBasedNumber"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeCardNumber", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 19, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_TimeCard.Rp_TimeCardBasedNumberDataTable, ByVal TimeCardNumber As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (TimeCardNumber.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(TimeCardNumber.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal TimeCardNumber As Global.System.Nullable(Of Long)) As Ds_TimeCard.Rp_TimeCardBasedNumberDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (TimeCardNumber.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(TimeCardNumber.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Ds_TimeCard.Rp_TimeCardBasedNumberDataTable = New Ds_TimeCard.Rp_TimeCardBasedNumberDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As Ds_TimeCard, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As Ds_TimeCard, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As Ds_TimeCard, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As Ds_TimeCard) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
