'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5420
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Ds_Lab"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Ds_Lab
    Inherits Global.System.Data.DataSet
    
    Private tablePm_Lab_Rol_ElateVorod As Pm_Lab_Rol_ElateVorodDataTable
    
    Private tablePm_Lab_Rol_SatheAhamniat As Pm_Lab_Rol_SatheAhamniatDataTable
    
    Private tablePm_Device_Sazande As Pm_Device_SazandeDataTable
    
    Private tablePm_Lab_Rol_GhatatMasrafi As Pm_Lab_Rol_GhatatMasrafiDataTable
    
    Private tablePm_Lab_Rol_TamiratView As Pm_Lab_Rol_TamiratViewDataTable
    
    Private tablePm_Lab_Rol_Tamirat_GhateMasrafi As Pm_Lab_Rol_Tamirat_GhateMasrafiDataTable
    
    Private tablePm_Lab_Rol_SharheKar As Pm_Lab_Rol_SharheKarDataTable
    
    Private tablePm_Lab_Rol_Masool_Tamir As Pm_Lab_Rol_Masool_TamirDataTable
    
    Private tablePm_Lab_Rol_Tajhiz As Pm_Lab_Rol_TajhizDataTable
    
    Private tablePm_Lab_Rol_Mahal As Pm_Lab_Rol_MahalDataTable
    
    Private tablePm_Lab_Rol_Master As Pm_Lab_Rol_MasterDataTable
    
    Private tablePm_Lab_Rol_Master_Vw As Pm_Lab_Rol_Master_VwDataTable
    
    Private relationPm_Lab_Rol_ElateVorod_Pm_Lab_Rol_SatheAhamniat As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Pm_Lab_Rol_ElateVorod")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Lab_Rol_ElateVorodDataTable(ds.Tables("Pm_Lab_Rol_ElateVorod")))
            End If
            If (Not (ds.Tables("Pm_Lab_Rol_SatheAhamniat")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Lab_Rol_SatheAhamniatDataTable(ds.Tables("Pm_Lab_Rol_SatheAhamniat")))
            End If
            If (Not (ds.Tables("Pm_Device_Sazande")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Device_SazandeDataTable(ds.Tables("Pm_Device_Sazande")))
            End If
            If (Not (ds.Tables("Pm_Lab_Rol_GhatatMasrafi")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Lab_Rol_GhatatMasrafiDataTable(ds.Tables("Pm_Lab_Rol_GhatatMasrafi")))
            End If
            If (Not (ds.Tables("Pm_Lab_Rol_TamiratView")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Lab_Rol_TamiratViewDataTable(ds.Tables("Pm_Lab_Rol_TamiratView")))
            End If
            If (Not (ds.Tables("Pm_Lab_Rol_Tamirat_GhateMasrafi")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Lab_Rol_Tamirat_GhateMasrafiDataTable(ds.Tables("Pm_Lab_Rol_Tamirat_GhateMasrafi")))
            End If
            If (Not (ds.Tables("Pm_Lab_Rol_SharheKar")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Lab_Rol_SharheKarDataTable(ds.Tables("Pm_Lab_Rol_SharheKar")))
            End If
            If (Not (ds.Tables("Pm_Lab_Rol_Masool_Tamir")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Lab_Rol_Masool_TamirDataTable(ds.Tables("Pm_Lab_Rol_Masool_Tamir")))
            End If
            If (Not (ds.Tables("Pm_Lab_Rol_Tajhiz")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Lab_Rol_TajhizDataTable(ds.Tables("Pm_Lab_Rol_Tajhiz")))
            End If
            If (Not (ds.Tables("Pm_Lab_Rol_Mahal")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Lab_Rol_MahalDataTable(ds.Tables("Pm_Lab_Rol_Mahal")))
            End If
            If (Not (ds.Tables("Pm_Lab_Rol_Master")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Lab_Rol_MasterDataTable(ds.Tables("Pm_Lab_Rol_Master")))
            End If
            If (Not (ds.Tables("Pm_Lab_Rol_Master_Vw")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Lab_Rol_Master_VwDataTable(ds.Tables("Pm_Lab_Rol_Master_Vw")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Lab_Rol_ElateVorod() As Pm_Lab_Rol_ElateVorodDataTable
        Get
            Return Me.tablePm_Lab_Rol_ElateVorod
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Lab_Rol_SatheAhamniat() As Pm_Lab_Rol_SatheAhamniatDataTable
        Get
            Return Me.tablePm_Lab_Rol_SatheAhamniat
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Device_Sazande() As Pm_Device_SazandeDataTable
        Get
            Return Me.tablePm_Device_Sazande
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Lab_Rol_GhatatMasrafi() As Pm_Lab_Rol_GhatatMasrafiDataTable
        Get
            Return Me.tablePm_Lab_Rol_GhatatMasrafi
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Lab_Rol_TamiratView() As Pm_Lab_Rol_TamiratViewDataTable
        Get
            Return Me.tablePm_Lab_Rol_TamiratView
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Lab_Rol_Tamirat_GhateMasrafi() As Pm_Lab_Rol_Tamirat_GhateMasrafiDataTable
        Get
            Return Me.tablePm_Lab_Rol_Tamirat_GhateMasrafi
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Lab_Rol_SharheKar() As Pm_Lab_Rol_SharheKarDataTable
        Get
            Return Me.tablePm_Lab_Rol_SharheKar
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Lab_Rol_Masool_Tamir() As Pm_Lab_Rol_Masool_TamirDataTable
        Get
            Return Me.tablePm_Lab_Rol_Masool_Tamir
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Lab_Rol_Tajhiz() As Pm_Lab_Rol_TajhizDataTable
        Get
            Return Me.tablePm_Lab_Rol_Tajhiz
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Lab_Rol_Mahal() As Pm_Lab_Rol_MahalDataTable
        Get
            Return Me.tablePm_Lab_Rol_Mahal
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Lab_Rol_Master() As Pm_Lab_Rol_MasterDataTable
        Get
            Return Me.tablePm_Lab_Rol_Master
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pm_Lab_Rol_Master_Vw() As Pm_Lab_Rol_Master_VwDataTable
        Get
            Return Me.tablePm_Lab_Rol_Master_Vw
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Ds_Lab = CType(MyBase.Clone,Ds_Lab)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Pm_Lab_Rol_ElateVorod")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Lab_Rol_ElateVorodDataTable(ds.Tables("Pm_Lab_Rol_ElateVorod")))
            End If
            If (Not (ds.Tables("Pm_Lab_Rol_SatheAhamniat")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Lab_Rol_SatheAhamniatDataTable(ds.Tables("Pm_Lab_Rol_SatheAhamniat")))
            End If
            If (Not (ds.Tables("Pm_Device_Sazande")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Device_SazandeDataTable(ds.Tables("Pm_Device_Sazande")))
            End If
            If (Not (ds.Tables("Pm_Lab_Rol_GhatatMasrafi")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Lab_Rol_GhatatMasrafiDataTable(ds.Tables("Pm_Lab_Rol_GhatatMasrafi")))
            End If
            If (Not (ds.Tables("Pm_Lab_Rol_TamiratView")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Lab_Rol_TamiratViewDataTable(ds.Tables("Pm_Lab_Rol_TamiratView")))
            End If
            If (Not (ds.Tables("Pm_Lab_Rol_Tamirat_GhateMasrafi")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Lab_Rol_Tamirat_GhateMasrafiDataTable(ds.Tables("Pm_Lab_Rol_Tamirat_GhateMasrafi")))
            End If
            If (Not (ds.Tables("Pm_Lab_Rol_SharheKar")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Lab_Rol_SharheKarDataTable(ds.Tables("Pm_Lab_Rol_SharheKar")))
            End If
            If (Not (ds.Tables("Pm_Lab_Rol_Masool_Tamir")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Lab_Rol_Masool_TamirDataTable(ds.Tables("Pm_Lab_Rol_Masool_Tamir")))
            End If
            If (Not (ds.Tables("Pm_Lab_Rol_Tajhiz")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Lab_Rol_TajhizDataTable(ds.Tables("Pm_Lab_Rol_Tajhiz")))
            End If
            If (Not (ds.Tables("Pm_Lab_Rol_Mahal")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Lab_Rol_MahalDataTable(ds.Tables("Pm_Lab_Rol_Mahal")))
            End If
            If (Not (ds.Tables("Pm_Lab_Rol_Master")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Lab_Rol_MasterDataTable(ds.Tables("Pm_Lab_Rol_Master")))
            End If
            If (Not (ds.Tables("Pm_Lab_Rol_Master_Vw")) Is Nothing) Then
                MyBase.Tables.Add(New Pm_Lab_Rol_Master_VwDataTable(ds.Tables("Pm_Lab_Rol_Master_Vw")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePm_Lab_Rol_ElateVorod = CType(MyBase.Tables("Pm_Lab_Rol_ElateVorod"),Pm_Lab_Rol_ElateVorodDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Lab_Rol_ElateVorod) Is Nothing) Then
                Me.tablePm_Lab_Rol_ElateVorod.InitVars
            End If
        End If
        Me.tablePm_Lab_Rol_SatheAhamniat = CType(MyBase.Tables("Pm_Lab_Rol_SatheAhamniat"),Pm_Lab_Rol_SatheAhamniatDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Lab_Rol_SatheAhamniat) Is Nothing) Then
                Me.tablePm_Lab_Rol_SatheAhamniat.InitVars
            End If
        End If
        Me.tablePm_Device_Sazande = CType(MyBase.Tables("Pm_Device_Sazande"),Pm_Device_SazandeDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Device_Sazande) Is Nothing) Then
                Me.tablePm_Device_Sazande.InitVars
            End If
        End If
        Me.tablePm_Lab_Rol_GhatatMasrafi = CType(MyBase.Tables("Pm_Lab_Rol_GhatatMasrafi"),Pm_Lab_Rol_GhatatMasrafiDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Lab_Rol_GhatatMasrafi) Is Nothing) Then
                Me.tablePm_Lab_Rol_GhatatMasrafi.InitVars
            End If
        End If
        Me.tablePm_Lab_Rol_TamiratView = CType(MyBase.Tables("Pm_Lab_Rol_TamiratView"),Pm_Lab_Rol_TamiratViewDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Lab_Rol_TamiratView) Is Nothing) Then
                Me.tablePm_Lab_Rol_TamiratView.InitVars
            End If
        End If
        Me.tablePm_Lab_Rol_Tamirat_GhateMasrafi = CType(MyBase.Tables("Pm_Lab_Rol_Tamirat_GhateMasrafi"),Pm_Lab_Rol_Tamirat_GhateMasrafiDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Lab_Rol_Tamirat_GhateMasrafi) Is Nothing) Then
                Me.tablePm_Lab_Rol_Tamirat_GhateMasrafi.InitVars
            End If
        End If
        Me.tablePm_Lab_Rol_SharheKar = CType(MyBase.Tables("Pm_Lab_Rol_SharheKar"),Pm_Lab_Rol_SharheKarDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Lab_Rol_SharheKar) Is Nothing) Then
                Me.tablePm_Lab_Rol_SharheKar.InitVars
            End If
        End If
        Me.tablePm_Lab_Rol_Masool_Tamir = CType(MyBase.Tables("Pm_Lab_Rol_Masool_Tamir"),Pm_Lab_Rol_Masool_TamirDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Lab_Rol_Masool_Tamir) Is Nothing) Then
                Me.tablePm_Lab_Rol_Masool_Tamir.InitVars
            End If
        End If
        Me.tablePm_Lab_Rol_Tajhiz = CType(MyBase.Tables("Pm_Lab_Rol_Tajhiz"),Pm_Lab_Rol_TajhizDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Lab_Rol_Tajhiz) Is Nothing) Then
                Me.tablePm_Lab_Rol_Tajhiz.InitVars
            End If
        End If
        Me.tablePm_Lab_Rol_Mahal = CType(MyBase.Tables("Pm_Lab_Rol_Mahal"),Pm_Lab_Rol_MahalDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Lab_Rol_Mahal) Is Nothing) Then
                Me.tablePm_Lab_Rol_Mahal.InitVars
            End If
        End If
        Me.tablePm_Lab_Rol_Master = CType(MyBase.Tables("Pm_Lab_Rol_Master"),Pm_Lab_Rol_MasterDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Lab_Rol_Master) Is Nothing) Then
                Me.tablePm_Lab_Rol_Master.InitVars
            End If
        End If
        Me.tablePm_Lab_Rol_Master_Vw = CType(MyBase.Tables("Pm_Lab_Rol_Master_Vw"),Pm_Lab_Rol_Master_VwDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePm_Lab_Rol_Master_Vw) Is Nothing) Then
                Me.tablePm_Lab_Rol_Master_Vw.InitVars
            End If
        End If
        Me.relationPm_Lab_Rol_ElateVorod_Pm_Lab_Rol_SatheAhamniat = Me.Relations("Pm_Lab_Rol_ElateVorod_Pm_Lab_Rol_SatheAhamniat")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Ds_Lab"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Ds_Lab.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePm_Lab_Rol_ElateVorod = New Pm_Lab_Rol_ElateVorodDataTable
        MyBase.Tables.Add(Me.tablePm_Lab_Rol_ElateVorod)
        Me.tablePm_Lab_Rol_SatheAhamniat = New Pm_Lab_Rol_SatheAhamniatDataTable
        MyBase.Tables.Add(Me.tablePm_Lab_Rol_SatheAhamniat)
        Me.tablePm_Device_Sazande = New Pm_Device_SazandeDataTable
        MyBase.Tables.Add(Me.tablePm_Device_Sazande)
        Me.tablePm_Lab_Rol_GhatatMasrafi = New Pm_Lab_Rol_GhatatMasrafiDataTable
        MyBase.Tables.Add(Me.tablePm_Lab_Rol_GhatatMasrafi)
        Me.tablePm_Lab_Rol_TamiratView = New Pm_Lab_Rol_TamiratViewDataTable
        MyBase.Tables.Add(Me.tablePm_Lab_Rol_TamiratView)
        Me.tablePm_Lab_Rol_Tamirat_GhateMasrafi = New Pm_Lab_Rol_Tamirat_GhateMasrafiDataTable
        MyBase.Tables.Add(Me.tablePm_Lab_Rol_Tamirat_GhateMasrafi)
        Me.tablePm_Lab_Rol_SharheKar = New Pm_Lab_Rol_SharheKarDataTable
        MyBase.Tables.Add(Me.tablePm_Lab_Rol_SharheKar)
        Me.tablePm_Lab_Rol_Masool_Tamir = New Pm_Lab_Rol_Masool_TamirDataTable
        MyBase.Tables.Add(Me.tablePm_Lab_Rol_Masool_Tamir)
        Me.tablePm_Lab_Rol_Tajhiz = New Pm_Lab_Rol_TajhizDataTable
        MyBase.Tables.Add(Me.tablePm_Lab_Rol_Tajhiz)
        Me.tablePm_Lab_Rol_Mahal = New Pm_Lab_Rol_MahalDataTable
        MyBase.Tables.Add(Me.tablePm_Lab_Rol_Mahal)
        Me.tablePm_Lab_Rol_Master = New Pm_Lab_Rol_MasterDataTable
        MyBase.Tables.Add(Me.tablePm_Lab_Rol_Master)
        Me.tablePm_Lab_Rol_Master_Vw = New Pm_Lab_Rol_Master_VwDataTable
        MyBase.Tables.Add(Me.tablePm_Lab_Rol_Master_Vw)
        Me.relationPm_Lab_Rol_ElateVorod_Pm_Lab_Rol_SatheAhamniat = New Global.System.Data.DataRelation("Pm_Lab_Rol_ElateVorod_Pm_Lab_Rol_SatheAhamniat", New Global.System.Data.DataColumn() {Me.tablePm_Lab_Rol_ElateVorod.SrlColumn}, New Global.System.Data.DataColumn() {Me.tablePm_Lab_Rol_SatheAhamniat.SrlColumn}, false)
        Me.Relations.Add(Me.relationPm_Lab_Rol_ElateVorod_Pm_Lab_Rol_SatheAhamniat)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Lab_Rol_ElateVorod() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Lab_Rol_SatheAhamniat() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Device_Sazande() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Lab_Rol_GhatatMasrafi() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Lab_Rol_TamiratView() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Lab_Rol_Tamirat_GhateMasrafi() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Lab_Rol_SharheKar() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Lab_Rol_Masool_Tamir() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Lab_Rol_Tajhiz() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Lab_Rol_Mahal() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Lab_Rol_Master() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePm_Lab_Rol_Master_Vw() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Ds_Lab = New Ds_Lab
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub Pm_Lab_Rol_ElateVorodRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Lab_Rol_ElateVorodRowChangeEvent)
    
    Public Delegate Sub Pm_Lab_Rol_SatheAhamniatRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Lab_Rol_SatheAhamniatRowChangeEvent)
    
    Public Delegate Sub Pm_Device_SazandeRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Device_SazandeRowChangeEvent)
    
    Public Delegate Sub Pm_Lab_Rol_GhatatMasrafiRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Lab_Rol_GhatatMasrafiRowChangeEvent)
    
    Public Delegate Sub Pm_Lab_Rol_TamiratViewRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Lab_Rol_TamiratViewRowChangeEvent)
    
    Public Delegate Sub Pm_Lab_Rol_Tamirat_GhateMasrafiRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Lab_Rol_Tamirat_GhateMasrafiRowChangeEvent)
    
    Public Delegate Sub Pm_Lab_Rol_SharheKarRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Lab_Rol_SharheKarRowChangeEvent)
    
    Public Delegate Sub Pm_Lab_Rol_Masool_TamirRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Lab_Rol_Masool_TamirRowChangeEvent)
    
    Public Delegate Sub Pm_Lab_Rol_TajhizRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Lab_Rol_TajhizRowChangeEvent)
    
    Public Delegate Sub Pm_Lab_Rol_MahalRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Lab_Rol_MahalRowChangeEvent)
    
    Public Delegate Sub Pm_Lab_Rol_MasterRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Lab_Rol_MasterRowChangeEvent)
    
    Public Delegate Sub Pm_Lab_Rol_Master_VwRowChangeEventHandler(ByVal sender As Object, ByVal e As Pm_Lab_Rol_Master_VwRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Lab_Rol_ElateVorodDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Lab_Rol_ElateVorodRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnعلت_ورود As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Lab_Rol_ElateVorod"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property علت_ورودColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnعلت_ورود
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Lab_Rol_ElateVorodRow
            Get
                Return CType(Me.Rows(index),Pm_Lab_Rol_ElateVorodRow)
            End Get
        End Property
        
        Public Event Pm_Lab_Rol_ElateVorodRowChanging As Pm_Lab_Rol_ElateVorodRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_ElateVorodRowChanged As Pm_Lab_Rol_ElateVorodRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_ElateVorodRowDeleting As Pm_Lab_Rol_ElateVorodRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_ElateVorodRowDeleted As Pm_Lab_Rol_ElateVorodRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Lab_Rol_ElateVorodRow(ByVal row As Pm_Lab_Rol_ElateVorodRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Lab_Rol_ElateVorodRow(ByVal Srl As Integer, ByVal علت_ورود As String) As Pm_Lab_Rol_ElateVorodRow
            Dim rowPm_Lab_Rol_ElateVorodRow As Pm_Lab_Rol_ElateVorodRow = CType(Me.NewRow,Pm_Lab_Rol_ElateVorodRow)
            Dim columnValuesArray() As Object = New Object() {Srl, علت_ورود}
            rowPm_Lab_Rol_ElateVorodRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Lab_Rol_ElateVorodRow)
            Return rowPm_Lab_Rol_ElateVorodRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As Pm_Lab_Rol_ElateVorodRow
            Return CType(Me.Rows.Find(New Object() {Srl}),Pm_Lab_Rol_ElateVorodRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Lab_Rol_ElateVorodDataTable = CType(MyBase.Clone,Pm_Lab_Rol_ElateVorodDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Lab_Rol_ElateVorodDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnعلت_ورود = MyBase.Columns("علت ورود")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnعلت_ورود = New Global.System.Data.DataColumn("علت ورود", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnعلت_ورود)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.Unique = true
            Me.columnعلت_ورود.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Lab_Rol_ElateVorodRow() As Pm_Lab_Rol_ElateVorodRow
            Return CType(Me.NewRow,Pm_Lab_Rol_ElateVorodRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Lab_Rol_ElateVorodRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Lab_Rol_ElateVorodRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Lab_Rol_ElateVorodRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_ElateVorodRowChanged(Me, New Pm_Lab_Rol_ElateVorodRowChangeEvent(CType(e.Row,Pm_Lab_Rol_ElateVorodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Lab_Rol_ElateVorodRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_ElateVorodRowChanging(Me, New Pm_Lab_Rol_ElateVorodRowChangeEvent(CType(e.Row,Pm_Lab_Rol_ElateVorodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Lab_Rol_ElateVorodRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_ElateVorodRowDeleted(Me, New Pm_Lab_Rol_ElateVorodRowChangeEvent(CType(e.Row,Pm_Lab_Rol_ElateVorodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Lab_Rol_ElateVorodRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_ElateVorodRowDeleting(Me, New Pm_Lab_Rol_ElateVorodRowChangeEvent(CType(e.Row,Pm_Lab_Rol_ElateVorodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Lab_Rol_ElateVorodRow(ByVal row As Pm_Lab_Rol_ElateVorodRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Lab = New Ds_Lab
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Lab_Rol_ElateVorodDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Lab_Rol_SatheAhamniatDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Lab_Rol_SatheAhamniatRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnسطح_اهمیت As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Lab_Rol_SatheAhamniat"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property سطح_اهمیتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnسطح_اهمیت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Lab_Rol_SatheAhamniatRow
            Get
                Return CType(Me.Rows(index),Pm_Lab_Rol_SatheAhamniatRow)
            End Get
        End Property
        
        Public Event Pm_Lab_Rol_SatheAhamniatRowChanging As Pm_Lab_Rol_SatheAhamniatRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_SatheAhamniatRowChanged As Pm_Lab_Rol_SatheAhamniatRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_SatheAhamniatRowDeleting As Pm_Lab_Rol_SatheAhamniatRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_SatheAhamniatRowDeleted As Pm_Lab_Rol_SatheAhamniatRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Lab_Rol_SatheAhamniatRow(ByVal row As Pm_Lab_Rol_SatheAhamniatRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Lab_Rol_SatheAhamniatRow(ByVal parentPm_Lab_Rol_ElateVorodRowByPm_Lab_Rol_ElateVorod_Pm_Lab_Rol_SatheAhamniat As Pm_Lab_Rol_ElateVorodRow, ByVal سطح_اهمیت As String) As Pm_Lab_Rol_SatheAhamniatRow
            Dim rowPm_Lab_Rol_SatheAhamniatRow As Pm_Lab_Rol_SatheAhamniatRow = CType(Me.NewRow,Pm_Lab_Rol_SatheAhamniatRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, سطح_اهمیت}
            If (Not (parentPm_Lab_Rol_ElateVorodRowByPm_Lab_Rol_ElateVorod_Pm_Lab_Rol_SatheAhamniat) Is Nothing) Then
                columnValuesArray(0) = parentPm_Lab_Rol_ElateVorodRowByPm_Lab_Rol_ElateVorod_Pm_Lab_Rol_SatheAhamniat(0)
            End If
            rowPm_Lab_Rol_SatheAhamniatRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Lab_Rol_SatheAhamniatRow)
            Return rowPm_Lab_Rol_SatheAhamniatRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As Pm_Lab_Rol_SatheAhamniatRow
            Return CType(Me.Rows.Find(New Object() {Srl}),Pm_Lab_Rol_SatheAhamniatRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Lab_Rol_SatheAhamniatDataTable = CType(MyBase.Clone,Pm_Lab_Rol_SatheAhamniatDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Lab_Rol_SatheAhamniatDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnسطح_اهمیت = MyBase.Columns("سطح اهمیت")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnسطح_اهمیت = New Global.System.Data.DataColumn("سطح اهمیت", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnسطح_اهمیت)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.Unique = true
            Me.columnسطح_اهمیت.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Lab_Rol_SatheAhamniatRow() As Pm_Lab_Rol_SatheAhamniatRow
            Return CType(Me.NewRow,Pm_Lab_Rol_SatheAhamniatRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Lab_Rol_SatheAhamniatRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Lab_Rol_SatheAhamniatRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Lab_Rol_SatheAhamniatRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_SatheAhamniatRowChanged(Me, New Pm_Lab_Rol_SatheAhamniatRowChangeEvent(CType(e.Row,Pm_Lab_Rol_SatheAhamniatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Lab_Rol_SatheAhamniatRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_SatheAhamniatRowChanging(Me, New Pm_Lab_Rol_SatheAhamniatRowChangeEvent(CType(e.Row,Pm_Lab_Rol_SatheAhamniatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Lab_Rol_SatheAhamniatRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_SatheAhamniatRowDeleted(Me, New Pm_Lab_Rol_SatheAhamniatRowChangeEvent(CType(e.Row,Pm_Lab_Rol_SatheAhamniatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Lab_Rol_SatheAhamniatRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_SatheAhamniatRowDeleting(Me, New Pm_Lab_Rol_SatheAhamniatRowChangeEvent(CType(e.Row,Pm_Lab_Rol_SatheAhamniatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Lab_Rol_SatheAhamniatRow(ByVal row As Pm_Lab_Rol_SatheAhamniatRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Lab = New Ds_Lab
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Lab_Rol_SatheAhamniatDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Device_SazandeDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Device_SazandeRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnسازندگان As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Device_Sazande"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property سازندگانColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnسازندگان
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Device_SazandeRow
            Get
                Return CType(Me.Rows(index),Pm_Device_SazandeRow)
            End Get
        End Property
        
        Public Event Pm_Device_SazandeRowChanging As Pm_Device_SazandeRowChangeEventHandler
        
        Public Event Pm_Device_SazandeRowChanged As Pm_Device_SazandeRowChangeEventHandler
        
        Public Event Pm_Device_SazandeRowDeleting As Pm_Device_SazandeRowChangeEventHandler
        
        Public Event Pm_Device_SazandeRowDeleted As Pm_Device_SazandeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Device_SazandeRow(ByVal row As Pm_Device_SazandeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Device_SazandeRow(ByVal Srl As Integer, ByVal سازندگان As String) As Pm_Device_SazandeRow
            Dim rowPm_Device_SazandeRow As Pm_Device_SazandeRow = CType(Me.NewRow,Pm_Device_SazandeRow)
            Dim columnValuesArray() As Object = New Object() {Srl, سازندگان}
            rowPm_Device_SazandeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Device_SazandeRow)
            Return rowPm_Device_SazandeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As Pm_Device_SazandeRow
            Return CType(Me.Rows.Find(New Object() {Srl}),Pm_Device_SazandeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Device_SazandeDataTable = CType(MyBase.Clone,Pm_Device_SazandeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Device_SazandeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnسازندگان = MyBase.Columns("سازندگان")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnسازندگان = New Global.System.Data.DataColumn("سازندگان", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnسازندگان)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.Unique = true
            Me.columnسازندگان.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Device_SazandeRow() As Pm_Device_SazandeRow
            Return CType(Me.NewRow,Pm_Device_SazandeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Device_SazandeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Device_SazandeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Device_SazandeRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Device_SazandeRowChanged(Me, New Pm_Device_SazandeRowChangeEvent(CType(e.Row,Pm_Device_SazandeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Device_SazandeRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Device_SazandeRowChanging(Me, New Pm_Device_SazandeRowChangeEvent(CType(e.Row,Pm_Device_SazandeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Device_SazandeRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Device_SazandeRowDeleted(Me, New Pm_Device_SazandeRowChangeEvent(CType(e.Row,Pm_Device_SazandeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Device_SazandeRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Device_SazandeRowDeleting(Me, New Pm_Device_SazandeRowChangeEvent(CType(e.Row,Pm_Device_SazandeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Device_SazandeRow(ByVal row As Pm_Device_SazandeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Lab = New Ds_Lab
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Device_SazandeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Lab_Rol_GhatatMasrafiDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Lab_Rol_GhatatMasrafiRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnقطعات_مصرفی As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Lab_Rol_GhatatMasrafi"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property قطعات_مصرفیColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnقطعات_مصرفی
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Lab_Rol_GhatatMasrafiRow
            Get
                Return CType(Me.Rows(index),Pm_Lab_Rol_GhatatMasrafiRow)
            End Get
        End Property
        
        Public Event Pm_Lab_Rol_GhatatMasrafiRowChanging As Pm_Lab_Rol_GhatatMasrafiRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_GhatatMasrafiRowChanged As Pm_Lab_Rol_GhatatMasrafiRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_GhatatMasrafiRowDeleting As Pm_Lab_Rol_GhatatMasrafiRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_GhatatMasrafiRowDeleted As Pm_Lab_Rol_GhatatMasrafiRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Lab_Rol_GhatatMasrafiRow(ByVal row As Pm_Lab_Rol_GhatatMasrafiRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Lab_Rol_GhatatMasrafiRow(ByVal قطعات_مصرفی As String) As Pm_Lab_Rol_GhatatMasrafiRow
            Dim rowPm_Lab_Rol_GhatatMasrafiRow As Pm_Lab_Rol_GhatatMasrafiRow = CType(Me.NewRow,Pm_Lab_Rol_GhatatMasrafiRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, قطعات_مصرفی}
            rowPm_Lab_Rol_GhatatMasrafiRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Lab_Rol_GhatatMasrafiRow)
            Return rowPm_Lab_Rol_GhatatMasrafiRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As Pm_Lab_Rol_GhatatMasrafiRow
            Return CType(Me.Rows.Find(New Object() {Srl}),Pm_Lab_Rol_GhatatMasrafiRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Lab_Rol_GhatatMasrafiDataTable = CType(MyBase.Clone,Pm_Lab_Rol_GhatatMasrafiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Lab_Rol_GhatatMasrafiDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnقطعات_مصرفی = MyBase.Columns("قطعات مصرفی")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnقطعات_مصرفی = New Global.System.Data.DataColumn("قطعات مصرفی", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnقطعات_مصرفی)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnSrl.AutoIncrement = true
            Me.columnSrl.AutoIncrementSeed = -1
            Me.columnSrl.AutoIncrementStep = -1
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.ReadOnly = true
            Me.columnSrl.Unique = true
            Me.columnقطعات_مصرفی.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Lab_Rol_GhatatMasrafiRow() As Pm_Lab_Rol_GhatatMasrafiRow
            Return CType(Me.NewRow,Pm_Lab_Rol_GhatatMasrafiRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Lab_Rol_GhatatMasrafiRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Lab_Rol_GhatatMasrafiRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Lab_Rol_GhatatMasrafiRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_GhatatMasrafiRowChanged(Me, New Pm_Lab_Rol_GhatatMasrafiRowChangeEvent(CType(e.Row,Pm_Lab_Rol_GhatatMasrafiRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Lab_Rol_GhatatMasrafiRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_GhatatMasrafiRowChanging(Me, New Pm_Lab_Rol_GhatatMasrafiRowChangeEvent(CType(e.Row,Pm_Lab_Rol_GhatatMasrafiRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Lab_Rol_GhatatMasrafiRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_GhatatMasrafiRowDeleted(Me, New Pm_Lab_Rol_GhatatMasrafiRowChangeEvent(CType(e.Row,Pm_Lab_Rol_GhatatMasrafiRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Lab_Rol_GhatatMasrafiRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_GhatatMasrafiRowDeleting(Me, New Pm_Lab_Rol_GhatatMasrafiRowChangeEvent(CType(e.Row,Pm_Lab_Rol_GhatatMasrafiRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Lab_Rol_GhatatMasrafiRow(ByVal row As Pm_Lab_Rol_GhatatMasrafiRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Lab = New Ds_Lab
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Lab_Rol_GhatatMasrafiDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Lab_Rol_TamiratViewDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Lab_Rol_TamiratViewRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnشماره As Global.System.Data.DataColumn
        
        Private columnنام_قطعه As Global.System.Data.DataColumn
        
        Private columnپست As Global.System.Data.DataColumn
        
        Private columnسطح_اهمیت As Global.System.Data.DataColumn
        
        Private columnعلت_ورود As Global.System.Data.DataColumn
        
        Private columnتاریخ_تعمیر As Global.System.Data.DataColumn
        
        Private columnتاریخ_تحویل As Global.System.Data.DataColumn
        
        Private columnتاریخ_ورود As Global.System.Data.DataColumn
        
        Private columnبازه_تعمیر As Global.System.Data.DataColumn
        
        Private columnبازه_تحویل As Global.System.Data.DataColumn
        
        Private columnSrl_Pm_Hadese_KhesaratDevice As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Lab_Rol_TamiratView"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شمارهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشماره
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نام_قطعهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام_قطعه
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property پستColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnپست
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property سطح_اهمیتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnسطح_اهمیت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property علت_ورودColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnعلت_ورود
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاریخ_تعمیرColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاریخ_تعمیر
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاریخ_تحویلColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاریخ_تحویل
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاریخ_ورودColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاریخ_ورود
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property بازه_تعمیرColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnبازه_تعمیر
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property بازه_تحویلColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnبازه_تحویل
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_Pm_Hadese_KhesaratDeviceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_Pm_Hadese_KhesaratDevice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Lab_Rol_TamiratViewRow
            Get
                Return CType(Me.Rows(index),Pm_Lab_Rol_TamiratViewRow)
            End Get
        End Property
        
        Public Event Pm_Lab_Rol_TamiratViewRowChanging As Pm_Lab_Rol_TamiratViewRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_TamiratViewRowChanged As Pm_Lab_Rol_TamiratViewRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_TamiratViewRowDeleting As Pm_Lab_Rol_TamiratViewRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_TamiratViewRowDeleted As Pm_Lab_Rol_TamiratViewRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Lab_Rol_TamiratViewRow(ByVal row As Pm_Lab_Rol_TamiratViewRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Lab_Rol_TamiratViewRow(ByVal شماره As String, ByVal نام_قطعه As String, ByVal پست As String, ByVal سطح_اهمیت As String, ByVal علت_ورود As String, ByVal تاریخ_تعمیر As String, ByVal تاریخ_تحویل As String, ByVal تاریخ_ورود As String, ByVal بازه_تعمیر As String, ByVal بازه_تحویل As String, ByVal Srl_Pm_Hadese_KhesaratDevice As Integer) As Pm_Lab_Rol_TamiratViewRow
            Dim rowPm_Lab_Rol_TamiratViewRow As Pm_Lab_Rol_TamiratViewRow = CType(Me.NewRow,Pm_Lab_Rol_TamiratViewRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, شماره, نام_قطعه, پست, سطح_اهمیت, علت_ورود, تاریخ_تعمیر, تاریخ_تحویل, تاریخ_ورود, بازه_تعمیر, بازه_تحویل, Srl_Pm_Hadese_KhesaratDevice}
            rowPm_Lab_Rol_TamiratViewRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Lab_Rol_TamiratViewRow)
            Return rowPm_Lab_Rol_TamiratViewRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As Pm_Lab_Rol_TamiratViewRow
            Return CType(Me.Rows.Find(New Object() {Srl}),Pm_Lab_Rol_TamiratViewRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Lab_Rol_TamiratViewDataTable = CType(MyBase.Clone,Pm_Lab_Rol_TamiratViewDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Lab_Rol_TamiratViewDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnشماره = MyBase.Columns("شماره")
            Me.columnنام_قطعه = MyBase.Columns("نام قطعه")
            Me.columnپست = MyBase.Columns("پست")
            Me.columnسطح_اهمیت = MyBase.Columns("سطح اهمیت")
            Me.columnعلت_ورود = MyBase.Columns("علت ورود")
            Me.columnتاریخ_تعمیر = MyBase.Columns("تاریخ تعمیر")
            Me.columnتاریخ_تحویل = MyBase.Columns("تاریخ تحویل")
            Me.columnتاریخ_ورود = MyBase.Columns("تاریخ ورود")
            Me.columnبازه_تعمیر = MyBase.Columns("بازه تعمیر")
            Me.columnبازه_تحویل = MyBase.Columns("بازه تحویل")
            Me.columnSrl_Pm_Hadese_KhesaratDevice = MyBase.Columns("Srl_Pm_Hadese_KhesaratDevice")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnشماره = New Global.System.Data.DataColumn("شماره", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشماره)
            Me.columnنام_قطعه = New Global.System.Data.DataColumn("نام قطعه", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام_قطعه)
            Me.columnپست = New Global.System.Data.DataColumn("پست", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnپست)
            Me.columnسطح_اهمیت = New Global.System.Data.DataColumn("سطح اهمیت", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnسطح_اهمیت)
            Me.columnعلت_ورود = New Global.System.Data.DataColumn("علت ورود", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnعلت_ورود)
            Me.columnتاریخ_تعمیر = New Global.System.Data.DataColumn("تاریخ تعمیر", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاریخ_تعمیر)
            Me.columnتاریخ_تحویل = New Global.System.Data.DataColumn("تاریخ تحویل", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاریخ_تحویل)
            Me.columnتاریخ_ورود = New Global.System.Data.DataColumn("تاریخ ورود", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاریخ_ورود)
            Me.columnبازه_تعمیر = New Global.System.Data.DataColumn("بازه تعمیر", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnبازه_تعمیر)
            Me.columnبازه_تحویل = New Global.System.Data.DataColumn("بازه تحویل", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnبازه_تحویل)
            Me.columnSrl_Pm_Hadese_KhesaratDevice = New Global.System.Data.DataColumn("Srl_Pm_Hadese_KhesaratDevice", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_Pm_Hadese_KhesaratDevice)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnSrl.AutoIncrement = true
            Me.columnSrl.AutoIncrementSeed = -1
            Me.columnSrl.AutoIncrementStep = -1
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.ReadOnly = true
            Me.columnSrl.Unique = true
            Me.columnشماره.MaxLength = 50
            Me.columnنام_قطعه.MaxLength = 2147483647
            Me.columnپست.MaxLength = 50
            Me.columnسطح_اهمیت.MaxLength = 50
            Me.columnعلت_ورود.MaxLength = 50
            Me.columnتاریخ_تعمیر.MaxLength = 10
            Me.columnتاریخ_تحویل.MaxLength = 10
            Me.columnتاریخ_ورود.MaxLength = 10
            Me.columnبازه_تعمیر.MaxLength = 10
            Me.columnبازه_تحویل.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Lab_Rol_TamiratViewRow() As Pm_Lab_Rol_TamiratViewRow
            Return CType(Me.NewRow,Pm_Lab_Rol_TamiratViewRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Lab_Rol_TamiratViewRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Lab_Rol_TamiratViewRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Lab_Rol_TamiratViewRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_TamiratViewRowChanged(Me, New Pm_Lab_Rol_TamiratViewRowChangeEvent(CType(e.Row,Pm_Lab_Rol_TamiratViewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Lab_Rol_TamiratViewRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_TamiratViewRowChanging(Me, New Pm_Lab_Rol_TamiratViewRowChangeEvent(CType(e.Row,Pm_Lab_Rol_TamiratViewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Lab_Rol_TamiratViewRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_TamiratViewRowDeleted(Me, New Pm_Lab_Rol_TamiratViewRowChangeEvent(CType(e.Row,Pm_Lab_Rol_TamiratViewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Lab_Rol_TamiratViewRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_TamiratViewRowDeleting(Me, New Pm_Lab_Rol_TamiratViewRowChangeEvent(CType(e.Row,Pm_Lab_Rol_TamiratViewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Lab_Rol_TamiratViewRow(ByVal row As Pm_Lab_Rol_TamiratViewRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Lab = New Ds_Lab
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Lab_Rol_TamiratViewDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Lab_Rol_Tamirat_GhateMasrafiDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Lab_Rol_Tamirat_GhateMasrafiRow)
        
        Private columnPm_Lab_Rol_GhatatMasrafi As Global.System.Data.DataColumn
        
        Private columnقطعه_مصرفی As Global.System.Data.DataColumn
        
        Private columnتعداد As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Lab_Rol_Tamirat_GhateMasrafi"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pm_Lab_Rol_GhatatMasrafiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPm_Lab_Rol_GhatatMasrafi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property قطعه_مصرفیColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnقطعه_مصرفی
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تعدادColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتعداد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Lab_Rol_Tamirat_GhateMasrafiRow
            Get
                Return CType(Me.Rows(index),Pm_Lab_Rol_Tamirat_GhateMasrafiRow)
            End Get
        End Property
        
        Public Event Pm_Lab_Rol_Tamirat_GhateMasrafiRowChanging As Pm_Lab_Rol_Tamirat_GhateMasrafiRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_Tamirat_GhateMasrafiRowChanged As Pm_Lab_Rol_Tamirat_GhateMasrafiRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_Tamirat_GhateMasrafiRowDeleting As Pm_Lab_Rol_Tamirat_GhateMasrafiRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_Tamirat_GhateMasrafiRowDeleted As Pm_Lab_Rol_Tamirat_GhateMasrafiRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Lab_Rol_Tamirat_GhateMasrafiRow(ByVal row As Pm_Lab_Rol_Tamirat_GhateMasrafiRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Lab_Rol_Tamirat_GhateMasrafiRow(ByVal Pm_Lab_Rol_GhatatMasrafi As Integer, ByVal قطعه_مصرفی As String, ByVal تعداد As Integer) As Pm_Lab_Rol_Tamirat_GhateMasrafiRow
            Dim rowPm_Lab_Rol_Tamirat_GhateMasrafiRow As Pm_Lab_Rol_Tamirat_GhateMasrafiRow = CType(Me.NewRow,Pm_Lab_Rol_Tamirat_GhateMasrafiRow)
            Dim columnValuesArray() As Object = New Object() {Pm_Lab_Rol_GhatatMasrafi, قطعه_مصرفی, تعداد}
            rowPm_Lab_Rol_Tamirat_GhateMasrafiRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Lab_Rol_Tamirat_GhateMasrafiRow)
            Return rowPm_Lab_Rol_Tamirat_GhateMasrafiRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Lab_Rol_Tamirat_GhateMasrafiDataTable = CType(MyBase.Clone,Pm_Lab_Rol_Tamirat_GhateMasrafiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Lab_Rol_Tamirat_GhateMasrafiDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPm_Lab_Rol_GhatatMasrafi = MyBase.Columns("Pm_Lab_Rol_GhatatMasrafi")
            Me.columnقطعه_مصرفی = MyBase.Columns("قطعه مصرفی")
            Me.columnتعداد = MyBase.Columns("تعداد")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPm_Lab_Rol_GhatatMasrafi = New Global.System.Data.DataColumn("Pm_Lab_Rol_GhatatMasrafi", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPm_Lab_Rol_GhatatMasrafi)
            Me.columnقطعه_مصرفی = New Global.System.Data.DataColumn("قطعه مصرفی", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnقطعه_مصرفی)
            Me.columnتعداد = New Global.System.Data.DataColumn("تعداد", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتعداد)
            Me.columnقطعه_مصرفی.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Lab_Rol_Tamirat_GhateMasrafiRow() As Pm_Lab_Rol_Tamirat_GhateMasrafiRow
            Return CType(Me.NewRow,Pm_Lab_Rol_Tamirat_GhateMasrafiRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Lab_Rol_Tamirat_GhateMasrafiRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Lab_Rol_Tamirat_GhateMasrafiRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Lab_Rol_Tamirat_GhateMasrafiRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_Tamirat_GhateMasrafiRowChanged(Me, New Pm_Lab_Rol_Tamirat_GhateMasrafiRowChangeEvent(CType(e.Row,Pm_Lab_Rol_Tamirat_GhateMasrafiRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Lab_Rol_Tamirat_GhateMasrafiRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_Tamirat_GhateMasrafiRowChanging(Me, New Pm_Lab_Rol_Tamirat_GhateMasrafiRowChangeEvent(CType(e.Row,Pm_Lab_Rol_Tamirat_GhateMasrafiRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Lab_Rol_Tamirat_GhateMasrafiRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_Tamirat_GhateMasrafiRowDeleted(Me, New Pm_Lab_Rol_Tamirat_GhateMasrafiRowChangeEvent(CType(e.Row,Pm_Lab_Rol_Tamirat_GhateMasrafiRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Lab_Rol_Tamirat_GhateMasrafiRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_Tamirat_GhateMasrafiRowDeleting(Me, New Pm_Lab_Rol_Tamirat_GhateMasrafiRowChangeEvent(CType(e.Row,Pm_Lab_Rol_Tamirat_GhateMasrafiRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Lab_Rol_Tamirat_GhateMasrafiRow(ByVal row As Pm_Lab_Rol_Tamirat_GhateMasrafiRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Lab = New Ds_Lab
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Lab_Rol_Tamirat_GhateMasrafiDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Lab_Rol_SharheKarDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Lab_Rol_SharheKarRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnDate As Global.System.Data.DataColumn
        
        Private columnDis As Global.System.Data.DataColumn
        
        Private columnSrl_Master As Global.System.Data.DataColumn
        
        Private columnSrl1 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Lab_Rol_SharheKar"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_MasterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_Master
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Lab_Rol_SharheKarRow
            Get
                Return CType(Me.Rows(index),Pm_Lab_Rol_SharheKarRow)
            End Get
        End Property
        
        Public Event Pm_Lab_Rol_SharheKarRowChanging As Pm_Lab_Rol_SharheKarRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_SharheKarRowChanged As Pm_Lab_Rol_SharheKarRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_SharheKarRowDeleting As Pm_Lab_Rol_SharheKarRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_SharheKarRowDeleted As Pm_Lab_Rol_SharheKarRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Lab_Rol_SharheKarRow(ByVal row As Pm_Lab_Rol_SharheKarRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Lab_Rol_SharheKarRow(ByVal _Date As String, ByVal Dis As String, ByVal Srl_Master As Integer) As Pm_Lab_Rol_SharheKarRow
            Dim rowPm_Lab_Rol_SharheKarRow As Pm_Lab_Rol_SharheKarRow = CType(Me.NewRow,Pm_Lab_Rol_SharheKarRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, _Date, Dis, Srl_Master, Nothing}
            rowPm_Lab_Rol_SharheKarRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Lab_Rol_SharheKarRow)
            Return rowPm_Lab_Rol_SharheKarRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As Pm_Lab_Rol_SharheKarRow
            Return CType(Me.Rows.Find(New Object() {Srl}),Pm_Lab_Rol_SharheKarRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Lab_Rol_SharheKarDataTable = CType(MyBase.Clone,Pm_Lab_Rol_SharheKarDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Lab_Rol_SharheKarDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnDate = MyBase.Columns("Date")
            Me.columnDis = MyBase.Columns("Dis")
            Me.columnSrl_Master = MyBase.Columns("Srl_Master")
            Me.columnSrl1 = MyBase.Columns("Srl1")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnDate = New Global.System.Data.DataColumn("Date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DateColumn")
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDate")
            Me.columnDate.ExtendedProperties.Add("Generator_UserColumnName", "Date")
            MyBase.Columns.Add(Me.columnDate)
            Me.columnDis = New Global.System.Data.DataColumn("Dis", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDis)
            Me.columnSrl_Master = New Global.System.Data.DataColumn("Srl_Master", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_Master)
            Me.columnSrl1 = New Global.System.Data.DataColumn("Srl1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl1)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnSrl.AutoIncrement = true
            Me.columnSrl.AutoIncrementSeed = -1
            Me.columnSrl.AutoIncrementStep = -1
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.ReadOnly = true
            Me.columnSrl.Unique = true
            Me.columnDate.MaxLength = 10
            Me.columnDis.MaxLength = 500
            Me.columnSrl1.AutoIncrement = true
            Me.columnSrl1.AutoIncrementSeed = -1
            Me.columnSrl1.AutoIncrementStep = -1
            Me.columnSrl1.AllowDBNull = false
            Me.columnSrl1.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Lab_Rol_SharheKarRow() As Pm_Lab_Rol_SharheKarRow
            Return CType(Me.NewRow,Pm_Lab_Rol_SharheKarRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Lab_Rol_SharheKarRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Lab_Rol_SharheKarRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Lab_Rol_SharheKarRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_SharheKarRowChanged(Me, New Pm_Lab_Rol_SharheKarRowChangeEvent(CType(e.Row,Pm_Lab_Rol_SharheKarRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Lab_Rol_SharheKarRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_SharheKarRowChanging(Me, New Pm_Lab_Rol_SharheKarRowChangeEvent(CType(e.Row,Pm_Lab_Rol_SharheKarRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Lab_Rol_SharheKarRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_SharheKarRowDeleted(Me, New Pm_Lab_Rol_SharheKarRowChangeEvent(CType(e.Row,Pm_Lab_Rol_SharheKarRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Lab_Rol_SharheKarRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_SharheKarRowDeleting(Me, New Pm_Lab_Rol_SharheKarRowChangeEvent(CType(e.Row,Pm_Lab_Rol_SharheKarRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Lab_Rol_SharheKarRow(ByVal row As Pm_Lab_Rol_SharheKarRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Lab = New Ds_Lab
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Lab_Rol_SharheKarDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Lab_Rol_Masool_TamirDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Lab_Rol_Masool_TamirRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Lab_Rol_Masool_Tamir"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Lab_Rol_Masool_TamirRow
            Get
                Return CType(Me.Rows(index),Pm_Lab_Rol_Masool_TamirRow)
            End Get
        End Property
        
        Public Event Pm_Lab_Rol_Masool_TamirRowChanging As Pm_Lab_Rol_Masool_TamirRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_Masool_TamirRowChanged As Pm_Lab_Rol_Masool_TamirRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_Masool_TamirRowDeleting As Pm_Lab_Rol_Masool_TamirRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_Masool_TamirRowDeleted As Pm_Lab_Rol_Masool_TamirRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Lab_Rol_Masool_TamirRow(ByVal row As Pm_Lab_Rol_Masool_TamirRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Lab_Rol_Masool_TamirRow(ByVal Name As String) As Pm_Lab_Rol_Masool_TamirRow
            Dim rowPm_Lab_Rol_Masool_TamirRow As Pm_Lab_Rol_Masool_TamirRow = CType(Me.NewRow,Pm_Lab_Rol_Masool_TamirRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Name}
            rowPm_Lab_Rol_Masool_TamirRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Lab_Rol_Masool_TamirRow)
            Return rowPm_Lab_Rol_Masool_TamirRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As Pm_Lab_Rol_Masool_TamirRow
            Return CType(Me.Rows.Find(New Object() {Srl}),Pm_Lab_Rol_Masool_TamirRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Lab_Rol_Masool_TamirDataTable = CType(MyBase.Clone,Pm_Lab_Rol_Masool_TamirDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Lab_Rol_Masool_TamirDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnName = MyBase.Columns("Name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnSrl.AutoIncrement = true
            Me.columnSrl.AutoIncrementSeed = -1
            Me.columnSrl.AutoIncrementStep = -1
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.ReadOnly = true
            Me.columnSrl.Unique = true
            Me.columnName.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Lab_Rol_Masool_TamirRow() As Pm_Lab_Rol_Masool_TamirRow
            Return CType(Me.NewRow,Pm_Lab_Rol_Masool_TamirRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Lab_Rol_Masool_TamirRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Lab_Rol_Masool_TamirRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Lab_Rol_Masool_TamirRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_Masool_TamirRowChanged(Me, New Pm_Lab_Rol_Masool_TamirRowChangeEvent(CType(e.Row,Pm_Lab_Rol_Masool_TamirRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Lab_Rol_Masool_TamirRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_Masool_TamirRowChanging(Me, New Pm_Lab_Rol_Masool_TamirRowChangeEvent(CType(e.Row,Pm_Lab_Rol_Masool_TamirRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Lab_Rol_Masool_TamirRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_Masool_TamirRowDeleted(Me, New Pm_Lab_Rol_Masool_TamirRowChangeEvent(CType(e.Row,Pm_Lab_Rol_Masool_TamirRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Lab_Rol_Masool_TamirRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_Masool_TamirRowDeleting(Me, New Pm_Lab_Rol_Masool_TamirRowChangeEvent(CType(e.Row,Pm_Lab_Rol_Masool_TamirRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Lab_Rol_Masool_TamirRow(ByVal row As Pm_Lab_Rol_Masool_TamirRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Lab = New Ds_Lab
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Lab_Rol_Masool_TamirDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Lab_Rol_TajhizDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Lab_Rol_TajhizRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnSrl_Parent As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Lab_Rol_Tajhiz"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_ParentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_Parent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Lab_Rol_TajhizRow
            Get
                Return CType(Me.Rows(index),Pm_Lab_Rol_TajhizRow)
            End Get
        End Property
        
        Public Event Pm_Lab_Rol_TajhizRowChanging As Pm_Lab_Rol_TajhizRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_TajhizRowChanged As Pm_Lab_Rol_TajhizRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_TajhizRowDeleting As Pm_Lab_Rol_TajhizRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_TajhizRowDeleted As Pm_Lab_Rol_TajhizRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Lab_Rol_TajhizRow(ByVal row As Pm_Lab_Rol_TajhizRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Lab_Rol_TajhizRow(ByVal Name As String, ByVal Srl_Parent As Integer) As Pm_Lab_Rol_TajhizRow
            Dim rowPm_Lab_Rol_TajhizRow As Pm_Lab_Rol_TajhizRow = CType(Me.NewRow,Pm_Lab_Rol_TajhizRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Name, Srl_Parent}
            rowPm_Lab_Rol_TajhizRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Lab_Rol_TajhizRow)
            Return rowPm_Lab_Rol_TajhizRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As Pm_Lab_Rol_TajhizRow
            Return CType(Me.Rows.Find(New Object() {Srl}),Pm_Lab_Rol_TajhizRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Lab_Rol_TajhizDataTable = CType(MyBase.Clone,Pm_Lab_Rol_TajhizDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Lab_Rol_TajhizDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnName = MyBase.Columns("Name")
            Me.columnSrl_Parent = MyBase.Columns("Srl_Parent")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnSrl_Parent = New Global.System.Data.DataColumn("Srl_Parent", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_Parent)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnSrl.AutoIncrement = true
            Me.columnSrl.AutoIncrementSeed = -1
            Me.columnSrl.AutoIncrementStep = -1
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.ReadOnly = true
            Me.columnSrl.Unique = true
            Me.columnName.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Lab_Rol_TajhizRow() As Pm_Lab_Rol_TajhizRow
            Return CType(Me.NewRow,Pm_Lab_Rol_TajhizRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Lab_Rol_TajhizRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Lab_Rol_TajhizRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Lab_Rol_TajhizRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_TajhizRowChanged(Me, New Pm_Lab_Rol_TajhizRowChangeEvent(CType(e.Row,Pm_Lab_Rol_TajhizRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Lab_Rol_TajhizRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_TajhizRowChanging(Me, New Pm_Lab_Rol_TajhizRowChangeEvent(CType(e.Row,Pm_Lab_Rol_TajhizRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Lab_Rol_TajhizRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_TajhizRowDeleted(Me, New Pm_Lab_Rol_TajhizRowChangeEvent(CType(e.Row,Pm_Lab_Rol_TajhizRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Lab_Rol_TajhizRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_TajhizRowDeleting(Me, New Pm_Lab_Rol_TajhizRowChangeEvent(CType(e.Row,Pm_Lab_Rol_TajhizRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Lab_Rol_TajhizRow(ByVal row As Pm_Lab_Rol_TajhizRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Lab = New Ds_Lab
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Lab_Rol_TajhizDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Lab_Rol_MahalDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Lab_Rol_MahalRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnSrl_Parent As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Lab_Rol_Mahal"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_ParentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_Parent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Lab_Rol_MahalRow
            Get
                Return CType(Me.Rows(index),Pm_Lab_Rol_MahalRow)
            End Get
        End Property
        
        Public Event Pm_Lab_Rol_MahalRowChanging As Pm_Lab_Rol_MahalRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_MahalRowChanged As Pm_Lab_Rol_MahalRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_MahalRowDeleting As Pm_Lab_Rol_MahalRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_MahalRowDeleted As Pm_Lab_Rol_MahalRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Lab_Rol_MahalRow(ByVal row As Pm_Lab_Rol_MahalRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Lab_Rol_MahalRow(ByVal Srl_Parent As Integer, ByVal Name As String) As Pm_Lab_Rol_MahalRow
            Dim rowPm_Lab_Rol_MahalRow As Pm_Lab_Rol_MahalRow = CType(Me.NewRow,Pm_Lab_Rol_MahalRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Srl_Parent, Name}
            rowPm_Lab_Rol_MahalRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Lab_Rol_MahalRow)
            Return rowPm_Lab_Rol_MahalRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As Pm_Lab_Rol_MahalRow
            Return CType(Me.Rows.Find(New Object() {Srl}),Pm_Lab_Rol_MahalRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Lab_Rol_MahalDataTable = CType(MyBase.Clone,Pm_Lab_Rol_MahalDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Lab_Rol_MahalDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnSrl_Parent = MyBase.Columns("Srl_Parent")
            Me.columnName = MyBase.Columns("Name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnSrl_Parent = New Global.System.Data.DataColumn("Srl_Parent", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_Parent)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnSrl.AutoIncrement = true
            Me.columnSrl.AutoIncrementSeed = -1
            Me.columnSrl.AutoIncrementStep = -1
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.ReadOnly = true
            Me.columnSrl.Unique = true
            Me.columnName.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Lab_Rol_MahalRow() As Pm_Lab_Rol_MahalRow
            Return CType(Me.NewRow,Pm_Lab_Rol_MahalRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Lab_Rol_MahalRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Lab_Rol_MahalRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Lab_Rol_MahalRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_MahalRowChanged(Me, New Pm_Lab_Rol_MahalRowChangeEvent(CType(e.Row,Pm_Lab_Rol_MahalRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Lab_Rol_MahalRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_MahalRowChanging(Me, New Pm_Lab_Rol_MahalRowChangeEvent(CType(e.Row,Pm_Lab_Rol_MahalRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Lab_Rol_MahalRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_MahalRowDeleted(Me, New Pm_Lab_Rol_MahalRowChangeEvent(CType(e.Row,Pm_Lab_Rol_MahalRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Lab_Rol_MahalRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_MahalRowDeleting(Me, New Pm_Lab_Rol_MahalRowChangeEvent(CType(e.Row,Pm_Lab_Rol_MahalRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Lab_Rol_MahalRow(ByVal row As Pm_Lab_Rol_MahalRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Lab = New Ds_Lab
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Lab_Rol_MahalDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Lab_Rol_MasterDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Lab_Rol_MasterRow)
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnSrl_Pm_Device_Sazande As Global.System.Data.DataColumn
        
        Private columnSrl_Pm_Lab_Rol_Tajhiz As Global.System.Data.DataColumn
        
        Private columnSrl_Pm_Lab_Rol_Masool_Tamir As Global.System.Data.DataColumn
        
        Private columnSrl_Pm_Lab_Rol_SharheKar As Global.System.Data.DataColumn
        
        Private columnSrl_Pm_Lab_Rol_Mahal_Nasb As Global.System.Data.DataColumn
        
        Private columnNo As Global.System.Data.DataColumn
        
        Private columnNo_Barcode As Global.System.Data.DataColumn
        
        Private columnPelak_Amval As Global.System.Data.DataColumn
        
        Private columnVorodDate As Global.System.Data.DataColumn
        
        Private columnKhorojDate As Global.System.Data.DataColumn
        
        Private columnTahvilgirande As Global.System.Data.DataColumn
        
        Private columnTahvildahande As Global.System.Data.DataColumn
        
        Private columnEib As Global.System.Data.DataColumn
        
        Private columnDis As Global.System.Data.DataColumn
        
        Private columnSubmitDate As Global.System.Data.DataColumn
        
        Private columnTahvildahandeNo As Global.System.Data.DataColumn
        
        Private columnSrl_Pm_Lab_Rol_Mahal_Bahre As Global.System.Data.DataColumn
        
        Private columnSabtDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Lab_Rol_Master"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_Pm_Device_SazandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_Pm_Device_Sazande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_Pm_Lab_Rol_TajhizColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_Pm_Lab_Rol_Tajhiz
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_Pm_Lab_Rol_Masool_TamirColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_Pm_Lab_Rol_Masool_Tamir
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_Pm_Lab_Rol_SharheKarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_Pm_Lab_Rol_SharheKar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_Pm_Lab_Rol_Mahal_NasbColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_Pm_Lab_Rol_Mahal_Nasb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property No_BarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNo_Barcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pelak_AmvalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPelak_Amval
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VorodDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVorodDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KhorojDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKhorojDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TahvilgirandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTahvilgirande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TahvildahandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTahvildahande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubmitDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubmitDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TahvildahandeNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTahvildahandeNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Srl_Pm_Lab_Rol_Mahal_BahreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl_Pm_Lab_Rol_Mahal_Bahre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SabtDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSabtDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Lab_Rol_MasterRow
            Get
                Return CType(Me.Rows(index),Pm_Lab_Rol_MasterRow)
            End Get
        End Property
        
        Public Event Pm_Lab_Rol_MasterRowChanging As Pm_Lab_Rol_MasterRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_MasterRowChanged As Pm_Lab_Rol_MasterRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_MasterRowDeleting As Pm_Lab_Rol_MasterRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_MasterRowDeleted As Pm_Lab_Rol_MasterRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Lab_Rol_MasterRow(ByVal row As Pm_Lab_Rol_MasterRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Lab_Rol_MasterRow( _
                    ByVal Srl_Pm_Device_Sazande As Integer,  _
                    ByVal Srl_Pm_Lab_Rol_Tajhiz As Integer,  _
                    ByVal Srl_Pm_Lab_Rol_Masool_Tamir As Integer,  _
                    ByVal Srl_Pm_Lab_Rol_SharheKar As Integer,  _
                    ByVal Srl_Pm_Lab_Rol_Mahal_Nasb As Integer,  _
                    ByVal No As String,  _
                    ByVal No_Barcode As String,  _
                    ByVal Pelak_Amval As String,  _
                    ByVal VorodDate As String,  _
                    ByVal KhorojDate As String,  _
                    ByVal Tahvilgirande As String,  _
                    ByVal Tahvildahande As String,  _
                    ByVal Eib As String,  _
                    ByVal Dis As String,  _
                    ByVal SubmitDate As Date,  _
                    ByVal TahvildahandeNo As String,  _
                    ByVal Srl_Pm_Lab_Rol_Mahal_Bahre As Integer,  _
                    ByVal SabtDate As String) As Pm_Lab_Rol_MasterRow
            Dim rowPm_Lab_Rol_MasterRow As Pm_Lab_Rol_MasterRow = CType(Me.NewRow,Pm_Lab_Rol_MasterRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Srl_Pm_Device_Sazande, Srl_Pm_Lab_Rol_Tajhiz, Srl_Pm_Lab_Rol_Masool_Tamir, Srl_Pm_Lab_Rol_SharheKar, Srl_Pm_Lab_Rol_Mahal_Nasb, No, No_Barcode, Pelak_Amval, VorodDate, KhorojDate, Tahvilgirande, Tahvildahande, Eib, Dis, SubmitDate, TahvildahandeNo, Srl_Pm_Lab_Rol_Mahal_Bahre, SabtDate}
            rowPm_Lab_Rol_MasterRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Lab_Rol_MasterRow)
            Return rowPm_Lab_Rol_MasterRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As Pm_Lab_Rol_MasterRow
            Return CType(Me.Rows.Find(New Object() {Srl}),Pm_Lab_Rol_MasterRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Lab_Rol_MasterDataTable = CType(MyBase.Clone,Pm_Lab_Rol_MasterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Lab_Rol_MasterDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnSrl_Pm_Device_Sazande = MyBase.Columns("Srl_Pm_Device_Sazande")
            Me.columnSrl_Pm_Lab_Rol_Tajhiz = MyBase.Columns("Srl_Pm_Lab_Rol_Tajhiz")
            Me.columnSrl_Pm_Lab_Rol_Masool_Tamir = MyBase.Columns("Srl_Pm_Lab_Rol_Masool_Tamir")
            Me.columnSrl_Pm_Lab_Rol_SharheKar = MyBase.Columns("Srl_Pm_Lab_Rol_SharheKar")
            Me.columnSrl_Pm_Lab_Rol_Mahal_Nasb = MyBase.Columns("Srl_Pm_Lab_Rol_Mahal_Nasb")
            Me.columnNo = MyBase.Columns("No")
            Me.columnNo_Barcode = MyBase.Columns("No_Barcode")
            Me.columnPelak_Amval = MyBase.Columns("Pelak_Amval")
            Me.columnVorodDate = MyBase.Columns("VorodDate")
            Me.columnKhorojDate = MyBase.Columns("KhorojDate")
            Me.columnTahvilgirande = MyBase.Columns("Tahvilgirande")
            Me.columnTahvildahande = MyBase.Columns("Tahvildahande")
            Me.columnEib = MyBase.Columns("Eib")
            Me.columnDis = MyBase.Columns("Dis")
            Me.columnSubmitDate = MyBase.Columns("SubmitDate")
            Me.columnTahvildahandeNo = MyBase.Columns("TahvildahandeNo")
            Me.columnSrl_Pm_Lab_Rol_Mahal_Bahre = MyBase.Columns("Srl_Pm_Lab_Rol_Mahal_Bahre")
            Me.columnSabtDate = MyBase.Columns("SabtDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnSrl_Pm_Device_Sazande = New Global.System.Data.DataColumn("Srl_Pm_Device_Sazande", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_Pm_Device_Sazande)
            Me.columnSrl_Pm_Lab_Rol_Tajhiz = New Global.System.Data.DataColumn("Srl_Pm_Lab_Rol_Tajhiz", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_Pm_Lab_Rol_Tajhiz)
            Me.columnSrl_Pm_Lab_Rol_Masool_Tamir = New Global.System.Data.DataColumn("Srl_Pm_Lab_Rol_Masool_Tamir", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_Pm_Lab_Rol_Masool_Tamir)
            Me.columnSrl_Pm_Lab_Rol_SharheKar = New Global.System.Data.DataColumn("Srl_Pm_Lab_Rol_SharheKar", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_Pm_Lab_Rol_SharheKar)
            Me.columnSrl_Pm_Lab_Rol_Mahal_Nasb = New Global.System.Data.DataColumn("Srl_Pm_Lab_Rol_Mahal_Nasb", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_Pm_Lab_Rol_Mahal_Nasb)
            Me.columnNo = New Global.System.Data.DataColumn("No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNo)
            Me.columnNo_Barcode = New Global.System.Data.DataColumn("No_Barcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNo_Barcode)
            Me.columnPelak_Amval = New Global.System.Data.DataColumn("Pelak_Amval", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPelak_Amval)
            Me.columnVorodDate = New Global.System.Data.DataColumn("VorodDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVorodDate)
            Me.columnKhorojDate = New Global.System.Data.DataColumn("KhorojDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKhorojDate)
            Me.columnTahvilgirande = New Global.System.Data.DataColumn("Tahvilgirande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTahvilgirande)
            Me.columnTahvildahande = New Global.System.Data.DataColumn("Tahvildahande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTahvildahande)
            Me.columnEib = New Global.System.Data.DataColumn("Eib", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEib)
            Me.columnDis = New Global.System.Data.DataColumn("Dis", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDis)
            Me.columnSubmitDate = New Global.System.Data.DataColumn("SubmitDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubmitDate)
            Me.columnTahvildahandeNo = New Global.System.Data.DataColumn("TahvildahandeNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTahvildahandeNo)
            Me.columnSrl_Pm_Lab_Rol_Mahal_Bahre = New Global.System.Data.DataColumn("Srl_Pm_Lab_Rol_Mahal_Bahre", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl_Pm_Lab_Rol_Mahal_Bahre)
            Me.columnSabtDate = New Global.System.Data.DataColumn("SabtDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSabtDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnSrl.AutoIncrement = true
            Me.columnSrl.AutoIncrementSeed = -1
            Me.columnSrl.AutoIncrementStep = -1
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.ReadOnly = true
            Me.columnSrl.Unique = true
            Me.columnNo.MaxLength = 50
            Me.columnNo_Barcode.MaxLength = 50
            Me.columnPelak_Amval.MaxLength = 50
            Me.columnVorodDate.MaxLength = 10
            Me.columnKhorojDate.MaxLength = 10
            Me.columnTahvilgirande.MaxLength = 50
            Me.columnTahvildahande.MaxLength = 50
            Me.columnEib.MaxLength = 500
            Me.columnDis.MaxLength = 500
            Me.columnTahvildahandeNo.MaxLength = 10
            Me.columnSabtDate.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Lab_Rol_MasterRow() As Pm_Lab_Rol_MasterRow
            Return CType(Me.NewRow,Pm_Lab_Rol_MasterRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Lab_Rol_MasterRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Lab_Rol_MasterRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Lab_Rol_MasterRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_MasterRowChanged(Me, New Pm_Lab_Rol_MasterRowChangeEvent(CType(e.Row,Pm_Lab_Rol_MasterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Lab_Rol_MasterRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_MasterRowChanging(Me, New Pm_Lab_Rol_MasterRowChangeEvent(CType(e.Row,Pm_Lab_Rol_MasterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Lab_Rol_MasterRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_MasterRowDeleted(Me, New Pm_Lab_Rol_MasterRowChangeEvent(CType(e.Row,Pm_Lab_Rol_MasterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Lab_Rol_MasterRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_MasterRowDeleting(Me, New Pm_Lab_Rol_MasterRowChangeEvent(CType(e.Row,Pm_Lab_Rol_MasterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Lab_Rol_MasterRow(ByVal row As Pm_Lab_Rol_MasterRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Lab = New Ds_Lab
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Lab_Rol_MasterDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Pm_Lab_Rol_Master_VwDataTable
        Inherits Global.System.Data.TypedTableBase(Of Pm_Lab_Rol_Master_VwRow)
        
        Private columnنام_تجهیز As Global.System.Data.DataColumn
        
        Private columnمحل_استفاده_از_تجهیز As Global.System.Data.DataColumn
        
        Private columnSrl As Global.System.Data.DataColumn
        
        Private columnشماره As Global.System.Data.DataColumn
        
        Private columnتاریخ_ورود_تجهیز As Global.System.Data.DataColumn
        
        Private columnمسئول_تعمیر As Global.System.Data.DataColumn
        
        Private columnتاریخ_ثبت As Global.System.Data.DataColumn
        
        Private columnشرکت_سازنده As Global.System.Data.DataColumn
        
        Private columnتاریخ_خروج As Global.System.Data.DataColumn
        
        Private columnبارکد As Global.System.Data.DataColumn
        
        Private columnتاریخ As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pm_Lab_Rol_Master_Vw"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property نام_تجهیزColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnنام_تجهیز
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property محل_استفاده_از_تجهیزColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnمحل_استفاده_از_تجهیز
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شمارهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشماره
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاریخ_ورود_تجهیزColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاریخ_ورود_تجهیز
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property مسئول_تعمیرColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnمسئول_تعمیر
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاریخ_ثبتColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاریخ_ثبت
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property شرکت_سازندهColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnشرکت_سازنده
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاریخ_خروجColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاریخ_خروج
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property بارکدColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnبارکد
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property تاریخColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnتاریخ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Pm_Lab_Rol_Master_VwRow
            Get
                Return CType(Me.Rows(index),Pm_Lab_Rol_Master_VwRow)
            End Get
        End Property
        
        Public Event Pm_Lab_Rol_Master_VwRowChanging As Pm_Lab_Rol_Master_VwRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_Master_VwRowChanged As Pm_Lab_Rol_Master_VwRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_Master_VwRowDeleting As Pm_Lab_Rol_Master_VwRowChangeEventHandler
        
        Public Event Pm_Lab_Rol_Master_VwRowDeleted As Pm_Lab_Rol_Master_VwRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPm_Lab_Rol_Master_VwRow(ByVal row As Pm_Lab_Rol_Master_VwRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPm_Lab_Rol_Master_VwRow(ByVal نام_تجهیز As String, ByVal محل_استفاده_از_تجهیز As String, ByVal شماره As String, ByVal تاریخ_ورود_تجهیز As String, ByVal مسئول_تعمیر As String, ByVal تاریخ_ثبت As String, ByVal شرکت_سازنده As String, ByVal تاریخ_خروج As String, ByVal بارکد As String, ByVal تاریخ As String) As Pm_Lab_Rol_Master_VwRow
            Dim rowPm_Lab_Rol_Master_VwRow As Pm_Lab_Rol_Master_VwRow = CType(Me.NewRow,Pm_Lab_Rol_Master_VwRow)
            Dim columnValuesArray() As Object = New Object() {نام_تجهیز, محل_استفاده_از_تجهیز, Nothing, شماره, تاریخ_ورود_تجهیز, مسئول_تعمیر, تاریخ_ثبت, شرکت_سازنده, تاریخ_خروج, بارکد, تاریخ}
            rowPm_Lab_Rol_Master_VwRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPm_Lab_Rol_Master_VwRow)
            Return rowPm_Lab_Rol_Master_VwRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySrl(ByVal Srl As Integer) As Pm_Lab_Rol_Master_VwRow
            Return CType(Me.Rows.Find(New Object() {Srl}),Pm_Lab_Rol_Master_VwRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Pm_Lab_Rol_Master_VwDataTable = CType(MyBase.Clone,Pm_Lab_Rol_Master_VwDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Pm_Lab_Rol_Master_VwDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnنام_تجهیز = MyBase.Columns("نام تجهیز")
            Me.columnمحل_استفاده_از_تجهیز = MyBase.Columns("محل استفاده از تجهیز")
            Me.columnSrl = MyBase.Columns("Srl")
            Me.columnشماره = MyBase.Columns("شماره")
            Me.columnتاریخ_ورود_تجهیز = MyBase.Columns("تاریخ ورود تجهیز")
            Me.columnمسئول_تعمیر = MyBase.Columns("مسئول تعمیر")
            Me.columnتاریخ_ثبت = MyBase.Columns("تاریخ ثبت")
            Me.columnشرکت_سازنده = MyBase.Columns("شرکت سازنده")
            Me.columnتاریخ_خروج = MyBase.Columns("تاریخ خروج")
            Me.columnبارکد = MyBase.Columns("بارکد")
            Me.columnتاریخ = MyBase.Columns("تاریخ")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnنام_تجهیز = New Global.System.Data.DataColumn("نام تجهیز", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnنام_تجهیز)
            Me.columnمحل_استفاده_از_تجهیز = New Global.System.Data.DataColumn("محل استفاده از تجهیز", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnمحل_استفاده_از_تجهیز)
            Me.columnSrl = New Global.System.Data.DataColumn("Srl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrl)
            Me.columnشماره = New Global.System.Data.DataColumn("شماره", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشماره)
            Me.columnتاریخ_ورود_تجهیز = New Global.System.Data.DataColumn("تاریخ ورود تجهیز", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاریخ_ورود_تجهیز)
            Me.columnمسئول_تعمیر = New Global.System.Data.DataColumn("مسئول تعمیر", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnمسئول_تعمیر)
            Me.columnتاریخ_ثبت = New Global.System.Data.DataColumn("تاریخ ثبت", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاریخ_ثبت)
            Me.columnشرکت_سازنده = New Global.System.Data.DataColumn("شرکت سازنده", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnشرکت_سازنده)
            Me.columnتاریخ_خروج = New Global.System.Data.DataColumn("تاریخ خروج", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاریخ_خروج)
            Me.columnبارکد = New Global.System.Data.DataColumn("بارکد", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnبارکد)
            Me.columnتاریخ = New Global.System.Data.DataColumn("تاریخ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnتاریخ)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSrl}, true))
            Me.columnنام_تجهیز.MaxLength = 50
            Me.columnمحل_استفاده_از_تجهیز.MaxLength = 50
            Me.columnSrl.AutoIncrement = true
            Me.columnSrl.AutoIncrementSeed = -1
            Me.columnSrl.AutoIncrementStep = -1
            Me.columnSrl.AllowDBNull = false
            Me.columnSrl.ReadOnly = true
            Me.columnSrl.Unique = true
            Me.columnشماره.MaxLength = 50
            Me.columnتاریخ_ورود_تجهیز.MaxLength = 10
            Me.columnمسئول_تعمیر.MaxLength = 50
            Me.columnتاریخ_ثبت.MaxLength = 10
            Me.columnشرکت_سازنده.MaxLength = 50
            Me.columnتاریخ_خروج.MaxLength = 10
            Me.columnبارکد.MaxLength = 50
            Me.columnتاریخ.ReadOnly = true
            Me.columnتاریخ.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPm_Lab_Rol_Master_VwRow() As Pm_Lab_Rol_Master_VwRow
            Return CType(Me.NewRow,Pm_Lab_Rol_Master_VwRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Pm_Lab_Rol_Master_VwRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Pm_Lab_Rol_Master_VwRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Pm_Lab_Rol_Master_VwRowChangedEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_Master_VwRowChanged(Me, New Pm_Lab_Rol_Master_VwRowChangeEvent(CType(e.Row,Pm_Lab_Rol_Master_VwRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Pm_Lab_Rol_Master_VwRowChangingEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_Master_VwRowChanging(Me, New Pm_Lab_Rol_Master_VwRowChangeEvent(CType(e.Row,Pm_Lab_Rol_Master_VwRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Pm_Lab_Rol_Master_VwRowDeletedEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_Master_VwRowDeleted(Me, New Pm_Lab_Rol_Master_VwRowChangeEvent(CType(e.Row,Pm_Lab_Rol_Master_VwRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pm_Lab_Rol_Master_VwRowDeletingEvent) Is Nothing) Then
                RaiseEvent Pm_Lab_Rol_Master_VwRowDeleting(Me, New Pm_Lab_Rol_Master_VwRowChangeEvent(CType(e.Row,Pm_Lab_Rol_Master_VwRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePm_Lab_Rol_Master_VwRow(ByVal row As Pm_Lab_Rol_Master_VwRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Lab = New Ds_Lab
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Pm_Lab_Rol_Master_VwDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Lab_Rol_ElateVorodRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Lab_Rol_ElateVorod As Pm_Lab_Rol_ElateVorodDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Lab_Rol_ElateVorod = CType(Me.Table,Pm_Lab_Rol_ElateVorodDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Lab_Rol_ElateVorod.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_ElateVorod.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property علت_ورود() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_ElateVorod.علت_ورودColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'علت ورود' in table 'Pm_Lab_Rol_ElateVorod' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_ElateVorod.علت_ورودColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isعلت_ورودNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_ElateVorod.علت_ورودColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setعلت_ورودNull()
            Me(Me.tablePm_Lab_Rol_ElateVorod.علت_ورودColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPm_Lab_Rol_SatheAhamniatRows() As Pm_Lab_Rol_SatheAhamniatRow()
            If (Me.Table.ChildRelations("Pm_Lab_Rol_ElateVorod_Pm_Lab_Rol_SatheAhamniat") Is Nothing) Then
                Return New Pm_Lab_Rol_SatheAhamniatRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Pm_Lab_Rol_ElateVorod_Pm_Lab_Rol_SatheAhamniat")),Pm_Lab_Rol_SatheAhamniatRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Lab_Rol_SatheAhamniatRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Lab_Rol_SatheAhamniat As Pm_Lab_Rol_SatheAhamniatDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Lab_Rol_SatheAhamniat = CType(Me.Table,Pm_Lab_Rol_SatheAhamniatDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Lab_Rol_SatheAhamniat.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_SatheAhamniat.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property سطح_اهمیت() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_SatheAhamniat.سطح_اهمیتColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'سطح اهمیت' in table 'Pm_Lab_Rol_SatheAhamniat' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_SatheAhamniat.سطح_اهمیتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pm_Lab_Rol_ElateVorodRow() As Pm_Lab_Rol_ElateVorodRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Pm_Lab_Rol_ElateVorod_Pm_Lab_Rol_SatheAhamniat")),Pm_Lab_Rol_ElateVorodRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Pm_Lab_Rol_ElateVorod_Pm_Lab_Rol_SatheAhamniat"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isسطح_اهمیتNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_SatheAhamniat.سطح_اهمیتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setسطح_اهمیتNull()
            Me(Me.tablePm_Lab_Rol_SatheAhamniat.سطح_اهمیتColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Device_SazandeRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Device_Sazande As Pm_Device_SazandeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Device_Sazande = CType(Me.Table,Pm_Device_SazandeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Device_Sazande.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Device_Sazande.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property سازندگان() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Device_Sazande.سازندگانColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'سازندگان' in table 'Pm_Device_Sazande' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Device_Sazande.سازندگانColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsسازندگانNull() As Boolean
            Return Me.IsNull(Me.tablePm_Device_Sazande.سازندگانColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetسازندگانNull()
            Me(Me.tablePm_Device_Sazande.سازندگانColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Lab_Rol_GhatatMasrafiRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Lab_Rol_GhatatMasrafi As Pm_Lab_Rol_GhatatMasrafiDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Lab_Rol_GhatatMasrafi = CType(Me.Table,Pm_Lab_Rol_GhatatMasrafiDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Lab_Rol_GhatatMasrafi.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_GhatatMasrafi.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property قطعات_مصرفی() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_GhatatMasrafi.قطعات_مصرفیColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'قطعات مصرفی' in table 'Pm_Lab_Rol_GhatatMasrafi' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_GhatatMasrafi.قطعات_مصرفیColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isقطعات_مصرفیNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_GhatatMasrafi.قطعات_مصرفیColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setقطعات_مصرفیNull()
            Me(Me.tablePm_Lab_Rol_GhatatMasrafi.قطعات_مصرفیColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Lab_Rol_TamiratViewRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Lab_Rol_TamiratView As Pm_Lab_Rol_TamiratViewDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Lab_Rol_TamiratView = CType(Me.Table,Pm_Lab_Rol_TamiratViewDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Lab_Rol_TamiratView.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_TamiratView.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شماره() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_TamiratView.شمارهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شماره' in table 'Pm_Lab_Rol_TamiratView' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_TamiratView.شمارهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام_قطعه() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_TamiratView.نام_قطعهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام قطعه' in table 'Pm_Lab_Rol_TamiratView' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_TamiratView.نام_قطعهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property پست() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_TamiratView.پستColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'پست' in table 'Pm_Lab_Rol_TamiratView' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_TamiratView.پستColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property سطح_اهمیت() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_TamiratView.سطح_اهمیتColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'سطح اهمیت' in table 'Pm_Lab_Rol_TamiratView' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_TamiratView.سطح_اهمیتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property علت_ورود() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_TamiratView.علت_ورودColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'علت ورود' in table 'Pm_Lab_Rol_TamiratView' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_TamiratView.علت_ورودColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاریخ_تعمیر() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_TamiratView.تاریخ_تعمیرColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تاریخ تعمیر' in table 'Pm_Lab_Rol_TamiratView' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_TamiratView.تاریخ_تعمیرColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاریخ_تحویل() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_TamiratView.تاریخ_تحویلColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تاریخ تحویل' in table 'Pm_Lab_Rol_TamiratView' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_TamiratView.تاریخ_تحویلColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاریخ_ورود() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_TamiratView.تاریخ_ورودColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تاریخ ورود' in table 'Pm_Lab_Rol_TamiratView' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_TamiratView.تاریخ_ورودColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property بازه_تعمیر() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_TamiratView.بازه_تعمیرColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'بازه تعمیر' in table 'Pm_Lab_Rol_TamiratView' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_TamiratView.بازه_تعمیرColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property بازه_تحویل() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_TamiratView.بازه_تحویلColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'بازه تحویل' in table 'Pm_Lab_Rol_TamiratView' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_TamiratView.بازه_تحویلColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_Pm_Hadese_KhesaratDevice() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_TamiratView.Srl_Pm_Hadese_KhesaratDeviceColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_Pm_Hadese_KhesaratDevice' in table 'Pm_Lab_Rol_TamiratV"& _ 
                            "iew' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_TamiratView.Srl_Pm_Hadese_KhesaratDeviceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsشمارهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_TamiratView.شمارهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetشمارهNull()
            Me(Me.tablePm_Lab_Rol_TamiratView.شمارهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنام_قطعهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_TamiratView.نام_قطعهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنام_قطعهNull()
            Me(Me.tablePm_Lab_Rol_TamiratView.نام_قطعهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsپستNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_TamiratView.پستColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetپستNull()
            Me(Me.tablePm_Lab_Rol_TamiratView.پستColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isسطح_اهمیتNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_TamiratView.سطح_اهمیتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setسطح_اهمیتNull()
            Me(Me.tablePm_Lab_Rol_TamiratView.سطح_اهمیتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isعلت_ورودNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_TamiratView.علت_ورودColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setعلت_ورودNull()
            Me(Me.tablePm_Lab_Rol_TamiratView.علت_ورودColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isتاریخ_تعمیرNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_TamiratView.تاریخ_تعمیرColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setتاریخ_تعمیرNull()
            Me(Me.tablePm_Lab_Rol_TamiratView.تاریخ_تعمیرColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isتاریخ_تحویلNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_TamiratView.تاریخ_تحویلColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setتاریخ_تحویلNull()
            Me(Me.tablePm_Lab_Rol_TamiratView.تاریخ_تحویلColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isتاریخ_ورودNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_TamiratView.تاریخ_ورودColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setتاریخ_ورودNull()
            Me(Me.tablePm_Lab_Rol_TamiratView.تاریخ_ورودColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isبازه_تعمیرNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_TamiratView.بازه_تعمیرColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setبازه_تعمیرNull()
            Me(Me.tablePm_Lab_Rol_TamiratView.بازه_تعمیرColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isبازه_تحویلNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_TamiratView.بازه_تحویلColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setبازه_تحویلNull()
            Me(Me.tablePm_Lab_Rol_TamiratView.بازه_تحویلColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_Pm_Hadese_KhesaratDeviceNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_TamiratView.Srl_Pm_Hadese_KhesaratDeviceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_Pm_Hadese_KhesaratDeviceNull()
            Me(Me.tablePm_Lab_Rol_TamiratView.Srl_Pm_Hadese_KhesaratDeviceColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Lab_Rol_Tamirat_GhateMasrafiRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Lab_Rol_Tamirat_GhateMasrafi As Pm_Lab_Rol_Tamirat_GhateMasrafiDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Lab_Rol_Tamirat_GhateMasrafi = CType(Me.Table,Pm_Lab_Rol_Tamirat_GhateMasrafiDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pm_Lab_Rol_GhatatMasrafi() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Tamirat_GhateMasrafi.Pm_Lab_Rol_GhatatMasrafiColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pm_Lab_Rol_GhatatMasrafi' in table 'Pm_Lab_Rol_Tamirat_Ghat"& _ 
                            "eMasrafi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Tamirat_GhateMasrafi.Pm_Lab_Rol_GhatatMasrafiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property قطعه_مصرفی() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Tamirat_GhateMasrafi.قطعه_مصرفیColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'قطعه مصرفی' in table 'Pm_Lab_Rol_Tamirat_GhateMasrafi' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Tamirat_GhateMasrafi.قطعه_مصرفیColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تعداد() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Tamirat_GhateMasrafi.تعدادColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تعداد' in table 'Pm_Lab_Rol_Tamirat_GhateMasrafi' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Tamirat_GhateMasrafi.تعدادColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPm_Lab_Rol_GhatatMasrafiNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Tamirat_GhateMasrafi.Pm_Lab_Rol_GhatatMasrafiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPm_Lab_Rol_GhatatMasrafiNull()
            Me(Me.tablePm_Lab_Rol_Tamirat_GhateMasrafi.Pm_Lab_Rol_GhatatMasrafiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isقطعه_مصرفیNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Tamirat_GhateMasrafi.قطعه_مصرفیColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setقطعه_مصرفیNull()
            Me(Me.tablePm_Lab_Rol_Tamirat_GhateMasrafi.قطعه_مصرفیColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتعدادNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Tamirat_GhateMasrafi.تعدادColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتعدادNull()
            Me(Me.tablePm_Lab_Rol_Tamirat_GhateMasrafi.تعدادColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Lab_Rol_SharheKarRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Lab_Rol_SharheKar As Pm_Lab_Rol_SharheKarDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Lab_Rol_SharheKar = CType(Me.Table,Pm_Lab_Rol_SharheKarDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Lab_Rol_SharheKar.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_SharheKar.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Date() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_SharheKar.DateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Date' in table 'Pm_Lab_Rol_SharheKar' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_SharheKar.DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dis() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_SharheKar.DisColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dis' in table 'Pm_Lab_Rol_SharheKar' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_SharheKar.DisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_Master() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_SharheKar.Srl_MasterColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_Master' in table 'Pm_Lab_Rol_SharheKar' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_SharheKar.Srl_MasterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl1() As Integer
            Get
                Return CType(Me(Me.tablePm_Lab_Rol_SharheKar.Srl1Column),Integer)
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_SharheKar.Srl1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_DateNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_SharheKar.DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_DateNull()
            Me(Me.tablePm_Lab_Rol_SharheKar.DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDisNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_SharheKar.DisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDisNull()
            Me(Me.tablePm_Lab_Rol_SharheKar.DisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_MasterNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_SharheKar.Srl_MasterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_MasterNull()
            Me(Me.tablePm_Lab_Rol_SharheKar.Srl_MasterColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Lab_Rol_Masool_TamirRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Lab_Rol_Masool_Tamir As Pm_Lab_Rol_Masool_TamirDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Lab_Rol_Masool_Tamir = CType(Me.Table,Pm_Lab_Rol_Masool_TamirDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Lab_Rol_Masool_Tamir.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Masool_Tamir.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Masool_Tamir.NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Name' in table 'Pm_Lab_Rol_Masool_Tamir' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Masool_Tamir.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Masool_Tamir.NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameNull()
            Me(Me.tablePm_Lab_Rol_Masool_Tamir.NameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Lab_Rol_TajhizRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Lab_Rol_Tajhiz As Pm_Lab_Rol_TajhizDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Lab_Rol_Tajhiz = CType(Me.Table,Pm_Lab_Rol_TajhizDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Lab_Rol_Tajhiz.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Tajhiz.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Tajhiz.NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Name' in table 'Pm_Lab_Rol_Tajhiz' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Tajhiz.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_Parent() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Tajhiz.Srl_ParentColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_Parent' in table 'Pm_Lab_Rol_Tajhiz' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Tajhiz.Srl_ParentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Tajhiz.NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameNull()
            Me(Me.tablePm_Lab_Rol_Tajhiz.NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_ParentNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Tajhiz.Srl_ParentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_ParentNull()
            Me(Me.tablePm_Lab_Rol_Tajhiz.Srl_ParentColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Lab_Rol_MahalRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Lab_Rol_Mahal As Pm_Lab_Rol_MahalDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Lab_Rol_Mahal = CType(Me.Table,Pm_Lab_Rol_MahalDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Lab_Rol_Mahal.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Mahal.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_Parent() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Mahal.Srl_ParentColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_Parent' in table 'Pm_Lab_Rol_Mahal' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Mahal.Srl_ParentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Mahal.NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Name' in table 'Pm_Lab_Rol_Mahal' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Mahal.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_ParentNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Mahal.Srl_ParentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_ParentNull()
            Me(Me.tablePm_Lab_Rol_Mahal.Srl_ParentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Mahal.NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameNull()
            Me(Me.tablePm_Lab_Rol_Mahal.NameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Lab_Rol_MasterRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Lab_Rol_Master As Pm_Lab_Rol_MasterDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Lab_Rol_Master = CType(Me.Table,Pm_Lab_Rol_MasterDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Lab_Rol_Master.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_Pm_Device_Sazande() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master.Srl_Pm_Device_SazandeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_Pm_Device_Sazande' in table 'Pm_Lab_Rol_Master' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master.Srl_Pm_Device_SazandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_Pm_Lab_Rol_Tajhiz() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master.Srl_Pm_Lab_Rol_TajhizColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_Pm_Lab_Rol_Tajhiz' in table 'Pm_Lab_Rol_Master' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master.Srl_Pm_Lab_Rol_TajhizColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_Pm_Lab_Rol_Masool_Tamir() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master.Srl_Pm_Lab_Rol_Masool_TamirColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_Pm_Lab_Rol_Masool_Tamir' in table 'Pm_Lab_Rol_Master' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master.Srl_Pm_Lab_Rol_Masool_TamirColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_Pm_Lab_Rol_SharheKar() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master.Srl_Pm_Lab_Rol_SharheKarColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_Pm_Lab_Rol_SharheKar' in table 'Pm_Lab_Rol_Master' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master.Srl_Pm_Lab_Rol_SharheKarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_Pm_Lab_Rol_Mahal_Nasb() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master.Srl_Pm_Lab_Rol_Mahal_NasbColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_Pm_Lab_Rol_Mahal_Nasb' in table 'Pm_Lab_Rol_Master' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master.Srl_Pm_Lab_Rol_Mahal_NasbColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property No() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master.NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'No' in table 'Pm_Lab_Rol_Master' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master.NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property No_Barcode() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master.No_BarcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'No_Barcode' in table 'Pm_Lab_Rol_Master' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master.No_BarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pelak_Amval() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master.Pelak_AmvalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pelak_Amval' in table 'Pm_Lab_Rol_Master' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master.Pelak_AmvalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VorodDate() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master.VorodDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VorodDate' in table 'Pm_Lab_Rol_Master' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master.VorodDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KhorojDate() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master.KhorojDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KhorojDate' in table 'Pm_Lab_Rol_Master' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master.KhorojDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tahvilgirande() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master.TahvilgirandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tahvilgirande' in table 'Pm_Lab_Rol_Master' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master.TahvilgirandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tahvildahande() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master.TahvildahandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tahvildahande' in table 'Pm_Lab_Rol_Master' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master.TahvildahandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Eib() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master.EibColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Eib' in table 'Pm_Lab_Rol_Master' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master.EibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dis() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master.DisColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dis' in table 'Pm_Lab_Rol_Master' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master.DisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubmitDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master.SubmitDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubmitDate' in table 'Pm_Lab_Rol_Master' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master.SubmitDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TahvildahandeNo() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master.TahvildahandeNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TahvildahandeNo' in table 'Pm_Lab_Rol_Master' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master.TahvildahandeNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl_Pm_Lab_Rol_Mahal_Bahre() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master.Srl_Pm_Lab_Rol_Mahal_BahreColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Srl_Pm_Lab_Rol_Mahal_Bahre' in table 'Pm_Lab_Rol_Master' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master.Srl_Pm_Lab_Rol_Mahal_BahreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SabtDate() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master.SabtDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SabtDate' in table 'Pm_Lab_Rol_Master' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master.SabtDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_Pm_Device_SazandeNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master.Srl_Pm_Device_SazandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_Pm_Device_SazandeNull()
            Me(Me.tablePm_Lab_Rol_Master.Srl_Pm_Device_SazandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_Pm_Lab_Rol_TajhizNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master.Srl_Pm_Lab_Rol_TajhizColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_Pm_Lab_Rol_TajhizNull()
            Me(Me.tablePm_Lab_Rol_Master.Srl_Pm_Lab_Rol_TajhizColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_Pm_Lab_Rol_Masool_TamirNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master.Srl_Pm_Lab_Rol_Masool_TamirColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_Pm_Lab_Rol_Masool_TamirNull()
            Me(Me.tablePm_Lab_Rol_Master.Srl_Pm_Lab_Rol_Masool_TamirColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_Pm_Lab_Rol_SharheKarNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master.Srl_Pm_Lab_Rol_SharheKarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_Pm_Lab_Rol_SharheKarNull()
            Me(Me.tablePm_Lab_Rol_Master.Srl_Pm_Lab_Rol_SharheKarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_Pm_Lab_Rol_Mahal_NasbNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master.Srl_Pm_Lab_Rol_Mahal_NasbColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_Pm_Lab_Rol_Mahal_NasbNull()
            Me(Me.tablePm_Lab_Rol_Master.Srl_Pm_Lab_Rol_Mahal_NasbColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master.NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoNull()
            Me(Me.tablePm_Lab_Rol_Master.NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNo_BarcodeNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master.No_BarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNo_BarcodeNull()
            Me(Me.tablePm_Lab_Rol_Master.No_BarcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPelak_AmvalNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master.Pelak_AmvalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPelak_AmvalNull()
            Me(Me.tablePm_Lab_Rol_Master.Pelak_AmvalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVorodDateNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master.VorodDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVorodDateNull()
            Me(Me.tablePm_Lab_Rol_Master.VorodDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKhorojDateNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master.KhorojDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKhorojDateNull()
            Me(Me.tablePm_Lab_Rol_Master.KhorojDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTahvilgirandeNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master.TahvilgirandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTahvilgirandeNull()
            Me(Me.tablePm_Lab_Rol_Master.TahvilgirandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTahvildahandeNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master.TahvildahandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTahvildahandeNull()
            Me(Me.tablePm_Lab_Rol_Master.TahvildahandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEibNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master.EibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEibNull()
            Me(Me.tablePm_Lab_Rol_Master.EibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDisNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master.DisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDisNull()
            Me(Me.tablePm_Lab_Rol_Master.DisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubmitDateNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master.SubmitDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubmitDateNull()
            Me(Me.tablePm_Lab_Rol_Master.SubmitDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTahvildahandeNoNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master.TahvildahandeNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTahvildahandeNoNull()
            Me(Me.tablePm_Lab_Rol_Master.TahvildahandeNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrl_Pm_Lab_Rol_Mahal_BahreNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master.Srl_Pm_Lab_Rol_Mahal_BahreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrl_Pm_Lab_Rol_Mahal_BahreNull()
            Me(Me.tablePm_Lab_Rol_Master.Srl_Pm_Lab_Rol_Mahal_BahreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSabtDateNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master.SabtDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSabtDateNull()
            Me(Me.tablePm_Lab_Rol_Master.SabtDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Pm_Lab_Rol_Master_VwRow
        Inherits Global.System.Data.DataRow
        
        Private tablePm_Lab_Rol_Master_Vw As Pm_Lab_Rol_Master_VwDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePm_Lab_Rol_Master_Vw = CType(Me.Table,Pm_Lab_Rol_Master_VwDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property نام_تجهیز() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master_Vw.نام_تجهیزColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'نام تجهیز' in table 'Pm_Lab_Rol_Master_Vw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master_Vw.نام_تجهیزColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property محل_استفاده_از_تجهیز() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master_Vw.محل_استفاده_از_تجهیزColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'محل استفاده از تجهیز' in table 'Pm_Lab_Rol_Master_Vw' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master_Vw.محل_استفاده_از_تجهیزColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Srl() As Integer
            Get
                Return CType(Me(Me.tablePm_Lab_Rol_Master_Vw.SrlColumn),Integer)
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master_Vw.SrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شماره() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master_Vw.شمارهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شماره' in table 'Pm_Lab_Rol_Master_Vw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master_Vw.شمارهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاریخ_ورود_تجهیز() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master_Vw.تاریخ_ورود_تجهیزColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تاریخ ورود تجهیز' in table 'Pm_Lab_Rol_Master_Vw' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master_Vw.تاریخ_ورود_تجهیزColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property مسئول_تعمیر() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master_Vw.مسئول_تعمیرColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'مسئول تعمیر' in table 'Pm_Lab_Rol_Master_Vw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master_Vw.مسئول_تعمیرColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاریخ_ثبت() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master_Vw.تاریخ_ثبتColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تاریخ ثبت' in table 'Pm_Lab_Rol_Master_Vw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master_Vw.تاریخ_ثبتColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property شرکت_سازنده() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master_Vw.شرکت_سازندهColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'شرکت سازنده' in table 'Pm_Lab_Rol_Master_Vw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master_Vw.شرکت_سازندهColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاریخ_خروج() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master_Vw.تاریخ_خروجColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تاریخ خروج' in table 'Pm_Lab_Rol_Master_Vw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master_Vw.تاریخ_خروجColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property بارکد() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master_Vw.بارکدColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'بارکد' in table 'Pm_Lab_Rol_Master_Vw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master_Vw.بارکدColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property تاریخ() As String
            Get
                Try 
                    Return CType(Me(Me.tablePm_Lab_Rol_Master_Vw.تاریخColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'تاریخ' in table 'Pm_Lab_Rol_Master_Vw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePm_Lab_Rol_Master_Vw.تاریخColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isنام_تجهیزNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master_Vw.نام_تجهیزColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setنام_تجهیزNull()
            Me(Me.tablePm_Lab_Rol_Master_Vw.نام_تجهیزColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isمحل_استفاده_از_تجهیزNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master_Vw.محل_استفاده_از_تجهیزColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setمحل_استفاده_از_تجهیزNull()
            Me(Me.tablePm_Lab_Rol_Master_Vw.محل_استفاده_از_تجهیزColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsشمارهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master_Vw.شمارهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetشمارهNull()
            Me(Me.tablePm_Lab_Rol_Master_Vw.شمارهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isتاریخ_ورود_تجهیزNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master_Vw.تاریخ_ورود_تجهیزColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setتاریخ_ورود_تجهیزNull()
            Me(Me.tablePm_Lab_Rol_Master_Vw.تاریخ_ورود_تجهیزColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isمسئول_تعمیرNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master_Vw.مسئول_تعمیرColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setمسئول_تعمیرNull()
            Me(Me.tablePm_Lab_Rol_Master_Vw.مسئول_تعمیرColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isتاریخ_ثبتNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master_Vw.تاریخ_ثبتColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setتاریخ_ثبتNull()
            Me(Me.tablePm_Lab_Rol_Master_Vw.تاریخ_ثبتColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isشرکت_سازندهNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master_Vw.شرکت_سازندهColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setشرکت_سازندهNull()
            Me(Me.tablePm_Lab_Rol_Master_Vw.شرکت_سازندهColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isتاریخ_خروجNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master_Vw.تاریخ_خروجColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setتاریخ_خروجNull()
            Me(Me.tablePm_Lab_Rol_Master_Vw.تاریخ_خروجColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsبارکدNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master_Vw.بارکدColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetبارکدNull()
            Me(Me.tablePm_Lab_Rol_Master_Vw.بارکدColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsتاریخNull() As Boolean
            Return Me.IsNull(Me.tablePm_Lab_Rol_Master_Vw.تاریخColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetتاریخNull()
            Me(Me.tablePm_Lab_Rol_Master_Vw.تاریخColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Lab_Rol_ElateVorodRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Lab_Rol_ElateVorodRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Lab_Rol_ElateVorodRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Lab_Rol_ElateVorodRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Lab_Rol_SatheAhamniatRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Lab_Rol_SatheAhamniatRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Lab_Rol_SatheAhamniatRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Lab_Rol_SatheAhamniatRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Device_SazandeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Device_SazandeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Device_SazandeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Device_SazandeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Lab_Rol_GhatatMasrafiRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Lab_Rol_GhatatMasrafiRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Lab_Rol_GhatatMasrafiRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Lab_Rol_GhatatMasrafiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Lab_Rol_TamiratViewRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Lab_Rol_TamiratViewRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Lab_Rol_TamiratViewRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Lab_Rol_TamiratViewRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Lab_Rol_Tamirat_GhateMasrafiRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Lab_Rol_Tamirat_GhateMasrafiRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Lab_Rol_Tamirat_GhateMasrafiRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Lab_Rol_Tamirat_GhateMasrafiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Lab_Rol_SharheKarRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Lab_Rol_SharheKarRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Lab_Rol_SharheKarRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Lab_Rol_SharheKarRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Lab_Rol_Masool_TamirRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Lab_Rol_Masool_TamirRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Lab_Rol_Masool_TamirRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Lab_Rol_Masool_TamirRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Lab_Rol_TajhizRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Lab_Rol_TajhizRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Lab_Rol_TajhizRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Lab_Rol_TajhizRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Lab_Rol_MahalRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Lab_Rol_MahalRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Lab_Rol_MahalRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Lab_Rol_MahalRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Lab_Rol_MasterRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Lab_Rol_MasterRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Lab_Rol_MasterRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Lab_Rol_MasterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Pm_Lab_Rol_Master_VwRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Pm_Lab_Rol_Master_VwRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Pm_Lab_Rol_Master_VwRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Pm_Lab_Rol_Master_VwRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace Ds_LabTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Lab_Rol_ElateVorodTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Lab_Rol_ElateVorod"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("علت ورود", "علت ورود")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Srl, Text as [علت ورود] FROM dbo.Pm_Lab_Rol_ElateVorod"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Lab.Pm_Lab_Rol_ElateVorodDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Lab.Pm_Lab_Rol_ElateVorodDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Lab.Pm_Lab_Rol_ElateVorodDataTable = New Ds_Lab.Pm_Lab_Rol_ElateVorodDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Lab_Rol_SatheAhamniatTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Lab_Rol_SatheAhamniat"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("سطح اهمیت", "سطح اهمیت")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Srl, Text AS [سطح اهمیت]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Pm_Lab_Rol_SatheAhamniat"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Lab.Pm_Lab_Rol_SatheAhamniatDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Lab.Pm_Lab_Rol_SatheAhamniatDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Lab.Pm_Lab_Rol_SatheAhamniatDataTable = New Ds_Lab.Pm_Lab_Rol_SatheAhamniatDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Device_SazandeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Device_Sazande"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("سازندگان", "سازندگان")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Srl, Text AS سازندگان"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Pm_Device_Sazande"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Order By "& _ 
                "Text"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Lab.Pm_Device_SazandeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Lab.Pm_Device_SazandeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Lab.Pm_Device_SazandeDataTable = New Ds_Lab.Pm_Device_SazandeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Lab_Rol_GhatatMasrafiTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Lab_Rol_GhatatMasrafi"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("قطعات مصرفی", "قطعات مصرفی")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Srl, text AS [قطعات مصرفی]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Pm_Lab_Rol_GhatatMasraf"& _ 
                "i"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Lab.Pm_Lab_Rol_GhatatMasrafiDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Lab.Pm_Lab_Rol_GhatatMasrafiDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Lab.Pm_Lab_Rol_GhatatMasrafiDataTable = New Ds_Lab.Pm_Lab_Rol_GhatatMasrafiDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Lab_Rol_TamiratViewTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Lab_Rol_TamiratView"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("شماره", "شماره")
            tableMapping.ColumnMappings.Add("نام قطعه", "نام قطعه")
            tableMapping.ColumnMappings.Add("پست", "پست")
            tableMapping.ColumnMappings.Add("سطح اهمیت", "سطح اهمیت")
            tableMapping.ColumnMappings.Add("علت ورود", "علت ورود")
            tableMapping.ColumnMappings.Add("تاریخ تعمیر", "تاریخ تعمیر")
            tableMapping.ColumnMappings.Add("تاریخ تحویل", "تاریخ تحویل")
            tableMapping.ColumnMappings.Add("تاریخ ورود", "تاریخ ورود")
            tableMapping.ColumnMappings.Add("بازه تعمیر", "بازه تعمیر")
            tableMapping.ColumnMappings.Add("بازه تحویل", "بازه تحویل")
            tableMapping.ColumnMappings.Add("Srl_Pm_Hadese_KhesaratDevice", "Srl_Pm_Hadese_KhesaratDevice")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(5) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT      dbo.Pm_Lab_Rol_Tamirat.Srl, dbo.Pm_Lab_Rol_Tamirat.No AS شماره, CASE "& _ 
                "WHEN srl_pm_tajhizname IS NULL "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      THEN Pm_Hadese_KhesaratDe"& _ 
                "vice.Name ELSE pm_tajhizname.name END AS [نام قطعه], dbo.Pm_Post.Name AS پست, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "                      dbo.Pm_Lab_Rol_SatheAhamniat.Text AS [سطح اهمیت], dbo.Pm_L"& _ 
                "ab_Rol_ElateVorod.Text AS [علت ورود], dbo.Pm_Lab_Rol_Tamirat.VorodDate AS [تاریخ"& _ 
                " ورود], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      dbo.Pm_Lab_Rol_Tamirat.VorodDateBound AS [بازه ت"& _ 
                "عمیر], dbo.Pm_Lab_Rol_Tamirat.TamirDate AS [تاریخ تعمیر], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    "& _ 
                "  dbo.Pm_Lab_Rol_Tamirat.TamirDateBound AS [بازه تحویل], dbo.Pm_Lab_Rol_Tamirat."& _ 
                "TahvilDate AS [تاریخ تحویل], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      dbo.Pm_Lab_Rol_Tamirat.Srl_"& _ 
                "Pm_Hadese_KhesaratDevice"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         dbo.Pm_Lab_Rol_Tamirat LEFT JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "               dbo.Pm_Lab_Rol_SatheAhamniat ON dbo.Pm_Lab_Rol_Tamirat.Srl_Pm_Lab"& _ 
                "_Rol_SatheAhamniat = dbo.Pm_Lab_Rol_SatheAhamniat.Srl  LEFT JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "        dbo.Pm_Hadese_KhesaratDevice ON dbo.Pm_Lab_Rol_Tamirat.Srl_Pm_Hadese_Khe"& _ 
                "saratDevice = dbo.Pm_Hadese_KhesaratDevice.Srl  LEFT JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                " dbo.Pm_Lab_Rol_ElateVorod ON dbo.Pm_Lab_Rol_Tamirat.Srl_Pm_Lab_Rol_ElateVorod ="& _ 
                " dbo.Pm_Lab_Rol_ElateVorod.Srl  LEFT JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      dbo.Pm_Post ON "& _ 
                "dbo.Pm_Lab_Rol_Tamirat.Srl_Pm_Post = dbo.Pm_Post.Srl LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"          "& _ 
                "            dbo.Pm_TajhizName ON dbo.Pm_TajhizName.Srl = dbo.Pm_Hadese_KhesaratD"& _ 
                "evice.Srl_pm_TajhizName"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY dbo.Pm_Lab_Rol_Tamirat.Srl DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT       distinct  Pm_Lab_Rol_Tamirat.Srl, Pm_Lab_Rol_Tamirat.No AS شماره, Pm"& _ 
                "_Hadese_KhesaratDevice.Name AS [نام قطعه], Pm_Post.Name AS پست, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "           Pm_Lab_Rol_SatheAhamniat.Text AS [سطح اهمیت], Pm_Lab_Rol_ElateVorod.T"& _ 
                "ext AS [علت ورود], Pm_Lab_Rol_Tamirat.VorodDate AS [تاریخ ورود], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "            Pm_Lab_Rol_Tamirat.VorodDateBound AS [بازه تعمیر], Pm_Lab_Rol_Tamira"& _ 
                "t.TamirDate AS [تاریخ تعمیر], Pm_Lab_Rol_Tamirat.TamirDateBound AS [بازه تحویل],"& _ 
                " "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Lab_Rol_Tamirat.TahvilDate AS [تاریخ تحویل]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM"& _ 
                "            Pm_Lab_Rol_Tamirat LEft JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Lab_Rol_Sa"& _ 
                "theAhamniat ON Pm_Lab_Rol_Tamirat.Srl_Pm_Lab_Rol_SatheAhamniat = Pm_Lab_Rol_Sath"& _ 
                "eAhamniat.Srl LEFT JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Hadese_KhesaratDevice ON Pm"& _ 
                "_Lab_Rol_Tamirat.Srl_Pm_Hadese_KhesaratDevice = Pm_Hadese_KhesaratDevice.Srl LeF"& _ 
                "T JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Lab_Rol_ElateVorod ON Pm_Lab_Rol_Tamirat.Srl"& _ 
                "_Pm_Lab_Rol_ElateVorod = Pm_Lab_Rol_ElateVorod.Srl LEFT JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "       Pm_Post ON Pm_Lab_Rol_Tamirat.Srl_Pm_Post = Pm_Post.Srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left join Pm_Lab"& _ 
                "_Rol_Tamirat_GheteMasrafi on Pm_Lab_Rol_Tamirat .Srl = Pm_Lab_Rol_Tamirat_GheteM"& _ 
                "asrafi .Srl_Pm_Lab_Rol_Tamirat "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Pm_Lab_Rol_Tamirat.Srl_Pm_Post = @Sr"& _ 
                "l_Pm_Post or @Srl_Pm_Post=-1) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Pm_Lab_Rol_Tamirat.Srl_Pm_Hadese_KhesaratDe"& _ 
                "vice = @Srl_Pm_Hadese_KhesaratDevice or @Srl_Pm_Hadese_KhesaratDevice=-1) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "(Pm_Lab_Rol_Tamirat.Srl_Pm_Lab_Rol_SatheAhamniat = @Srl_Pm_Lab_Rol_SatheAhamniat"& _ 
                " or @Srl_Pm_Lab_Rol_SatheAhamniat=-1) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Pm_Lab_Rol_Tamirat.Srl_Acc_Ashkhas_"& _ 
                "Tavasot = @Srl_Acc_Ashkhas_Tavasot or @Srl_Acc_Ashkhas_Tavasot=-1) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Pm_Lab"& _ 
                "_Rol_Tamirat.Srl_Pm_Lab_Rol_ElateVorod = @Srl_Pm_Lab_Rol_ElateVorod or @Srl_Pm_L"& _ 
                "ab_Rol_ElateVorod=-1) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Pm_Lab_Rol_Tamirat.No =@No or @No='-1') AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Pm_L"& _ 
                "ab_Rol_Tamirat.NafarSAt =@NafarSAt or @NafarSAt='-1') AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Pm_Lab_Rol_Tamirat."& _ 
                "VorodDate >= @VorodDateBegin or @VorodDateBegin='-1') AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Pm_Lab_Rol_Tamirat."& _ 
                "VorodDate <= @VorodDateEnd or @VorodDateEnd='-1') AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Pm_Lab_Rol_Tamirat.Tami"& _ 
                "rDate >= @TamirDateBegin or @TamirDateBegin='-1') AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Pm_Lab_Rol_Tamirat.Tami"& _ 
                "rDate <= @TamirDateEnd or @TamirDateEnd='-1') AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Pm_Lab_Rol_Tamirat.TahvilDa"& _ 
                "te >= @TahvilDateBegin or @TahvilDateBegin='-1') AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Pm_Lab_Rol_Tamirat.Tahvi"& _ 
                "lDate <= @TahvilDateEnd or @TahvilDateEnd='-1') AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Pm_Lab_Rol_Tamirat.SabtDa"& _ 
                "te >= @SabtDateBegin or @SabtDateBegin ='-1') AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Pm_Lab_Rol_Tamirat.SabtDate"& _ 
                " <= @SabtDateTo or @SabtDateTo='-1') AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Pm_Lab_Rol_Tamirat_GheteMasrafi .Pm_"& _ 
                "Lab_Rol_GhatatMasrafi = @SrlGhete or @SrlGhete=-1) AND"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Pm_Lab_Rol_Tamirat.Srl_"& _ 
                "Acc_Ashkhas_Tahvil = @Srl_Acc_Ashkhas_Tahvil or @Srl_Acc_Ashkhas_Tahvil=-1) AND "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Pm_Lab_Rol_Tamirat.Dis LIKE @Dis or @Dis='-1')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Pm_Lab_Rol_Tamirat.S"& _ 
                "rl DESC"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Pm_Post", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Post", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Pm_Hadese_KhesaratDevice", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Hadese_KhesaratDevice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Pm_Lab_Rol_SatheAhamniat", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_SatheAhamniat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Acc_Ashkhas_Tavasot", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Acc_Ashkhas_Tavasot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Pm_Lab_Rol_ElateVorod", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_ElateVorod", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@No", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "شماره", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NafarSAt", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "NafarSAt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VorodDateBegin", Global.System.Data.SqlDbType.NVarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "تاریخ ورود", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VorodDateEnd", Global.System.Data.SqlDbType.NVarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "تاریخ ورود", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TamirDateBegin", Global.System.Data.SqlDbType.NVarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "تاریخ تعمیر", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TamirDateEnd", Global.System.Data.SqlDbType.NVarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "تاریخ تعمیر", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TahvilDateBegin", Global.System.Data.SqlDbType.NVarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "تاریخ تحویل", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TahvilDateEnd", Global.System.Data.SqlDbType.NVarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "تاریخ تحویل", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SabtDateBegin", Global.System.Data.SqlDbType.NVarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "SabtDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SabtDateTo", Global.System.Data.SqlDbType.NVarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "SabtDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SrlGhete", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Pm_Lab_Rol_GhatatMasrafi", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Acc_Ashkhas_Tahvil", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Acc_Ashkhas_Tahvil", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dis", Global.System.Data.SqlDbType.NVarChar, 500, Global.System.Data.ParameterDirection.Input, 0, 0, "Dis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        TOP (100) PERCENT Pm_Lab_Rol_Tamirat.Srl, Pm_Lab_Rol_Tamirat.No AS "& _ 
                "شماره, Pm_Hadese_KhesaratDevice.Name AS [نام قطعه], Pm_Post.Name AS پست, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                    Pm_Lab_Rol_SatheAhamniat.Text AS [سطح اهمیت], Pm_Lab_Rol_Ela"& _ 
                "teVorod.Text AS [علت ورود], Pm_Lab_Rol_Tamirat.VorodDate AS [تاریخ ورود], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "                     Pm_Lab_Rol_Tamirat.VorodDateBound AS [بازه تعمیر], Pm_Lab_R"& _ 
                "ol_Tamirat.TamirDate AS [تاریخ تعمیر], Pm_Lab_Rol_Tamirat.TamirDateBound AS [باز"& _ 
                "ه تحویل], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Lab_Rol_Tamirat.TahvilDate AS [تاریخ تحو"& _ 
                "یل]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Pm_Lab_Rol_Tamirat INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_"& _ 
                "Lab_Rol_SatheAhamniat ON Pm_Lab_Rol_Tamirat.Srl_Pm_Lab_Rol_SatheAhamniat = Pm_La"& _ 
                "b_Rol_SatheAhamniat.Srl INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Hadese_KhesaratD"& _ 
                "evice ON Pm_Lab_Rol_Tamirat.Srl_Pm_Hadese_KhesaratDevice = Pm_Hadese_KhesaratDev"& _ 
                "ice.Srl INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Lab_Rol_ElateVorod ON Pm_Lab_Rol"& _ 
                "_Tamirat.Srl_Pm_Lab_Rol_ElateVorod = Pm_Lab_Rol_ElateVorod.Srl INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                    Pm_Post ON Pm_Lab_Rol_Tamirat.Srl_Pm_Post = Pm_Post.Srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHE"& _ 
                "RE        (Pm_Lab_Rol_Tamirat.TamirDateBound < @tarikhJary) AND (Pm_Lab_Rol_Tami"& _ 
                "rat.TahvilDate = N'')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Pm_Lab_Rol_Tamirat.Srl DESC"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tarikhJary", Global.System.Data.SqlDbType.NVarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "بازه تحویل", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT        TOP (100) PERCENT Pm_Lab_Rol_Tamirat.Srl, Pm_Lab_Rol_Tamirat.No AS "& _ 
                "شماره, Pm_Hadese_KhesaratDevice.Name AS [نام قطعه], Pm_Post.Name AS پست, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                    Pm_Lab_Rol_SatheAhamniat.Text AS [سطح اهمیت], Pm_Lab_Rol_Ela"& _ 
                "teVorod.Text AS [علت ورود], Pm_Lab_Rol_Tamirat.VorodDate AS [تاریخ ورود], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "                     Pm_Lab_Rol_Tamirat.VorodDateBound AS [بازه تعمیر], Pm_Lab_R"& _ 
                "ol_Tamirat.TamirDate AS [تاریخ تعمیر], Pm_Lab_Rol_Tamirat.TamirDateBound AS [باز"& _ 
                "ه تحویل], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Lab_Rol_Tamirat.TahvilDate AS [تاریخ تحو"& _ 
                "یل]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Pm_Lab_Rol_Tamirat INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_"& _ 
                "Lab_Rol_SatheAhamniat ON Pm_Lab_Rol_Tamirat.Srl_Pm_Lab_Rol_SatheAhamniat = Pm_La"& _ 
                "b_Rol_SatheAhamniat.Srl INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Hadese_KhesaratD"& _ 
                "evice ON Pm_Lab_Rol_Tamirat.Srl_Pm_Hadese_KhesaratDevice = Pm_Hadese_KhesaratDev"& _ 
                "ice.Srl INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Lab_Rol_ElateVorod ON Pm_Lab_Rol"& _ 
                "_Tamirat.Srl_Pm_Lab_Rol_ElateVorod = Pm_Lab_Rol_ElateVorod.Srl INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                    Pm_Post ON Pm_Lab_Rol_Tamirat.Srl_Pm_Post = Pm_Post.Srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHE"& _ 
                "RE        (Pm_Lab_Rol_Tamirat.TahvilDate = N'')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Pm_Lab_Rol_Tamirat.Srl"& _ 
                " DESC"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT        TOP (100) PERCENT Pm_Lab_Rol_Tamirat.Srl, Pm_Lab_Rol_Tamirat.No AS "& _ 
                "شماره, Pm_Hadese_KhesaratDevice.Name AS [نام قطعه], Pm_Post.Name AS پست, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                    Pm_Lab_Rol_SatheAhamniat.Text AS [سطح اهمیت], Pm_Lab_Rol_Ela"& _ 
                "teVorod.Text AS [علت ورود], Pm_Lab_Rol_Tamirat.VorodDate AS [تاریخ ورود], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "                     Pm_Lab_Rol_Tamirat.VorodDateBound AS [بازه تعمیر], Pm_Lab_R"& _ 
                "ol_Tamirat.TamirDate AS [تاریخ تعمیر], Pm_Lab_Rol_Tamirat.TamirDateBound AS [باز"& _ 
                "ه تحویل], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Lab_Rol_Tamirat.TahvilDate AS [تاریخ تحو"& _ 
                "یل]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Pm_Lab_Rol_Tamirat INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_"& _ 
                "Lab_Rol_SatheAhamniat ON Pm_Lab_Rol_Tamirat.Srl_Pm_Lab_Rol_SatheAhamniat = Pm_La"& _ 
                "b_Rol_SatheAhamniat.Srl INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Hadese_KhesaratD"& _ 
                "evice ON Pm_Lab_Rol_Tamirat.Srl_Pm_Hadese_KhesaratDevice = Pm_Hadese_KhesaratDev"& _ 
                "ice.Srl INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Lab_Rol_ElateVorod ON Pm_Lab_Rol"& _ 
                "_Tamirat.Srl_Pm_Lab_Rol_ElateVorod = Pm_Lab_Rol_ElateVorod.Srl INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                    Pm_Post ON Pm_Lab_Rol_Tamirat.Srl_Pm_Post = Pm_Post.Srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHE"& _ 
                "RE        (Pm_Lab_Rol_Tamirat.VorodDateBound < @tarikhJary) AND (Pm_Lab_Rol_Tami"& _ 
                "rat.TamirDate = N'')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Pm_Lab_Rol_Tamirat.Srl DESC"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tarikhJary", Global.System.Data.SqlDbType.NVarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "بازه تعمیر", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT        TOP (100) PERCENT Pm_Lab_Rol_Tamirat.Srl, Pm_Lab_Rol_Tamirat.No AS "& _ 
                "شماره, Pm_Hadese_KhesaratDevice.Name AS [نام قطعه], Pm_Post.Name AS پست, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                    Pm_Lab_Rol_SatheAhamniat.Text AS [سطح اهمیت], Pm_Lab_Rol_Ela"& _ 
                "teVorod.Text AS [علت ورود], Pm_Lab_Rol_Tamirat.VorodDate AS [تاریخ ورود], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "                     Pm_Lab_Rol_Tamirat.VorodDateBound AS [بازه تعمیر], Pm_Lab_R"& _ 
                "ol_Tamirat.TamirDate AS [تاریخ تعمیر], Pm_Lab_Rol_Tamirat.TamirDateBound AS [باز"& _ 
                "ه تحویل], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Lab_Rol_Tamirat.TahvilDate AS [تاریخ تحو"& _ 
                "یل]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Pm_Lab_Rol_Tamirat INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_"& _ 
                "Lab_Rol_SatheAhamniat ON Pm_Lab_Rol_Tamirat.Srl_Pm_Lab_Rol_SatheAhamniat = Pm_La"& _ 
                "b_Rol_SatheAhamniat.Srl INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Hadese_KhesaratD"& _ 
                "evice ON Pm_Lab_Rol_Tamirat.Srl_Pm_Hadese_KhesaratDevice = Pm_Hadese_KhesaratDev"& _ 
                "ice.Srl INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Lab_Rol_ElateVorod ON Pm_Lab_Rol"& _ 
                "_Tamirat.Srl_Pm_Lab_Rol_ElateVorod = Pm_Lab_Rol_ElateVorod.Srl INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                    Pm_Post ON Pm_Lab_Rol_Tamirat.Srl_Pm_Post = Pm_Post.Srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHE"& _ 
                "RE        (Pm_Lab_Rol_Tamirat.TamirDate = N'')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Pm_Lab_Rol_Tamirat.Srl "& _ 
                "DESC"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Lab.Pm_Lab_Rol_TamiratViewDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Lab.Pm_Lab_Rol_TamiratViewDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Lab.Pm_Lab_Rol_TamiratViewDataTable = New Ds_Lab.Pm_Lab_Rol_TamiratViewDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySearchOption( _
                    ByVal dataTable As Ds_Lab.Pm_Lab_Rol_TamiratViewDataTable,  _
                    ByVal Srl_Pm_Post As Integer,  _
                    ByVal Srl_Pm_Hadese_KhesaratDevice As Global.System.Nullable(Of Integer),  _
                    ByVal Srl_Pm_Lab_Rol_SatheAhamniat As Global.System.Nullable(Of Integer),  _
                    ByVal Srl_Acc_Ashkhas_Tavasot As Global.System.Nullable(Of Integer),  _
                    ByVal Srl_Pm_Lab_Rol_ElateVorod As Global.System.Nullable(Of Integer),  _
                    ByVal No As String,  _
                    ByVal NafarSAt As Global.System.Nullable(Of Integer),  _
                    ByVal VorodDateBegin As String,  _
                    ByVal VorodDateEnd As String,  _
                    ByVal TamirDateBegin As String,  _
                    ByVal TamirDateEnd As String,  _
                    ByVal TahvilDateBegin As String,  _
                    ByVal TahvilDateEnd As String,  _
                    ByVal SabtDateBegin As String,  _
                    ByVal SabtDateTo As String,  _
                    ByVal SrlGhete As Global.System.Nullable(Of Integer),  _
                    ByVal Srl_Acc_Ashkhas_Tahvil As Global.System.Nullable(Of Integer),  _
                    ByVal Dis As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_Pm_Post,Integer)
            If (Srl_Pm_Hadese_KhesaratDevice.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Srl_Pm_Hadese_KhesaratDevice.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Srl_Pm_Lab_Rol_SatheAhamniat.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Srl_Pm_Lab_Rol_SatheAhamniat.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Srl_Acc_Ashkhas_Tavasot.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Srl_Acc_Ashkhas_Tavasot.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Srl_Pm_Lab_Rol_ElateVorod.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Srl_Pm_Lab_Rol_ElateVorod.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(No,String)
            End If
            If (NafarSAt.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(NafarSAt.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (VorodDateBegin Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(VorodDateBegin,String)
            End If
            If (VorodDateEnd Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(VorodDateEnd,String)
            End If
            If (TamirDateBegin Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(TamirDateBegin,String)
            End If
            If (TamirDateEnd Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(TamirDateEnd,String)
            End If
            If (TahvilDateBegin Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(TahvilDateBegin,String)
            End If
            If (TahvilDateEnd Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(TahvilDateEnd,String)
            End If
            If (SabtDateBegin Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(13).Value = CType(SabtDateBegin,String)
            End If
            If (SabtDateTo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(14).Value = CType(SabtDateTo,String)
            End If
            If (SrlGhete.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(15).Value = CType(SrlGhete.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Srl_Acc_Ashkhas_Tahvil.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(16).Value = CType(Srl_Acc_Ashkhas_Tahvil.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Dis Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(17).Value = CType(Dis,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBySearchOption( _
                    ByVal Srl_Pm_Post As Integer,  _
                    ByVal Srl_Pm_Hadese_KhesaratDevice As Global.System.Nullable(Of Integer),  _
                    ByVal Srl_Pm_Lab_Rol_SatheAhamniat As Global.System.Nullable(Of Integer),  _
                    ByVal Srl_Acc_Ashkhas_Tavasot As Global.System.Nullable(Of Integer),  _
                    ByVal Srl_Pm_Lab_Rol_ElateVorod As Global.System.Nullable(Of Integer),  _
                    ByVal No As String,  _
                    ByVal NafarSAt As Global.System.Nullable(Of Integer),  _
                    ByVal VorodDateBegin As String,  _
                    ByVal VorodDateEnd As String,  _
                    ByVal TamirDateBegin As String,  _
                    ByVal TamirDateEnd As String,  _
                    ByVal TahvilDateBegin As String,  _
                    ByVal TahvilDateEnd As String,  _
                    ByVal SabtDateBegin As String,  _
                    ByVal SabtDateTo As String,  _
                    ByVal SrlGhete As Global.System.Nullable(Of Integer),  _
                    ByVal Srl_Acc_Ashkhas_Tahvil As Global.System.Nullable(Of Integer),  _
                    ByVal Dis As String) As Ds_Lab.Pm_Lab_Rol_TamiratViewDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_Pm_Post,Integer)
            If (Srl_Pm_Hadese_KhesaratDevice.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Srl_Pm_Hadese_KhesaratDevice.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Srl_Pm_Lab_Rol_SatheAhamniat.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Srl_Pm_Lab_Rol_SatheAhamniat.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Srl_Acc_Ashkhas_Tavasot.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Srl_Acc_Ashkhas_Tavasot.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Srl_Pm_Lab_Rol_ElateVorod.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Srl_Pm_Lab_Rol_ElateVorod.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(No,String)
            End If
            If (NafarSAt.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(NafarSAt.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (VorodDateBegin Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(VorodDateBegin,String)
            End If
            If (VorodDateEnd Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(VorodDateEnd,String)
            End If
            If (TamirDateBegin Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(TamirDateBegin,String)
            End If
            If (TamirDateEnd Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(TamirDateEnd,String)
            End If
            If (TahvilDateBegin Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(TahvilDateBegin,String)
            End If
            If (TahvilDateEnd Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(TahvilDateEnd,String)
            End If
            If (SabtDateBegin Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(13).Value = CType(SabtDateBegin,String)
            End If
            If (SabtDateTo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(14).Value = CType(SabtDateTo,String)
            End If
            If (SrlGhete.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(15).Value = CType(SrlGhete.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Srl_Acc_Ashkhas_Tahvil.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(16).Value = CType(Srl_Acc_Ashkhas_Tahvil.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Dis Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(17).Value = CType(Dis,String)
            End If
            Dim dataTable As Ds_Lab.Pm_Lab_Rol_TamiratViewDataTable = New Ds_Lab.Pm_Lab_Rol_TamiratViewDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByTahvilDateBound(ByVal dataTable As Ds_Lab.Pm_Lab_Rol_TamiratViewDataTable, ByVal tarikhJary As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (tarikhJary Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(tarikhJary,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByTahvilDateBound(ByVal tarikhJary As String) As Ds_Lab.Pm_Lab_Rol_TamiratViewDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (tarikhJary Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(tarikhJary,String)
            End If
            Dim dataTable As Ds_Lab.Pm_Lab_Rol_TamiratViewDataTable = New Ds_Lab.Pm_Lab_Rol_TamiratViewDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByTahvilDateEmpty(ByVal dataTable As Ds_Lab.Pm_Lab_Rol_TamiratViewDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBytahvilDateEmpty() As Ds_Lab.Pm_Lab_Rol_TamiratViewDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Dim dataTable As Ds_Lab.Pm_Lab_Rol_TamiratViewDataTable = New Ds_Lab.Pm_Lab_Rol_TamiratViewDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByTamirDateBound(ByVal dataTable As Ds_Lab.Pm_Lab_Rol_TamiratViewDataTable, ByVal tarikhJary As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (tarikhJary Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(tarikhJary,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByTamirDateBound(ByVal tarikhJary As String) As Ds_Lab.Pm_Lab_Rol_TamiratViewDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (tarikhJary Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(tarikhJary,String)
            End If
            Dim dataTable As Ds_Lab.Pm_Lab_Rol_TamiratViewDataTable = New Ds_Lab.Pm_Lab_Rol_TamiratViewDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByTamirDateEmpty(ByVal dataTable As Ds_Lab.Pm_Lab_Rol_TamiratViewDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByTamirDateEmpty() As Ds_Lab.Pm_Lab_Rol_TamiratViewDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Dim dataTable As Ds_Lab.Pm_Lab_Rol_TamiratViewDataTable = New Ds_Lab.Pm_Lab_Rol_TamiratViewDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Lab_Rol_Tamirat_GhateMasrafiTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Lab_Rol_Tamirat_GhateMasrafi"
            tableMapping.ColumnMappings.Add("Pm_Lab_Rol_GhatatMasrafi", "Pm_Lab_Rol_GhatatMasrafi")
            tableMapping.ColumnMappings.Add("قطعه مصرفی", "قطعه مصرفی")
            tableMapping.ColumnMappings.Add("تعداد", "تعداد")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Pm_Lab_Rol_Tamirat_GheteMasrafi.Pm_Lab_Rol_GhatatMasrafi, Pm_Lab_Ro"& _ 
                "l_GhatatMasrafi.text AS [قطعه مصرفی], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Lab_Rol_Tami"& _ 
                "rat_GheteMasrafi.tedad AS تعداد"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Pm_Lab_Rol_Tamirat_GheteMasrafi"& _ 
                " INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Pm_Lab_Rol_GhatatMasrafi ON Pm_Lab_Rol_Tam"& _ 
                "irat_GheteMasrafi.Pm_Lab_Rol_GhatatMasrafi = Pm_Lab_Rol_GhatatMasrafi.Srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"& _ 
                "        (Pm_Lab_Rol_Tamirat_GheteMasrafi.Srl_Pm_Lab_Rol_Tamirat = @Srl_Pm_Lab_Ro"& _ 
                "l_Tamirat) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         (@Srl_Pm_Lab_Rol_Tamirat = - 1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Pm_Lab_Rol_Tamirat", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Tamirat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Lab.Pm_Lab_Rol_Tamirat_GhateMasrafiDataTable, ByVal Srl_Pm_Lab_Rol_Tamirat As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_Pm_Lab_Rol_Tamirat.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_Pm_Lab_Rol_Tamirat.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Srl_Pm_Lab_Rol_Tamirat As Global.System.Nullable(Of Integer)) As Ds_Lab.Pm_Lab_Rol_Tamirat_GhateMasrafiDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_Pm_Lab_Rol_Tamirat.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_Pm_Lab_Rol_Tamirat.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Ds_Lab.Pm_Lab_Rol_Tamirat_GhateMasrafiDataTable = New Ds_Lab.Pm_Lab_Rol_Tamirat_GhateMasrafiDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Lab_Rol_SharheKarTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Lab_Rol_SharheKar"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("Date", "Date")
            tableMapping.ColumnMappings.Add("Dis", "Dis")
            tableMapping.ColumnMappings.Add("Srl_Master", "Srl_Master")
            tableMapping.ColumnMappings.Add("Srl1", "Srl1")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Pm_Lab_Rol_SharheKar.Srl, Pm_Lab_Rol_SharheKar.Date, Pm_Lab_Rol_SharheKar."& _ 
                "Dis, Pm_Lab_Rol_SharheKar.Srl_Master, Pm_Lab_Rol_Master.Srl FROM dbo.Pm_Lab_Rol_"& _ 
                "SharheKar Inner join dbo.Pm_Lab_Rol_Master ON dbo.Pm_Lab_Rol_SharheKar.Srl_Maste"& _ 
                "r=dbo.Pm_Lab_Rol_Master.Srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where (Pm_Lab_Rol_SharheKar.Srl_Master= @Srl_Mast"& _ 
                "er OR @Srl_Master=-1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Master", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Master", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Lab.Pm_Lab_Rol_SharheKarDataTable, ByVal Srl_Master As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_Master.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_Master.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Srl_Master As Global.System.Nullable(Of Integer)) As Ds_Lab.Pm_Lab_Rol_SharheKarDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Srl_Master.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Srl_Master.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Ds_Lab.Pm_Lab_Rol_SharheKarDataTable = New Ds_Lab.Pm_Lab_Rol_SharheKarDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Lab_Rol_Masool_TamirTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Lab_Rol_Masool_Tamir"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("Name", "Name")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Pm_Lab_Rol_Masool_Tamir] ([Name]) VALUES (@Name)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Srl, Name  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM dbo.Pm_Lab_Rol_Masool_Tamir"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Lab.Pm_Lab_Rol_Masool_TamirDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Lab.Pm_Lab_Rol_Masool_TamirDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Lab.Pm_Lab_Rol_Masool_TamirDataTable = New Ds_Lab.Pm_Lab_Rol_Masool_TamirDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds_Lab.Pm_Lab_Rol_Masool_TamirDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds_Lab) As Integer
            Return Me.Adapter.Update(dataSet, "Pm_Lab_Rol_Masool_Tamir")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Name As String) As Integer
            If (Name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Lab_Rol_TajhizTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Lab_Rol_Tajhiz"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("Name", "Name")
            tableMapping.ColumnMappings.Add("Srl_Parent", "Srl_Parent")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Pm_Lab_Rol_Tajhiz] WHERE (([Srl] = @Original_Srl) AND ((@IsNul"& _ 
                "l_Name = 1 AND [Name] IS NULL) OR ([Name] = @Original_Name)) AND ((@IsNull_Srl_P"& _ 
                "arent = 1 AND [Srl_Parent] IS NULL) OR ([Srl_Parent] = @Original_Srl_Parent)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Name", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Srl_Parent", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Parent", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl_Parent", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Parent", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Pm_Lab_Rol_Tajhiz] ([Name], [Srl_Parent]) VALUES (@Name, @Srl_"& _ 
                "Parent);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Srl, Name, Srl_Parent FROM Pm_Lab_Rol_Tajhiz WHERE (Srl = SCOPE"& _ 
                "_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Parent", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Parent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Pm_Lab_Rol_Tajhiz] SET [Name] = @Name, [Srl_Parent] = @Srl_Parent W"& _ 
                "HERE (([Srl] = @Original_Srl) AND ((@IsNull_Name = 1 AND [Name] IS NULL) OR ([Na"& _ 
                "me] = @Original_Name)) AND ((@IsNull_Srl_Parent = 1 AND [Srl_Parent] IS NULL) OR"& _ 
                " ([Srl_Parent] = @Original_Srl_Parent)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Srl, Name, Srl_Parent FROM Pm_"& _ 
                "Lab_Rol_Tajhiz WHERE (Srl = @Srl)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Parent", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Parent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Name", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Srl_Parent", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Parent", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl_Parent", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Parent", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT * FROM dbo.Pm_Lab_Rol_Tajhiz"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Lab.Pm_Lab_Rol_TajhizDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Lab.Pm_Lab_Rol_TajhizDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Lab.Pm_Lab_Rol_TajhizDataTable = New Ds_Lab.Pm_Lab_Rol_TajhizDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds_Lab.Pm_Lab_Rol_TajhizDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds_Lab) As Integer
            Return Me.Adapter.Update(dataSet, "Pm_Lab_Rol_Tajhiz")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Srl As Integer, ByVal Original_Name As String, ByVal Original_Srl_Parent As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Srl,Integer)
            If (Original_Name Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Name,String)
            End If
            If (Original_Srl_Parent.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Srl_Parent.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Name As String, ByVal Srl_Parent As Global.System.Nullable(Of Integer)) As Integer
            If (Name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Name,String)
            End If
            If (Srl_Parent.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Srl_Parent.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Name As String, ByVal Srl_Parent As Global.System.Nullable(Of Integer), ByVal Original_Srl As Integer, ByVal Original_Name As String, ByVal Original_Srl_Parent As Global.System.Nullable(Of Integer), ByVal Srl As Integer) As Integer
            If (Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Name,String)
            End If
            If (Srl_Parent.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Srl_Parent.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_Srl,Integer)
            If (Original_Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_Name,String)
            End If
            If (Original_Srl_Parent.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_Srl_Parent.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Srl,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Name As String, ByVal Srl_Parent As Global.System.Nullable(Of Integer), ByVal Original_Srl As Integer, ByVal Original_Name As String, ByVal Original_Srl_Parent As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Name, Srl_Parent, Original_Srl, Original_Name, Original_Srl_Parent, Original_Srl)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Lab_Rol_MahalTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Lab_Rol_Mahal"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("Srl_Parent", "Srl_Parent")
            tableMapping.ColumnMappings.Add("Name", "Name")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Pm_Lab_Rol_Mahal] WHERE (([Srl] = @Original_Srl) AND ((@IsNull"& _ 
                "_Srl_Parent = 1 AND [Srl_Parent] IS NULL) OR ([Srl_Parent] = @Original_Srl_Paren"& _ 
                "t)) AND ((@IsNull_Name = 1 AND [Name] IS NULL) OR ([Name] = @Original_Name)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Srl_Parent", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Parent", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl_Parent", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Parent", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Name", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Pm_Lab_Rol_Mahal] ([Srl_Parent], [Name]) VALUES (@Srl_Parent, "& _ 
                "@Name);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Srl, Srl_Parent, Name FROM Pm_Lab_Rol_Mahal WHERE (Srl = SCOPE_I"& _ 
                "DENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Parent", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Parent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Pm_Lab_Rol_Mahal] SET [Srl_Parent] = @Srl_Parent, [Name] = @Name WH"& _ 
                "ERE (([Srl] = @Original_Srl) AND ((@IsNull_Srl_Parent = 1 AND [Srl_Parent] IS NU"& _ 
                "LL) OR ([Srl_Parent] = @Original_Srl_Parent)) AND ((@IsNull_Name = 1 AND [Name] "& _ 
                "IS NULL) OR ([Name] = @Original_Name)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Srl, Srl_Parent, Name FROM Pm_L"& _ 
                "ab_Rol_Mahal WHERE (Srl = @Srl)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Parent", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Parent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Srl_Parent", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Parent", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl_Parent", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Parent", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Name", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT * FROM dbo.Pm_Lab_Rol_Mahal "
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Lab.Pm_Lab_Rol_MahalDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Lab.Pm_Lab_Rol_MahalDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Lab.Pm_Lab_Rol_MahalDataTable = New Ds_Lab.Pm_Lab_Rol_MahalDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds_Lab.Pm_Lab_Rol_MahalDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds_Lab) As Integer
            Return Me.Adapter.Update(dataSet, "Pm_Lab_Rol_Mahal")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Srl As Integer, ByVal Original_Srl_Parent As Global.System.Nullable(Of Integer), ByVal Original_Name As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Srl,Integer)
            If (Original_Srl_Parent.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Srl_Parent.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_Name Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Srl_Parent As Global.System.Nullable(Of Integer), ByVal Name As String) As Integer
            If (Srl_Parent.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Srl_Parent.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Srl_Parent As Global.System.Nullable(Of Integer), ByVal Name As String, ByVal Original_Srl As Integer, ByVal Original_Srl_Parent As Global.System.Nullable(Of Integer), ByVal Original_Name As String, ByVal Srl As Integer) As Integer
            If (Srl_Parent.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Srl_Parent.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_Srl,Integer)
            If (Original_Srl_Parent.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_Srl_Parent.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_Name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Srl,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Srl_Parent As Global.System.Nullable(Of Integer), ByVal Name As String, ByVal Original_Srl As Integer, ByVal Original_Srl_Parent As Global.System.Nullable(Of Integer), ByVal Original_Name As String) As Integer
            Return Me.Update(Srl_Parent, Name, Original_Srl, Original_Srl_Parent, Original_Name, Original_Srl)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Lab_Rol_MasterTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Lab_Rol_Master"
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("Srl_Pm_Device_Sazande", "Srl_Pm_Device_Sazande")
            tableMapping.ColumnMappings.Add("Srl_Pm_Lab_Rol_Tajhiz", "Srl_Pm_Lab_Rol_Tajhiz")
            tableMapping.ColumnMappings.Add("Srl_Pm_Lab_Rol_Masool_Tamir", "Srl_Pm_Lab_Rol_Masool_Tamir")
            tableMapping.ColumnMappings.Add("Srl_Pm_Lab_Rol_SharheKar", "Srl_Pm_Lab_Rol_SharheKar")
            tableMapping.ColumnMappings.Add("Srl_Pm_Lab_Rol_Mahal_Nasb", "Srl_Pm_Lab_Rol_Mahal_Nasb")
            tableMapping.ColumnMappings.Add("No", "No")
            tableMapping.ColumnMappings.Add("No_Barcode", "No_Barcode")
            tableMapping.ColumnMappings.Add("Pelak_Amval", "Pelak_Amval")
            tableMapping.ColumnMappings.Add("VorodDate", "VorodDate")
            tableMapping.ColumnMappings.Add("KhorojDate", "KhorojDate")
            tableMapping.ColumnMappings.Add("Tahvilgirande", "Tahvilgirande")
            tableMapping.ColumnMappings.Add("Tahvildahande", "Tahvildahande")
            tableMapping.ColumnMappings.Add("Eib", "Eib")
            tableMapping.ColumnMappings.Add("Dis", "Dis")
            tableMapping.ColumnMappings.Add("SubmitDate", "SubmitDate")
            tableMapping.ColumnMappings.Add("TahvildahandeNo", "TahvildahandeNo")
            tableMapping.ColumnMappings.Add("Srl_Pm_Lab_Rol_Mahal_Bahre", "Srl_Pm_Lab_Rol_Mahal_Bahre")
            tableMapping.ColumnMappings.Add("SabtDate", "SabtDate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Pm_Lab_Rol_Master] WHERE (([Srl] = @Original_Srl) AND ((@IsNul"& _ 
                "l_Srl_Pm_Device_Sazande = 1 AND [Srl_Pm_Device_Sazande] IS NULL) OR ([Srl_Pm_Dev"& _ 
                "ice_Sazande] = @Original_Srl_Pm_Device_Sazande)) AND ((@IsNull_Srl_Pm_Lab_Rol_Ta"& _ 
                "jhiz = 1 AND [Srl_Pm_Lab_Rol_Tajhiz] IS NULL) OR ([Srl_Pm_Lab_Rol_Tajhiz] = @Ori"& _ 
                "ginal_Srl_Pm_Lab_Rol_Tajhiz)) AND ((@IsNull_Srl_Pm_Lab_Rol_Masool_Tamir = 1 AND "& _ 
                "[Srl_Pm_Lab_Rol_Masool_Tamir] IS NULL) OR ([Srl_Pm_Lab_Rol_Masool_Tamir] = @Orig"& _ 
                "inal_Srl_Pm_Lab_Rol_Masool_Tamir)) AND ((@IsNull_Srl_Pm_Lab_Rol_SharheKar = 1 AN"& _ 
                "D [Srl_Pm_Lab_Rol_SharheKar] IS NULL) OR ([Srl_Pm_Lab_Rol_SharheKar] = @Original"& _ 
                "_Srl_Pm_Lab_Rol_SharheKar)) AND ((@IsNull_Srl_Pm_Lab_Rol_Mahal_Nasb = 1 AND [Srl"& _ 
                "_Pm_Lab_Rol_Mahal_Nasb] IS NULL) OR ([Srl_Pm_Lab_Rol_Mahal_Nasb] = @Original_Srl"& _ 
                "_Pm_Lab_Rol_Mahal_Nasb)) AND ((@IsNull_No = 1 AND [No] IS NULL) OR ([No] = @Orig"& _ 
                "inal_No)) AND ((@IsNull_No_Barcode = 1 AND [No_Barcode] IS NULL) OR ([No_Barcode"& _ 
                "] = @Original_No_Barcode)) AND ((@IsNull_Pelak_Amval = 1 AND [Pelak_Amval] IS NU"& _ 
                "LL) OR ([Pelak_Amval] = @Original_Pelak_Amval)) AND ((@IsNull_VorodDate = 1 AND "& _ 
                "[VorodDate] IS NULL) OR ([VorodDate] = @Original_VorodDate)) AND ((@IsNull_Khoro"& _ 
                "jDate = 1 AND [KhorojDate] IS NULL) OR ([KhorojDate] = @Original_KhorojDate)) AN"& _ 
                "D ((@IsNull_Tahvilgirande = 1 AND [Tahvilgirande] IS NULL) OR ([Tahvilgirande] ="& _ 
                " @Original_Tahvilgirande)) AND ((@IsNull_Tahvildahande = 1 AND [Tahvildahande] I"& _ 
                "S NULL) OR ([Tahvildahande] = @Original_Tahvildahande)) AND ((@IsNull_Eib = 1 AN"& _ 
                "D [Eib] IS NULL) OR ([Eib] = @Original_Eib)) AND ((@IsNull_Dis = 1 AND [Dis] IS "& _ 
                "NULL) OR ([Dis] = @Original_Dis)) AND ((@IsNull_SubmitDate = 1 AND [SubmitDate] "& _ 
                "IS NULL) OR ([SubmitDate] = @Original_SubmitDate)) AND ((@IsNull_TahvildahandeNo"& _ 
                " = 1 AND [TahvildahandeNo] IS NULL) OR ([TahvildahandeNo] = @Original_Tahvildaha"& _ 
                "ndeNo)) AND ((@IsNull_Srl_Pm_Lab_Rol_Mahal_Bahre = 1 AND [Srl_Pm_Lab_Rol_Mahal_B"& _ 
                "ahre] IS NULL) OR ([Srl_Pm_Lab_Rol_Mahal_Bahre] = @Original_Srl_Pm_Lab_Rol_Mahal"& _ 
                "_Bahre)) AND ((@IsNull_SabtDate = 1 AND [SabtDate] IS NULL) OR ([SabtDate] = @Or"& _ 
                "iginal_SabtDate)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Srl_Pm_Device_Sazande", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Device_Sazande", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl_Pm_Device_Sazande", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Device_Sazande", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Srl_Pm_Lab_Rol_Tajhiz", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Tajhiz", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl_Pm_Lab_Rol_Tajhiz", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Tajhiz", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Srl_Pm_Lab_Rol_Masool_Tamir", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Masool_Tamir", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl_Pm_Lab_Rol_Masool_Tamir", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Masool_Tamir", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Srl_Pm_Lab_Rol_SharheKar", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_SharheKar", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl_Pm_Lab_Rol_SharheKar", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_SharheKar", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Srl_Pm_Lab_Rol_Mahal_Nasb", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Mahal_Nasb", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl_Pm_Lab_Rol_Mahal_Nasb", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Mahal_Nasb", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_No", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "No", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_No", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_No_Barcode", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "No_Barcode", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_No_Barcode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "No_Barcode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Pelak_Amval", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pelak_Amval", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pelak_Amval", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pelak_Amval", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VorodDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VorodDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VorodDate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VorodDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_KhorojDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KhorojDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_KhorojDate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KhorojDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tahvilgirande", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tahvilgirande", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tahvilgirande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tahvilgirande", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tahvildahande", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tahvildahande", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tahvildahande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tahvildahande", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Eib", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Eib", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Eib", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Eib", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Dis", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dis", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Dis", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SubmitDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubmitDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubmitDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubmitDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TahvildahandeNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TahvildahandeNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TahvildahandeNo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TahvildahandeNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Srl_Pm_Lab_Rol_Mahal_Bahre", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Mahal_Bahre", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl_Pm_Lab_Rol_Mahal_Bahre", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Mahal_Bahre", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SabtDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SabtDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SabtDate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SabtDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Pm_Lab_Rol_Master] ([Srl_Pm_Device_Sazande], [Srl_Pm_Lab_Rol_T"& _ 
                "ajhiz], [Srl_Pm_Lab_Rol_Masool_Tamir], [Srl_Pm_Lab_Rol_SharheKar], [Srl_Pm_Lab_R"& _ 
                "ol_Mahal_Nasb], [No], [No_Barcode], [Pelak_Amval], [VorodDate], [KhorojDate], [T"& _ 
                "ahvilgirande], [Tahvildahande], [Eib], [Dis], [SubmitDate], [TahvildahandeNo], ["& _ 
                "Srl_Pm_Lab_Rol_Mahal_Bahre], [SabtDate]) VALUES (@Srl_Pm_Device_Sazande, @Srl_Pm"& _ 
                "_Lab_Rol_Tajhiz, @Srl_Pm_Lab_Rol_Masool_Tamir, @Srl_Pm_Lab_Rol_SharheKar, @Srl_P"& _ 
                "m_Lab_Rol_Mahal_Nasb, @No, @No_Barcode, @Pelak_Amval, @VorodDate, @KhorojDate, @"& _ 
                "Tahvilgirande, @Tahvildahande, @Eib, @Dis, @SubmitDate, @TahvildahandeNo, @Srl_P"& _ 
                "m_Lab_Rol_Mahal_Bahre, @SabtDate);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Srl, Srl_Pm_Device_Sazande, Srl_Pm_La"& _ 
                "b_Rol_Tajhiz, Srl_Pm_Lab_Rol_Masool_Tamir, Srl_Pm_Lab_Rol_SharheKar, Srl_Pm_Lab_"& _ 
                "Rol_Mahal_Nasb, No, No_Barcode, Pelak_Amval, VorodDate, KhorojDate, Tahvilgirand"& _ 
                "e, Tahvildahande, Eib, Dis, SubmitDate, TahvildahandeNo, Srl_Pm_Lab_Rol_Mahal_Ba"& _ 
                "hre, SabtDate FROM Pm_Lab_Rol_Master WHERE (Srl = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Pm_Device_Sazande", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Device_Sazande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Pm_Lab_Rol_Tajhiz", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Tajhiz", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Pm_Lab_Rol_Masool_Tamir", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Masool_Tamir", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Pm_Lab_Rol_SharheKar", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_SharheKar", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Pm_Lab_Rol_Mahal_Nasb", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Mahal_Nasb", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@No", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@No_Barcode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "No_Barcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pelak_Amval", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pelak_Amval", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VorodDate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VorodDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KhorojDate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KhorojDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tahvilgirande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tahvilgirande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tahvildahande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tahvildahande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Eib", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Eib", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dis", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubmitDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubmitDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TahvildahandeNo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TahvildahandeNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Pm_Lab_Rol_Mahal_Bahre", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Mahal_Bahre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SabtDate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SabtDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Pm_Lab_Rol_Master] SET [Srl_Pm_Device_Sazande] = @Srl_Pm_Device_Saz"& _ 
                "ande, [Srl_Pm_Lab_Rol_Tajhiz] = @Srl_Pm_Lab_Rol_Tajhiz, [Srl_Pm_Lab_Rol_Masool_T"& _ 
                "amir] = @Srl_Pm_Lab_Rol_Masool_Tamir, [Srl_Pm_Lab_Rol_SharheKar] = @Srl_Pm_Lab_R"& _ 
                "ol_SharheKar, [Srl_Pm_Lab_Rol_Mahal_Nasb] = @Srl_Pm_Lab_Rol_Mahal_Nasb, [No] = @"& _ 
                "No, [No_Barcode] = @No_Barcode, [Pelak_Amval] = @Pelak_Amval, [VorodDate] = @Vor"& _ 
                "odDate, [KhorojDate] = @KhorojDate, [Tahvilgirande] = @Tahvilgirande, [Tahvildah"& _ 
                "ande] = @Tahvildahande, [Eib] = @Eib, [Dis] = @Dis, [SubmitDate] = @SubmitDate, "& _ 
                "[TahvildahandeNo] = @TahvildahandeNo, [Srl_Pm_Lab_Rol_Mahal_Bahre] = @Srl_Pm_Lab"& _ 
                "_Rol_Mahal_Bahre, [SabtDate] = @SabtDate WHERE (([Srl] = @Original_Srl) AND ((@I"& _ 
                "sNull_Srl_Pm_Device_Sazande = 1 AND [Srl_Pm_Device_Sazande] IS NULL) OR ([Srl_Pm"& _ 
                "_Device_Sazande] = @Original_Srl_Pm_Device_Sazande)) AND ((@IsNull_Srl_Pm_Lab_Ro"& _ 
                "l_Tajhiz = 1 AND [Srl_Pm_Lab_Rol_Tajhiz] IS NULL) OR ([Srl_Pm_Lab_Rol_Tajhiz] = "& _ 
                "@Original_Srl_Pm_Lab_Rol_Tajhiz)) AND ((@IsNull_Srl_Pm_Lab_Rol_Masool_Tamir = 1 "& _ 
                "AND [Srl_Pm_Lab_Rol_Masool_Tamir] IS NULL) OR ([Srl_Pm_Lab_Rol_Masool_Tamir] = @"& _ 
                "Original_Srl_Pm_Lab_Rol_Masool_Tamir)) AND ((@IsNull_Srl_Pm_Lab_Rol_SharheKar = "& _ 
                "1 AND [Srl_Pm_Lab_Rol_SharheKar] IS NULL) OR ([Srl_Pm_Lab_Rol_SharheKar] = @Orig"& _ 
                "inal_Srl_Pm_Lab_Rol_SharheKar)) AND ((@IsNull_Srl_Pm_Lab_Rol_Mahal_Nasb = 1 AND "& _ 
                "[Srl_Pm_Lab_Rol_Mahal_Nasb] IS NULL) OR ([Srl_Pm_Lab_Rol_Mahal_Nasb] = @Original"& _ 
                "_Srl_Pm_Lab_Rol_Mahal_Nasb)) AND ((@IsNull_No = 1 AND [No] IS NULL) OR ([No] = @"& _ 
                "Original_No)) AND ((@IsNull_No_Barcode = 1 AND [No_Barcode] IS NULL) OR ([No_Bar"& _ 
                "code] = @Original_No_Barcode)) AND ((@IsNull_Pelak_Amval = 1 AND [Pelak_Amval] I"& _ 
                "S NULL) OR ([Pelak_Amval] = @Original_Pelak_Amval)) AND ((@IsNull_VorodDate = 1 "& _ 
                "AND [VorodDate] IS NULL) OR ([VorodDate] = @Original_VorodDate)) AND ((@IsNull_K"& _ 
                "horojDate = 1 AND [KhorojDate] IS NULL) OR ([KhorojDate] = @Original_KhorojDate)"& _ 
                ") AND ((@IsNull_Tahvilgirande = 1 AND [Tahvilgirande] IS NULL) OR ([Tahvilgirand"& _ 
                "e] = @Original_Tahvilgirande)) AND ((@IsNull_Tahvildahande = 1 AND [Tahvildahand"& _ 
                "e] IS NULL) OR ([Tahvildahande] = @Original_Tahvildahande)) AND ((@IsNull_Eib = "& _ 
                "1 AND [Eib] IS NULL) OR ([Eib] = @Original_Eib)) AND ((@IsNull_Dis = 1 AND [Dis]"& _ 
                " IS NULL) OR ([Dis] = @Original_Dis)) AND ((@IsNull_SubmitDate = 1 AND [SubmitDa"& _ 
                "te] IS NULL) OR ([SubmitDate] = @Original_SubmitDate)) AND ((@IsNull_Tahvildahan"& _ 
                "deNo = 1 AND [TahvildahandeNo] IS NULL) OR ([TahvildahandeNo] = @Original_Tahvil"& _ 
                "dahandeNo)) AND ((@IsNull_Srl_Pm_Lab_Rol_Mahal_Bahre = 1 AND [Srl_Pm_Lab_Rol_Mah"& _ 
                "al_Bahre] IS NULL) OR ([Srl_Pm_Lab_Rol_Mahal_Bahre] = @Original_Srl_Pm_Lab_Rol_M"& _ 
                "ahal_Bahre)) AND ((@IsNull_SabtDate = 1 AND [SabtDate] IS NULL) OR ([SabtDate] ="& _ 
                " @Original_SabtDate)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Srl, Srl_Pm_Device_Sazande, Srl_Pm_Lab_Rol_Tajhi"& _ 
                "z, Srl_Pm_Lab_Rol_Masool_Tamir, Srl_Pm_Lab_Rol_SharheKar, Srl_Pm_Lab_Rol_Mahal_N"& _ 
                "asb, No, No_Barcode, Pelak_Amval, VorodDate, KhorojDate, Tahvilgirande, Tahvilda"& _ 
                "hande, Eib, Dis, SubmitDate, TahvildahandeNo, Srl_Pm_Lab_Rol_Mahal_Bahre, SabtDa"& _ 
                "te FROM Pm_Lab_Rol_Master WHERE (Srl = @Srl)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Pm_Device_Sazande", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Device_Sazande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Pm_Lab_Rol_Tajhiz", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Tajhiz", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Pm_Lab_Rol_Masool_Tamir", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Masool_Tamir", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Pm_Lab_Rol_SharheKar", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_SharheKar", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Pm_Lab_Rol_Mahal_Nasb", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Mahal_Nasb", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@No", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@No_Barcode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "No_Barcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pelak_Amval", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pelak_Amval", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VorodDate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VorodDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KhorojDate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KhorojDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tahvilgirande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tahvilgirande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tahvildahande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tahvildahande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Eib", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Eib", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dis", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubmitDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubmitDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TahvildahandeNo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TahvildahandeNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Pm_Lab_Rol_Mahal_Bahre", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Mahal_Bahre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SabtDate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SabtDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Srl_Pm_Device_Sazande", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Device_Sazande", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl_Pm_Device_Sazande", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Device_Sazande", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Srl_Pm_Lab_Rol_Tajhiz", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Tajhiz", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl_Pm_Lab_Rol_Tajhiz", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Tajhiz", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Srl_Pm_Lab_Rol_Masool_Tamir", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Masool_Tamir", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl_Pm_Lab_Rol_Masool_Tamir", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Masool_Tamir", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Srl_Pm_Lab_Rol_SharheKar", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_SharheKar", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl_Pm_Lab_Rol_SharheKar", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_SharheKar", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Srl_Pm_Lab_Rol_Mahal_Nasb", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Mahal_Nasb", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl_Pm_Lab_Rol_Mahal_Nasb", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Mahal_Nasb", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_No", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "No", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_No", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_No_Barcode", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "No_Barcode", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_No_Barcode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "No_Barcode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Pelak_Amval", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pelak_Amval", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pelak_Amval", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pelak_Amval", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VorodDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VorodDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VorodDate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VorodDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_KhorojDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KhorojDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_KhorojDate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KhorojDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tahvilgirande", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tahvilgirande", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tahvilgirande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tahvilgirande", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tahvildahande", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tahvildahande", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tahvildahande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tahvildahande", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Eib", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Eib", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Eib", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Eib", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Dis", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dis", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Dis", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dis", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SubmitDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubmitDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubmitDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubmitDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TahvildahandeNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TahvildahandeNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TahvildahandeNo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TahvildahandeNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Srl_Pm_Lab_Rol_Mahal_Bahre", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Mahal_Bahre", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Srl_Pm_Lab_Rol_Mahal_Bahre", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Mahal_Bahre", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SabtDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SabtDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SabtDate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SabtDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT * FROM dbo.Pm_Lab_Rol_Master "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where (No=@Number or @Number=-1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Number", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Lab.Pm_Lab_Rol_MasterDataTable, ByVal Number As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Number Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Number,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Number As String) As Ds_Lab.Pm_Lab_Rol_MasterDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Number Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Number,String)
            End If
            Dim dataTable As Ds_Lab.Pm_Lab_Rol_MasterDataTable = New Ds_Lab.Pm_Lab_Rol_MasterDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds_Lab.Pm_Lab_Rol_MasterDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds_Lab) As Integer
            Return Me.Adapter.Update(dataSet, "Pm_Lab_Rol_Master")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Pm_Lab_Rol_Master_VwTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pm_Lab_Rol_Master_Vw"
            tableMapping.ColumnMappings.Add("نام تجهیز", "نام تجهیز")
            tableMapping.ColumnMappings.Add("محل استفاده از تجهیز", "محل استفاده از تجهیز")
            tableMapping.ColumnMappings.Add("Srl", "Srl")
            tableMapping.ColumnMappings.Add("شماره", "شماره")
            tableMapping.ColumnMappings.Add("تاریخ ورود تجهیز", "تاریخ ورود تجهیز")
            tableMapping.ColumnMappings.Add("مسئول تعمیر", "مسئول تعمیر")
            tableMapping.ColumnMappings.Add("تاریخ ثبت", "تاریخ ثبت")
            tableMapping.ColumnMappings.Add("شرکت سازنده", "شرکت سازنده")
            tableMapping.ColumnMappings.Add("تاریخ خروج", "تاریخ خروج")
            tableMapping.ColumnMappings.Add("بارکد", "بارکد")
            tableMapping.ColumnMappings.Add("تاریخ", "تاریخ")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Nama_PM.My.MySettings.Default.Nama_PMConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"dbo.Pm_Lab_Rol_Master.[Srl],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"dbo.Pm_Lab_Rol_Master.[No] as ""شماره"" ,dbo"& _ 
                ".Pm_Lab_Rol_Master.[No_Barcode] as ""بارکد"",  dbo.Pm_Lab_Rol_Master.[VorodDate] a"& _ 
                "s ""تاریخ ورود تجهیز"",dbo.Pm_Lab_Rol_Master.[KhorojDate] as ""تاریخ خروج"",dbo.Pm_L"& _ 
                "ab_Rol_Master.[SabtDate] as ""تاریخ ثبت"",  [dbo].[GetDateFromSharheKar] (dbo.Pm_L"& _ 
                "ab_Rol_Master.Srl) as ""تاریخ"","&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"dbo.Pm_Lab_Rol_Tajhiz.Name as ""نام تجهیز"",dbo.Pm"& _ 
                "_Lab_Rol_Mahal.Name as ""محل استفاده از تجهیز"" ,dbo.Pm_Lab_Rol_Masool_Tamir.Name "& _ 
                "as ""مسئول تعمیر"","&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"dbo.Pm_Device_Sazande.[Text] as ""شرکت سازنده"""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM dbo.Pm_"& _ 
                "Lab_Rol_Master LEFT JOIN dbo.Pm_Lab_Rol_Tajhiz ON dbo.Pm_Lab_Rol_Master.Srl_Pm_L"& _ 
                "ab_Rol_Tajhiz=dbo.Pm_Lab_Rol_Tajhiz.Srl "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" LEFT JOIN dbo.Pm_Lab_Rol_Mahal ON dbo"& _ 
                ".Pm_Lab_Rol_Master.Srl_Pm_Lab_Rol_Mahal_Nasb=dbo.Pm_Lab_Rol_Mahal.Srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"LEFT JOIN"& _ 
                " dbo.Pm_Lab_Rol_Masool_Tamir ON "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"dbo.Pm_Lab_Rol_Master.Srl_Pm_Lab_Rol_Masool_Ta"& _ 
                "mir=dbo.Pm_Lab_Rol_Masool_Tamir.Srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"LEFT JOIN dbo.Pm_Device_Sazande ON"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" dbo.Pm"& _ 
                "_Lab_Rol_Master.Srl_Pm_Device_Sazande= dbo.Pm_Device_Sazande.Srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY dbo"& _ 
                ".Pm_Lab_Rol_Master.Srl DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"dbo.Pm_Lab_Rol_Master.[Srl],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"dbo.Pm_Lab_Rol_Master.[No] as ""شماره"" ,dbo"& _ 
                ".Pm_Lab_Rol_Master.[No_Barcode] as ""بارکد"", dbo.Pm_Lab_Rol_Master.[VorodDate] as"& _ 
                " ""تاریخ ورود تجهیز"",dbo.Pm_Lab_Rol_Master.[SabtDate] as ""تاریخ ثبت"","&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" [dbo].[Ge"& _ 
                "tDateFromSharheKar] (dbo.Pm_Lab_Rol_Master.Srl) as ""تاریخ"","&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"dbo.Pm_Lab_Rol_Tajh"& _ 
                "iz.Name as ""نام تجهیز"",dbo.Pm_Lab_Rol_Mahal.Name as ""محل استفاده از تجهیز"" ,dbo."& _ 
                "Pm_Lab_Rol_Masool_Tamir.Name as ""مسئول تعمیر"","&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"dbo.Pm_Device_Sazande.[Text] as "& _ 
                """شرکت سازنده"""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM dbo.Pm_Lab_Rol_Master LEFT JOIN dbo.Pm_Lab_Rol_Tajhiz ON dbo"& _ 
                ".Pm_Lab_Rol_Master.Srl_Pm_Lab_Rol_Tajhiz=dbo.Pm_Lab_Rol_Tajhiz.Srl "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" LEFT JOIN "& _ 
                "dbo.Pm_Lab_Rol_Mahal ON dbo.Pm_Lab_Rol_Master.Srl_Pm_Lab_Rol_Mahal_Nasb=dbo.Pm_L"& _ 
                "ab_Rol_Mahal.Srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"LEFT JOIN dbo.Pm_Lab_Rol_Masool_Tamir ON "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"dbo.Pm_Lab_Rol_Mast"& _ 
                "er.Srl_Pm_Lab_Rol_Masool_Tamir=dbo.Pm_Lab_Rol_Masool_Tamir.Srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"LEFT JOIN dbo.Pm"& _ 
                "_Device_Sazande ON"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" dbo.Pm_Lab_Rol_Master.Srl_Pm_Device_Sazande= dbo.Pm_Device_"& _ 
                "Sazande.Srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" where (Pm_Lab_Rol_Master.No =@No or @No='-1')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY dbo.Pm_Lab"& _ 
                "_Rol_Master.Srl DESC"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@No", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "شماره", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"dbo.Pm_Lab_Rol_Master.[Srl],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"dbo.Pm_Lab_Rol_Master.[No] as ""شماره"" ,dbo"& _ 
                ".Pm_Lab_Rol_Master.[No_Barcode] as ""بارکد"", dbo.Pm_Lab_Rol_Master.[Pelak_Amval] "& _ 
                "as ""سریال"" ,dbo.Pm_Lab_Rol_Master.[VorodDate] as ""تاریخ ورود تجهیز"",dbo.Pm_Lab_R"& _ 
                "ol_Master.[SabtDate] as ""تاریخ ثبت"",dbo.Pm_Lab_Rol_Master.[KhorojDate] as ""تاریخ"& _ 
                " خروج"", [dbo].[GetDateFromSharheKar] (dbo.Pm_Lab_Rol_Master.Srl) as ""تاریخ"","&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"db"& _ 
                "o.Pm_Lab_Rol_Tajhiz.Name as ""نام تجهیز"",dbo.Pm_Lab_Rol_Mahal.Name as ""محل استفاد"& _ 
                "ه از تجهیز"" ,dbo.Pm_Lab_Rol_Master.Srl_Pm_Lab_Rol_Mahal_Nasb , dbo.Pm_Lab_Rol_Ma"& _ 
                "ster.Srl_Pm_Lab_Rol_Mahal_Bahre"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&",dbo.Pm_Lab_Rol_Masool_Tamir.Name as ""مسئول تعم"& _ 
                "یر"","&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"dbo.Pm_Device_Sazande.[Text] as ""شرکت سازنده"""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM dbo.Pm_Lab_Rol_Master "& _ 
                "LEFT JOIN dbo.Pm_Lab_Rol_Tajhiz ON dbo.Pm_Lab_Rol_Master.Srl_Pm_Lab_Rol_Tajhiz=d"& _ 
                "bo.Pm_Lab_Rol_Tajhiz.Srl "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" LEFT JOIN dbo.Pm_Lab_Rol_Mahal ON dbo.Pm_Lab_Rol_Mas"& _ 
                "ter.Srl_Pm_Lab_Rol_Mahal_Nasb=dbo.Pm_Lab_Rol_Mahal.Srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"LEFT JOIN dbo.Pm_Lab_Rol"& _ 
                "_Masool_Tamir ON "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"dbo.Pm_Lab_Rol_Master.Srl_Pm_Lab_Rol_Masool_Tamir=dbo.Pm_Lab_"& _ 
                "Rol_Masool_Tamir.Srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"LEFT JOIN dbo.Pm_Device_Sazande ON"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" dbo.Pm_Lab_Rol_Master"& _ 
                ".Srl_Pm_Device_Sazande= dbo.Pm_Device_Sazande.Srl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where  ( dbo.Pm_Lab_Rol_Maste"& _ 
                "r.No =@No or @No='-1') And"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" ( dbo.Pm_Lab_Rol_Master.No_Barcode =@No_Barcode or "& _ 
                "@No_Barcode='-1') And (dbo.Pm_Lab_Rol_Master.Pelak_Amval=@Serial or @Serial='-1'"& _ 
                " ) And"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"( dbo.Pm_Lab_Rol_Master.Srl_Pm_Device_Sazande = @Srl_Pm_Device_Sazande o"& _ 
                "r @Srl_Pm_Device_Sazande =-1) And"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"( dbo.Pm_Lab_Rol_Master.Srl_Pm_Lab_Rol_Tajhiz"& _ 
                " = @Srl_Pm_Lab_Rol_Tajhiz or @Srl_Pm_Lab_Rol_Tajhiz=-1)  And"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"( dbo.Pm_Lab_Rol_M"& _ 
                "aster.Srl_Pm_Lab_Rol_Masool_Tamir = @Srl_Pm_Lab_Rol_Masool_Tamir or @Srl_Pm_Lab_"& _ 
                "Rol_Masool_Tamir=-1)  And"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"( dbo.Pm_Lab_Rol_Master.Srl_Pm_Lab_Rol_Mahal_Nasb = @"& _ 
                "Srl_Pm_Lab_Rol_Mahal_Nasb or @Srl_Pm_Lab_Rol_Mahal_Nasb =-1)  And"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"( dbo.Pm_Lab_"& _ 
                "Rol_Master.Srl_Pm_Lab_Rol_Mahal_Bahre = @Srl_Pm_Lab_Rol_Mahal_Bahre or @Srl_Pm_L"& _ 
                "ab_Rol_Mahal_Bahre =-1)  And"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(dbo.Pm_Lab_Rol_Master.[VorodDate] >=@VorodDateFro"& _ 
                "m or @VorodDateFrom ='-1') And"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(dbo.Pm_Lab_Rol_Master.[VorodDate] <=@VorodDateT"& _ 
                "o or @VorodDateTo ='-1') And"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(dbo.Pm_Lab_Rol_Master.[KhorojDate] >= @KhorojDate"& _ 
                "From or @KhorojDateFrom ='-1') AND"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(dbo.Pm_Lab_Rol_Master.[KhorojDate] <= @Khor"& _ 
                "ojDateTo or @KhorojDateTo ='-1') AND"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(dbo.Pm_Lab_Rol_Master.[SabtDate] >= @Sabt"& _ 
                "DateFrom or @SabtDateFrom ='-1')  And"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(dbo.Pm_Lab_Rol_Master.[SabtDate] <= @Sab"& _ 
                "tDateTo or @SabtDateTo ='-1') "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY dbo.Pm_Lab_Rol_Master.No DESC"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@No", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "شماره", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@No_Barcode", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "بارکد", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Serial", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "سریال", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Pm_Device_Sazande", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Device_Sazande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Pm_Lab_Rol_Tajhiz", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Tajhiz", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Pm_Lab_Rol_Masool_Tamir", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Masool_Tamir", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Pm_Lab_Rol_Mahal_Nasb", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Mahal_Nasb", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Srl_Pm_Lab_Rol_Mahal_Bahre", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Srl_Pm_Lab_Rol_Mahal_Bahre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VorodDateFrom", Global.System.Data.SqlDbType.NVarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "تاریخ ورود تجهیز", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VorodDateTo", Global.System.Data.SqlDbType.NVarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "تاریخ ورود تجهیز", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KhorojDateFrom", Global.System.Data.SqlDbType.NVarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "تاریخ خروج", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KhorojDateTo", Global.System.Data.SqlDbType.NVarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "تاریخ خروج", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SabtDateFrom", Global.System.Data.SqlDbType.NVarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "تاریخ ثبت", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SabtDateTo", Global.System.Data.SqlDbType.NVarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "تاریخ ثبت", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds_Lab.Pm_Lab_Rol_Master_VwDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds_Lab.Pm_Lab_Rol_Master_VwDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds_Lab.Pm_Lab_Rol_Master_VwDataTable = New Ds_Lab.Pm_Lab_Rol_Master_VwDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As Ds_Lab.Pm_Lab_Rol_Master_VwDataTable, ByVal No As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(No,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal No As String) As Ds_Lab.Pm_Lab_Rol_Master_VwDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(No,String)
            End If
            Dim dataTable As Ds_Lab.Pm_Lab_Rol_Master_VwDataTable = New Ds_Lab.Pm_Lab_Rol_Master_VwDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySeach(ByVal dataTable As Ds_Lab.Pm_Lab_Rol_Master_VwDataTable, ByVal No As String, ByVal No_Barcode As String, ByVal Serial As String, ByVal Srl_Pm_Device_Sazande As Global.System.Nullable(Of Integer), ByVal Srl_Pm_Lab_Rol_Tajhiz As Global.System.Nullable(Of Integer), ByVal Srl_Pm_Lab_Rol_Masool_Tamir As Global.System.Nullable(Of Integer), ByVal Srl_Pm_Lab_Rol_Mahal_Nasb As Global.System.Nullable(Of Integer), ByVal Srl_Pm_Lab_Rol_Mahal_Bahre As Global.System.Nullable(Of Integer), ByVal VorodDateFrom As String, ByVal VorodDateTo As String, ByVal KhorojDateFrom As String, ByVal KhorojDateTo As String, ByVal SabtDateFrom As String, ByVal SabtDateTo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(No,String)
            End If
            If (No_Barcode Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(No_Barcode,String)
            End If
            If (Serial Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Serial,String)
            End If
            If (Srl_Pm_Device_Sazande.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Srl_Pm_Device_Sazande.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Srl_Pm_Lab_Rol_Tajhiz.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Srl_Pm_Lab_Rol_Tajhiz.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Srl_Pm_Lab_Rol_Masool_Tamir.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(Srl_Pm_Lab_Rol_Masool_Tamir.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Srl_Pm_Lab_Rol_Mahal_Nasb.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(Srl_Pm_Lab_Rol_Mahal_Nasb.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Srl_Pm_Lab_Rol_Mahal_Bahre.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(Srl_Pm_Lab_Rol_Mahal_Bahre.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (VorodDateFrom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(VorodDateFrom,String)
            End If
            If (VorodDateTo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(VorodDateTo,String)
            End If
            If (KhorojDateFrom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(KhorojDateFrom,String)
            End If
            If (KhorojDateTo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(KhorojDateTo,String)
            End If
            If (SabtDateFrom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(SabtDateFrom,String)
            End If
            If (SabtDateTo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(13).Value = CType(SabtDateTo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBySearch(ByVal No As String, ByVal No_Barcode As String, ByVal Serial As String, ByVal Srl_Pm_Device_Sazande As Global.System.Nullable(Of Integer), ByVal Srl_Pm_Lab_Rol_Tajhiz As Global.System.Nullable(Of Integer), ByVal Srl_Pm_Lab_Rol_Masool_Tamir As Global.System.Nullable(Of Integer), ByVal Srl_Pm_Lab_Rol_Mahal_Nasb As Global.System.Nullable(Of Integer), ByVal Srl_Pm_Lab_Rol_Mahal_Bahre As Global.System.Nullable(Of Integer), ByVal VorodDateFrom As String, ByVal VorodDateTo As String, ByVal KhorojDateFrom As String, ByVal KhorojDateTo As String, ByVal SabtDateFrom As String, ByVal SabtDateTo As String) As Ds_Lab.Pm_Lab_Rol_Master_VwDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(No,String)
            End If
            If (No_Barcode Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(No_Barcode,String)
            End If
            If (Serial Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Serial,String)
            End If
            If (Srl_Pm_Device_Sazande.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Srl_Pm_Device_Sazande.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Srl_Pm_Lab_Rol_Tajhiz.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Srl_Pm_Lab_Rol_Tajhiz.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Srl_Pm_Lab_Rol_Masool_Tamir.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(Srl_Pm_Lab_Rol_Masool_Tamir.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Srl_Pm_Lab_Rol_Mahal_Nasb.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(Srl_Pm_Lab_Rol_Mahal_Nasb.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Srl_Pm_Lab_Rol_Mahal_Bahre.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(Srl_Pm_Lab_Rol_Mahal_Bahre.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (VorodDateFrom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(VorodDateFrom,String)
            End If
            If (VorodDateTo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(VorodDateTo,String)
            End If
            If (KhorojDateFrom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(KhorojDateFrom,String)
            End If
            If (KhorojDateTo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(KhorojDateTo,String)
            End If
            If (SabtDateFrom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(SabtDateFrom,String)
            End If
            If (SabtDateTo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(13).Value = CType(SabtDateTo,String)
            End If
            Dim dataTable As Ds_Lab.Pm_Lab_Rol_Master_VwDataTable = New Ds_Lab.Pm_Lab_Rol_Master_VwDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _pm_Lab_Rol_Masool_TamirTableAdapter As Pm_Lab_Rol_Masool_TamirTableAdapter
        
        Private _pm_Lab_Rol_TajhizTableAdapter As Pm_Lab_Rol_TajhizTableAdapter
        
        Private _pm_Lab_Rol_MahalTableAdapter As Pm_Lab_Rol_MahalTableAdapter
        
        Private _pm_Lab_Rol_MasterTableAdapter As Pm_Lab_Rol_MasterTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Pm_Lab_Rol_Masool_TamirTableAdapter() As Pm_Lab_Rol_Masool_TamirTableAdapter
            Get
                Return Me._pm_Lab_Rol_Masool_TamirTableAdapter
            End Get
            Set
                Me._pm_Lab_Rol_Masool_TamirTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Pm_Lab_Rol_TajhizTableAdapter() As Pm_Lab_Rol_TajhizTableAdapter
            Get
                Return Me._pm_Lab_Rol_TajhizTableAdapter
            End Get
            Set
                Me._pm_Lab_Rol_TajhizTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Pm_Lab_Rol_MahalTableAdapter() As Pm_Lab_Rol_MahalTableAdapter
            Get
                Return Me._pm_Lab_Rol_MahalTableAdapter
            End Get
            Set
                Me._pm_Lab_Rol_MahalTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Pm_Lab_Rol_MasterTableAdapter() As Pm_Lab_Rol_MasterTableAdapter
            Get
                Return Me._pm_Lab_Rol_MasterTableAdapter
            End Get
            Set
                Me._pm_Lab_Rol_MasterTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._pm_Lab_Rol_Masool_TamirTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pm_Lab_Rol_Masool_TamirTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pm_Lab_Rol_Masool_TamirTableAdapter.Connection
                End If
                If ((Not (Me._pm_Lab_Rol_TajhizTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pm_Lab_Rol_TajhizTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pm_Lab_Rol_TajhizTableAdapter.Connection
                End If
                If ((Not (Me._pm_Lab_Rol_MahalTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pm_Lab_Rol_MahalTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pm_Lab_Rol_MahalTableAdapter.Connection
                End If
                If ((Not (Me._pm_Lab_Rol_MasterTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pm_Lab_Rol_MasterTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pm_Lab_Rol_MasterTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._pm_Lab_Rol_Masool_TamirTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pm_Lab_Rol_TajhizTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pm_Lab_Rol_MahalTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pm_Lab_Rol_MasterTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As Ds_Lab, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._pm_Lab_Rol_TajhizTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Pm_Lab_Rol_Tajhiz.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pm_Lab_Rol_TajhizTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pm_Lab_Rol_Masool_TamirTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Pm_Lab_Rol_Masool_Tamir.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pm_Lab_Rol_Masool_TamirTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pm_Lab_Rol_MahalTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Pm_Lab_Rol_Mahal.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pm_Lab_Rol_MahalTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pm_Lab_Rol_MasterTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Pm_Lab_Rol_Master.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pm_Lab_Rol_MasterTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As Ds_Lab, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._pm_Lab_Rol_TajhizTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Pm_Lab_Rol_Tajhiz.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pm_Lab_Rol_TajhizTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pm_Lab_Rol_Masool_TamirTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Pm_Lab_Rol_Masool_Tamir.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pm_Lab_Rol_Masool_TamirTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pm_Lab_Rol_MahalTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Pm_Lab_Rol_Mahal.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pm_Lab_Rol_MahalTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pm_Lab_Rol_MasterTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Pm_Lab_Rol_Master.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pm_Lab_Rol_MasterTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As Ds_Lab, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._pm_Lab_Rol_MasterTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Pm_Lab_Rol_Master.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pm_Lab_Rol_MasterTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pm_Lab_Rol_MahalTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Pm_Lab_Rol_Mahal.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pm_Lab_Rol_MahalTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pm_Lab_Rol_Masool_TamirTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Pm_Lab_Rol_Masool_Tamir.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pm_Lab_Rol_Masool_TamirTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pm_Lab_Rol_TajhizTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Pm_Lab_Rol_Tajhiz.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pm_Lab_Rol_TajhizTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As Ds_Lab) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._pm_Lab_Rol_Masool_TamirTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pm_Lab_Rol_Masool_TamirTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pm_Lab_Rol_TajhizTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pm_Lab_Rol_TajhizTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pm_Lab_Rol_MahalTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pm_Lab_Rol_MahalTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pm_Lab_Rol_MasterTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pm_Lab_Rol_MasterTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._pm_Lab_Rol_Masool_TamirTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pm_Lab_Rol_Masool_TamirTableAdapter, Me._pm_Lab_Rol_Masool_TamirTableAdapter.Connection)
                    Me._pm_Lab_Rol_Masool_TamirTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Lab_Rol_Masool_TamirTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._pm_Lab_Rol_Masool_TamirTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pm_Lab_Rol_Masool_TamirTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pm_Lab_Rol_Masool_TamirTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pm_Lab_Rol_TajhizTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pm_Lab_Rol_TajhizTableAdapter, Me._pm_Lab_Rol_TajhizTableAdapter.Connection)
                    Me._pm_Lab_Rol_TajhizTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Lab_Rol_TajhizTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._pm_Lab_Rol_TajhizTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pm_Lab_Rol_TajhizTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pm_Lab_Rol_TajhizTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pm_Lab_Rol_MahalTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pm_Lab_Rol_MahalTableAdapter, Me._pm_Lab_Rol_MahalTableAdapter.Connection)
                    Me._pm_Lab_Rol_MahalTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Lab_Rol_MahalTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._pm_Lab_Rol_MahalTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pm_Lab_Rol_MahalTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pm_Lab_Rol_MahalTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pm_Lab_Rol_MasterTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pm_Lab_Rol_MasterTableAdapter, Me._pm_Lab_Rol_MasterTableAdapter.Connection)
                    Me._pm_Lab_Rol_MasterTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Lab_Rol_MasterTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._pm_Lab_Rol_MasterTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pm_Lab_Rol_MasterTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pm_Lab_Rol_MasterTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._pm_Lab_Rol_Masool_TamirTableAdapter) Is Nothing) Then
                    Me._pm_Lab_Rol_Masool_TamirTableAdapter.Connection = CType(revertConnections(Me._pm_Lab_Rol_Masool_TamirTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Lab_Rol_Masool_TamirTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pm_Lab_Rol_TajhizTableAdapter) Is Nothing) Then
                    Me._pm_Lab_Rol_TajhizTableAdapter.Connection = CType(revertConnections(Me._pm_Lab_Rol_TajhizTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Lab_Rol_TajhizTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pm_Lab_Rol_MahalTableAdapter) Is Nothing) Then
                    Me._pm_Lab_Rol_MahalTableAdapter.Connection = CType(revertConnections(Me._pm_Lab_Rol_MahalTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Lab_Rol_MahalTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pm_Lab_Rol_MasterTableAdapter) Is Nothing) Then
                    Me._pm_Lab_Rol_MasterTableAdapter.Connection = CType(revertConnections(Me._pm_Lab_Rol_MasterTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._pm_Lab_Rol_MasterTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
